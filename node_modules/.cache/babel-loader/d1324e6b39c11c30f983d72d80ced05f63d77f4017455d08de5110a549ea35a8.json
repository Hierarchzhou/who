{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport LoginForm from './components/auth/LoginForm.vue';\nimport ChatContainer from './components/chat/ChatContainer.vue';\nimport ServerList from './components/chat/ServerList.vue';\nimport OnlineUsersSidebar from './components/chat/OnlineUsersSidebar.vue';\nimport UserProfileEditor from './components/chat/UserProfileEditor.vue';\nimport { useStore } from 'vuex';\nimport { computed } from 'vue';\nexport default {\n  name: 'App',\n  components: {\n    LoginForm,\n    ChatContainer,\n    ServerList,\n    OnlineUsersSidebar,\n    UserProfileEditor\n  },\n  setup() {\n    const store = useStore();\n\n    // 从store获取用户状态\n    const userStatus = computed(() => store.getters['userProfile/status']);\n    const userTag = computed(() => Math.floor(Math.random() * 9000 + 1000)); // 模拟用户标签\n\n    return {\n      userStatus,\n      userTag\n    };\n  },\n  data() {\n    return {\n      username: localStorage.getItem('chat-username') || '',\n      // 用户名\n      avatar: localStorage.getItem('chat-avatar') || '',\n      // 头像\n      currentServerId: localStorage.getItem('current-server-id') || 'home',\n      // 当前服务器ID\n      currentServer: {\n        // 当前服务器信息\n        id: 'home',\n        name: 'general',\n        description: 'Welcome to the chat channel!'\n      },\n      onlineUsers: [],\n      // 在线用户列表\n      showProfileEditor: false,\n      // 是否显示个人资料编辑器\n      // 服务器模板\n      serverTemplate: {\n        name: 'general',\n        description: 'Welcome to the chat channel!',\n        channels: [{\n          id: 'general',\n          name: 'general',\n          type: 'text',\n          description: 'General chat channel for everyone'\n        }],\n        roles: [{\n          id: 'admin',\n          name: '管理员',\n          permissions: ['manage_server', 'manage_channels', 'manage_roles']\n        }, {\n          id: 'member',\n          name: '成员',\n          permissions: ['send_messages', 'read_messages']\n        }],\n        categories: [{\n          id: 'text-channels',\n          name: '文字频道',\n          type: 'category',\n          channels: ['general']\n        }]\n      }\n    };\n  },\n  created() {\n    // 从localStorage获取用户信息\n    const savedUsername = localStorage.getItem('chat-username');\n    const savedAvatar = localStorage.getItem('chat-avatar');\n    if (savedUsername) {\n      this.username = savedUsername;\n      this.avatar = savedAvatar || '';\n    }\n\n    // 应用保存的主题\n    const savedTheme = localStorage.getItem('chat-theme') || 'discord';\n    document.body.classList.add(`theme-${savedTheme}`);\n\n    // 恢复上次选择的服务器\n    const savedServerId = localStorage.getItem('current-server-id');\n    if (savedServerId) {\n      this.currentServerId = savedServerId;\n    }\n\n    // 初始化默认服务器\n    const servers = this.getServers();\n    if (servers.length === 0) {\n      const defaultServer = this.createNewServer('测试服务器');\n      this.currentServerId = defaultServer.id;\n      this.currentServer = defaultServer;\n    } else if (this.currentServerId === 'home') {\n      // 如果当前是主页，切换到第一个服务器\n      this.currentServerId = servers[0].id;\n      this.currentServer = servers[0];\n    }\n  },\n  methods: {\n    setUsername(userData) {\n      this.username = userData.username;\n      this.avatar = userData.avatar || '';\n\n      // 保存用户信息到localStorage\n      localStorage.setItem('chat-username', this.username);\n      if (this.avatar) {\n        localStorage.setItem('chat-avatar', this.avatar);\n      }\n    },\n    // 更新在线用户列表\n    updateOnlineUsers(users) {\n      this.onlineUsers = users;\n    },\n    // 打开个人资料编辑器\n    openProfileEditor() {\n      this.showProfileEditor = true;\n    },\n    // 关闭个人资料编辑器\n    closeProfileEditor() {\n      this.showProfileEditor = false;\n    },\n    // 更新个人资料\n    updateProfile(updatedProfile) {\n      this.username = updatedProfile.username;\n      this.avatar = updatedProfile.avatar;\n      this.showProfileEditor = false;\n\n      // 保存到localStorage\n      localStorage.setItem('chat-username', this.username);\n      localStorage.setItem('chat-avatar', this.avatar);\n    },\n    // 切换服务器\n    changeServer(server) {\n      this.currentServerId = server.id;\n      this.currentServer = server;\n\n      // 保存当前服务器ID到localStorage\n      localStorage.setItem('current-server-id', server.id);\n    },\n    // 显示添加服务器对话框\n    showAddServerDialog() {\n      // 创建一个新的服务器\n      const newServer = this.createNewServer('新服务器');\n      this.changeServer(newServer);\n    },\n    // 创建新服务器\n    createNewServer(serverName) {\n      const serverId = 'server-' + Date.now();\n      const newServer = {\n        id: serverId,\n        name: serverName,\n        icon: null,\n        description: this.serverTemplate.description,\n        channels: [...this.serverTemplate.channels],\n        roles: [...this.serverTemplate.roles],\n        categories: [...this.serverTemplate.categories],\n        members: [],\n        createdAt: new Date().toISOString(),\n        ownerId: this.username\n      };\n\n      // 保存服务器信息到 localStorage\n      const servers = JSON.parse(localStorage.getItem('chat-servers') || '[]');\n      servers.push(newServer);\n      localStorage.setItem('chat-servers', JSON.stringify(servers));\n      return newServer;\n    },\n    // 获取所有服务器\n    getServers() {\n      return JSON.parse(localStorage.getItem('chat-servers') || '[]');\n    },\n    // 更新服务器信息\n    updateServer(server) {\n      const servers = this.getServers();\n      const index = servers.findIndex(s => s.id === server.id);\n      if (index !== -1) {\n        servers[index] = server;\n        localStorage.setItem('chat-servers', JSON.stringify(servers));\n      }\n    },\n    // 显示服务器浏览器\n    showExploreServers() {\n      // TODO: 实现服务器浏览功能\n      console.log('显示服务器浏览器');\n    }\n  }\n};","map":{"version":3,"names":["LoginForm","ChatContainer","ServerList","OnlineUsersSidebar","UserProfileEditor","useStore","computed","name","components","setup","store","userStatus","getters","userTag","Math","floor","random","data","username","localStorage","getItem","avatar","currentServerId","currentServer","id","description","onlineUsers","showProfileEditor","serverTemplate","channels","type","roles","permissions","categories","created","savedUsername","savedAvatar","savedTheme","document","body","classList","add","savedServerId","servers","getServers","length","defaultServer","createNewServer","methods","setUsername","userData","setItem","updateOnlineUsers","users","openProfileEditor","closeProfileEditor","updateProfile","updatedProfile","changeServer","server","showAddServerDialog","newServer","serverName","serverId","Date","now","icon","members","createdAt","toISOString","ownerId","JSON","parse","push","stringify","updateServer","index","findIndex","s","showExploreServers","console","log"],"sources":["C:\\Users\\Administrator\\Desktop\\who\\src\\App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div v-if=\"!username\" class=\"login-container\">\n      <LoginForm @login=\"setUsername\" />\n    </div>\n    <div v-else class=\"discord-layout\">\n      <!-- 服务器列表 -->\n      <ServerList \n        :external-servers=\"[]\"\n        :current-server-id=\"currentServerId\"\n        @change-server=\"changeServer\"\n        @add-server=\"showAddServerDialog\"\n        @explore-servers=\"showExploreServers\"\n      />\n      \n      <!-- 服务器内容区域 -->\n      <div class=\"server-content\">\n        <!-- 聊天容器 -->\n        <ChatContainer \n          :currentUser=\"{ username, avatar }\" \n          :current-server=\"currentServer\"\n          @update-online-users=\"updateOnlineUsers\"\n          @open-profile-editor=\"openProfileEditor\"\n        />\n        \n        <!-- 用户面板 -->\n        <div class=\"user-panel\" @click=\"openProfileEditor\">\n          <div class=\"user-info\">\n            <div class=\"avatar-container\">\n              <img \n                :src=\"avatar || 'default-avatar.png'\" \n                :alt=\"username\" \n                class=\"user-avatar\"\n              />\n              <div class=\"status-indicator\" :class=\"userStatus\"></div>\n            </div>\n            <div class=\"user-details\">\n              <span class=\"username\">{{ username }}</span>\n              <span class=\"user-tag\">#{{ userTag }}</span>\n            </div>\n          </div>\n          <div class=\"user-controls\">\n            <button class=\"control-button\" title=\"麦克风\">🎤</button>\n            <button class=\"control-button\" title=\"耳机\">🎧</button>\n            <button class=\"control-button\" title=\"设置\">⚙️</button>\n          </div>\n        </div>\n      </div>\n      \n      <!-- 在线用户列表 -->\n      <OnlineUsersSidebar \n        :onlineUsers=\"onlineUsers\" \n        :currentUsername=\"username\"\n        @open-profile-editor=\"openProfileEditor\"\n      />\n\n      <!-- 个人资料编辑器 -->\n      <UserProfileEditor\n        v-if=\"showProfileEditor\"\n        :isOpen=\"showProfileEditor\"\n        @close=\"closeProfileEditor\"\n        @update-profile=\"updateProfile\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport LoginForm from './components/auth/LoginForm.vue'\nimport ChatContainer from './components/chat/ChatContainer.vue'\nimport ServerList from './components/chat/ServerList.vue'\nimport OnlineUsersSidebar from './components/chat/OnlineUsersSidebar.vue'\nimport UserProfileEditor from './components/chat/UserProfileEditor.vue'\nimport { useStore } from 'vuex'\nimport { computed } from 'vue'\n\nexport default {\n  name: 'App',\n  components: {\n    LoginForm,\n    ChatContainer,\n    ServerList,\n    OnlineUsersSidebar,\n    UserProfileEditor\n  },\n  setup() {\n    const store = useStore()\n    \n    // 从store获取用户状态\n    const userStatus = computed(() => store.getters['userProfile/status'])\n    const userTag = computed(() => Math.floor(Math.random() * 9000 + 1000)) // 模拟用户标签\n    \n    return {\n      userStatus,\n      userTag\n    }\n  },\n  data() {\n    return {\n      username: localStorage.getItem('chat-username') || '',  // 用户名\n      avatar: localStorage.getItem('chat-avatar') || '',      // 头像\n      currentServerId: localStorage.getItem('current-server-id') || 'home',  // 当前服务器ID\n      currentServer: {  // 当前服务器信息\n        id: 'home',\n        name: 'general',\n        description: 'Welcome to the chat channel!'\n      },\n      onlineUsers: [],  // 在线用户列表\n      showProfileEditor: false,  // 是否显示个人资料编辑器\n      // 服务器模板\n      serverTemplate: {\n        name: 'general',\n        description: 'Welcome to the chat channel!',\n        channels: [\n          {\n            id: 'general',\n            name: 'general',\n            type: 'text',\n            description: 'General chat channel for everyone'\n          }\n        ],\n        roles: [\n          {\n            id: 'admin',\n            name: '管理员',\n            permissions: ['manage_server', 'manage_channels', 'manage_roles']\n          },\n          {\n            id: 'member',\n            name: '成员',\n            permissions: ['send_messages', 'read_messages']\n          }\n        ],\n        categories: [\n          {\n            id: 'text-channels',\n            name: '文字频道',\n            type: 'category',\n            channels: ['general']\n          }\n        ]\n      }\n    }\n  },\n  created() {\n    // 从localStorage获取用户信息\n    const savedUsername = localStorage.getItem('chat-username')\n    const savedAvatar = localStorage.getItem('chat-avatar')\n    \n    if (savedUsername) {\n      this.username = savedUsername\n      this.avatar = savedAvatar || ''\n    }\n    \n    // 应用保存的主题\n    const savedTheme = localStorage.getItem('chat-theme') || 'discord'\n    document.body.classList.add(`theme-${savedTheme}`)\n\n    // 恢复上次选择的服务器\n    const savedServerId = localStorage.getItem('current-server-id')\n    if (savedServerId) {\n      this.currentServerId = savedServerId\n    }\n\n    // 初始化默认服务器\n    const servers = this.getServers()\n    if (servers.length === 0) {\n      const defaultServer = this.createNewServer('测试服务器')\n      this.currentServerId = defaultServer.id\n      this.currentServer = defaultServer\n    } else if (this.currentServerId === 'home') {\n      // 如果当前是主页，切换到第一个服务器\n      this.currentServerId = servers[0].id\n      this.currentServer = servers[0]\n    }\n  },\n  methods: {\n    setUsername(userData) {\n      this.username = userData.username\n      this.avatar = userData.avatar || ''\n      \n      // 保存用户信息到localStorage\n      localStorage.setItem('chat-username', this.username)\n      if (this.avatar) {\n        localStorage.setItem('chat-avatar', this.avatar)\n      }\n    },\n    \n    // 更新在线用户列表\n    updateOnlineUsers(users) {\n      this.onlineUsers = users;\n    },\n    \n    // 打开个人资料编辑器\n    openProfileEditor() {\n      this.showProfileEditor = true\n    },\n    \n    // 关闭个人资料编辑器\n    closeProfileEditor() {\n      this.showProfileEditor = false\n    },\n    \n    // 更新个人资料\n    updateProfile(updatedProfile) {\n      this.username = updatedProfile.username\n      this.avatar = updatedProfile.avatar\n      this.showProfileEditor = false\n      \n      // 保存到localStorage\n      localStorage.setItem('chat-username', this.username)\n      localStorage.setItem('chat-avatar', this.avatar)\n    },\n\n    // 切换服务器\n    changeServer(server) {\n      this.currentServerId = server.id\n      this.currentServer = server\n      \n      // 保存当前服务器ID到localStorage\n      localStorage.setItem('current-server-id', server.id)\n    },\n\n    // 显示添加服务器对话框\n    showAddServerDialog() {\n      // 创建一个新的服务器\n      const newServer = this.createNewServer('新服务器')\n      this.changeServer(newServer)\n    },\n\n    // 创建新服务器\n    createNewServer(serverName) {\n      const serverId = 'server-' + Date.now()\n      const newServer = {\n        id: serverId,\n        name: serverName,\n        icon: null,\n        description: this.serverTemplate.description,\n        channels: [...this.serverTemplate.channels],\n        roles: [...this.serverTemplate.roles],\n        categories: [...this.serverTemplate.categories],\n        members: [],\n        createdAt: new Date().toISOString(),\n        ownerId: this.username\n      }\n\n      // 保存服务器信息到 localStorage\n      const servers = JSON.parse(localStorage.getItem('chat-servers') || '[]')\n      servers.push(newServer)\n      localStorage.setItem('chat-servers', JSON.stringify(servers))\n\n      return newServer\n    },\n\n    // 获取所有服务器\n    getServers() {\n      return JSON.parse(localStorage.getItem('chat-servers') || '[]')\n    },\n\n    // 更新服务器信息\n    updateServer(server) {\n      const servers = this.getServers()\n      const index = servers.findIndex(s => s.id === server.id)\n      if (index !== -1) {\n        servers[index] = server\n        localStorage.setItem('chat-servers', JSON.stringify(servers))\n      }\n    },\n\n    // 显示服务器浏览器\n    showExploreServers() {\n      // TODO: 实现服务器浏览功能\n      console.log('显示服务器浏览器')\n    }\n  }\n}\n</script>\n\n<style>\n/* 全局样式重置 */\n:root {\n  /* Discord's color palette */\n  --background-primary: #36393f;         /* Main chat background */\n  --background-secondary: #2f3136;       /* Sidebar background */\n  --background-tertiary: #202225;        /* Server list background */\n  --background-accent: #4f545c;          /* Hover states */\n  --text-normal: #dcddde;               /* Normal text color */\n  --text-muted: #72767d;                /* Muted text color */\n  --text-link: #00b0f4;                 /* Link color */\n  --header-primary: #fff;               /* Header text color */\n  --interactive-normal: #b9bbbe;        /* Interactive elements */\n  --interactive-hover: #dcddde;         /* Interactive elements on hover */\n  --interactive-active: #fff;           /* Interactive elements when active */\n  --primary-color: #5865f2;             /* Brand color */\n  --online-color: #3ba55d;              /* Online status */\n  --idle-color: #faa81a;                /* Idle status */\n  --dnd-color: #ed4245;                 /* Do not disturb status */\n  --offline-color: #747f8d;             /* Offline status */\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody, html {\n  height: 100%;\n  width: 100%;\n  font-family: 'gg sans', 'Noto Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;  /* Discord's font stack */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: var(--text-normal);\n  background-color: var(--background-tertiary);\n}\n\n#app {\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.app-container {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.login-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  padding: 1rem;\n  background-color: var(--background-tertiary);\n}\n\n/* Discord布局 */\n.discord-layout {\n  display: flex;\n  width: 100%;\n  height: 100vh;\n  overflow: hidden;\n  background-color: var(--background-primary);\n}\n\n/* 滚动条样式 */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background-color: transparent;\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: var(--background-accent);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background-color: var(--interactive-normal);\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .chat-main {\n    flex-direction: column;\n  }\n  \n  .discord-layout {\n    flex-direction: column;\n  }\n  \n  .server-list {\n    width: 100% !important;\n    height: auto !important;\n    flex-direction: row !important;\n    padding: 8px !important;\n  }\n  \n  .server-items {\n    flex-direction: row !important;\n    padding: 0 8px !important;\n  }\n  \n  .server-item {\n    margin-right: 8px !important;\n    margin-bottom: 0 !important;\n  }\n}\n\n/* 动画过渡 */\n.fade-enter-active, .fade-leave-active {\n  transition: opacity 0.2s ease;\n}\n\n.fade-enter-from, .fade-leave-to {\n  opacity: 0;\n}\n\n/* 按钮基础样式 */\nbutton {\n  border: none;\n  background: none;\n  cursor: pointer;\n  font-family: inherit;\n  padding: 8px 16px;\n  border-radius: 4px;\n  font-size: 14px;\n  font-weight: 500;\n  transition: background-color 0.2s ease;\n}\n\nbutton:hover {\n  background-color: var(--background-accent);\n}\n\n/* 输入框基础样式 */\ninput, textarea {\n  background-color: var(--background-tertiary);\n  border: none;\n  border-radius: 4px;\n  padding: 10px;\n  color: var(--text-normal);\n  font-size: 14px;\n  outline: none;\n  transition: border-color 0.2s ease;\n}\n\ninput:focus, textarea:focus {\n  box-shadow: 0 0 0 2px var(--primary-color);\n}\n\n.server-content {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  background-color: var(--background-primary);\n}\n\n.user-panel {\n  height: 52px;\n  padding: 0 8px;\n  background-color: var(--background-secondary-alt);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  cursor: pointer;\n  border-top: 1px solid var(--background-tertiary);\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 4px 8px;\n  border-radius: 4px;\n  flex: 1;\n}\n\n.user-info:hover {\n  background-color: var(--background-modifier-hover);\n}\n\n.avatar-container {\n  position: relative;\n  width: 32px;\n  height: 32px;\n}\n\n.user-avatar {\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.status-indicator {\n  position: absolute;\n  bottom: -2px;\n  right: -2px;\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  border: 2px solid var(--background-secondary-alt);\n  background-color: var(--offline-color);\n}\n\n.status-indicator.online { background-color: #43b581; }\n.status-indicator.away { background-color: #faa61a; }\n.status-indicator.busy { background-color: #f04747; }\n.status-indicator.invisible { background-color: #747f8d; }\n\n.user-details {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  min-width: 0;\n}\n\n.username {\n  color: var(--header-primary);\n  font-size: 14px;\n  font-weight: 500;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.user-tag {\n  color: var(--text-muted);\n  font-size: 12px;\n}\n\n.user-controls {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.control-button {\n  width: 32px;\n  height: 32px;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: transparent;\n  border: none;\n  color: var(--interactive-normal);\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.control-button:hover {\n  color: var(--interactive-hover);\n  background-color: var(--background-modifier-hover);\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}