{"ast":null,"code":"import AvatarSelector from './AvatarSelector.vue';\nimport ThemeSelector from './ThemeSelector.vue';\nexport default {\n  name: 'UserNameInput',\n  components: {\n    AvatarSelector,\n    ThemeSelector\n  },\n  data() {\n    return {\n      username: '',\n      // 用户昵称\n      selectedAvatar: '',\n      // 选中的头像\n      selectedTheme: 'natural' // 默认使用自然韵律主题\n    };\n  },\n  created() {\n    // 从 localStorage 获取保存的主题\n    const savedTheme = localStorage.getItem('chat-theme');\n    if (savedTheme) {\n      this.selectedTheme = savedTheme;\n      document.body.classList.add(`theme-${savedTheme}`);\n    }\n\n    // 尝试从localStorage恢复用户名和头像\n    const savedUsername = localStorage.getItem('chat-username');\n    const savedAvatar = localStorage.getItem('chat-avatar');\n    if (savedUsername) {\n      this.username = savedUsername;\n    }\n    if (savedAvatar) {\n      this.selectedAvatar = savedAvatar;\n    }\n  },\n  methods: {\n    // 处理头像选择\n    handleAvatarSelected(avatarUrl) {\n      this.selectedAvatar = avatarUrl;\n    },\n    // 处理主题变更\n    handleThemeChanged(theme) {\n      this.selectedTheme = theme;\n    },\n    // 设置用户名和头像\n    setUsername() {\n      if (this.username.trim()) {\n        // 将用户名和头像传递给父组件\n        this.$emit('set-username', {\n          username: this.username,\n          avatar: this.selectedAvatar\n        });\n\n        // 保存到localStorage\n        localStorage.setItem('chat-username', this.username);\n        localStorage.setItem('chat-avatar', this.selectedAvatar);\n        localStorage.setItem('chat-theme', this.selectedTheme);\n      }\n    }\n  }\n};","map":{"version":3,"names":["AvatarSelector","ThemeSelector","name","components","data","username","selectedAvatar","selectedTheme","created","savedTheme","localStorage","getItem","document","body","classList","add","savedUsername","savedAvatar","methods","handleAvatarSelected","avatarUrl","handleThemeChanged","theme","setUsername","trim","$emit","avatar","setItem"],"sources":["C:\\Users\\Administrator\\Desktop\\discord-chat-app\\fack\\just-do-it\\src\\components\\chat\\UserNameInput.vue"],"sourcesContent":["<template>\r\n  <div class=\"username-input-container\">\r\n    <h2 class=\"title\">欢迎来到聊天室</h2>\r\n    \r\n    <div class=\"input-group\">\r\n      <label for=\"username\">请输入您的昵称</label>\r\n      <input \r\n        type=\"text\" \r\n        id=\"username\"\r\n        v-model=\"username\" \r\n        placeholder=\"输入昵称...\" \r\n        @keyup.enter=\"setUsername\"\r\n        class=\"username-input\"\r\n      />\r\n    </div>\r\n    \r\n    <AvatarSelector \r\n      :username=\"username\"\r\n      @update:avatar=\"handleAvatarSelected\"\r\n    />\r\n    \r\n    <ThemeSelector @theme-changed=\"handleThemeChanged\" />\r\n    \r\n    <button \r\n      @click=\"setUsername\" \r\n      class=\"enter-button\"\r\n      :disabled=\"!username.trim()\"\r\n    >\r\n      进入聊天室\r\n    </button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport AvatarSelector from './AvatarSelector.vue'\r\nimport ThemeSelector from './ThemeSelector.vue'\r\n\r\nexport default {\r\n  name: 'UserNameInput',\r\n  components: {\r\n    AvatarSelector,\r\n    ThemeSelector\r\n  },\r\n  data() {\r\n    return {\r\n      username: '', // 用户昵称\r\n      selectedAvatar: '', // 选中的头像\r\n      selectedTheme: 'natural' // 默认使用自然韵律主题\r\n    }\r\n  },\r\n  created() {\r\n    // 从 localStorage 获取保存的主题\r\n    const savedTheme = localStorage.getItem('chat-theme');\r\n    if (savedTheme) {\r\n      this.selectedTheme = savedTheme;\r\n      document.body.classList.add(`theme-${savedTheme}`);\r\n    }\r\n    \r\n    // 尝试从localStorage恢复用户名和头像\r\n    const savedUsername = localStorage.getItem('chat-username');\r\n    const savedAvatar = localStorage.getItem('chat-avatar');\r\n    \r\n    if (savedUsername) {\r\n      this.username = savedUsername;\r\n    }\r\n    \r\n    if (savedAvatar) {\r\n      this.selectedAvatar = savedAvatar;\r\n    }\r\n  },\r\n  methods: {\r\n    // 处理头像选择\r\n    handleAvatarSelected(avatarUrl) {\r\n      this.selectedAvatar = avatarUrl;\r\n    },\r\n    \r\n    // 处理主题变更\r\n    handleThemeChanged(theme) {\r\n      this.selectedTheme = theme;\r\n    },\r\n    \r\n    // 设置用户名和头像\r\n    setUsername() {\r\n      if (this.username.trim()) {\r\n        // 将用户名和头像传递给父组件\r\n        this.$emit('set-username', {\r\n          username: this.username,\r\n          avatar: this.selectedAvatar\r\n        });\r\n        \r\n        // 保存到localStorage\r\n        localStorage.setItem('chat-username', this.username);\r\n        localStorage.setItem('chat-avatar', this.selectedAvatar);\r\n        localStorage.setItem('chat-theme', this.selectedTheme);\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.username-input-container {\r\n  max-width: 500px;\r\n  margin: 2rem auto;\r\n  padding: 2rem;\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n  border-radius: 0.5rem;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\r\n  backdrop-filter: blur(10px);\r\n  color: var(--text-color);\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n}\r\n\r\n.title {\r\n  text-align: center;\r\n  margin-bottom: 2rem;\r\n  font-size: 1.75rem;\r\n  color: var(--header-color);\r\n}\r\n\r\n.input-group {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.input-group label {\r\n  display: block;\r\n  margin-bottom: 0.5rem;\r\n  font-weight: 500;\r\n}\r\n\r\n.username-input {\r\n  width: 100%;\r\n  padding: 0.75rem 1rem;\r\n  border-radius: 0.5rem;\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n  color: var(--text-color);\r\n  font-size: 1rem;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.username-input:focus {\r\n  outline: none;\r\n  border-color: var(--primary-color);\r\n  box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 138, 113, 88), 0.2);\r\n}\r\n\r\n.enter-button {\r\n  width: 100%;\r\n  padding: 0.75rem 1rem;\r\n  background-color: var(--primary-color);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 0.5rem;\r\n  font-size: 1rem;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  margin-top: 1rem;\r\n}\r\n\r\n.enter-button:hover:not(:disabled) {\r\n  background-color: var(--secondary-color);\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.enter-button:active:not(:disabled) {\r\n  transform: translateY(0);\r\n}\r\n\r\n.enter-button:disabled {\r\n  background-color: rgba(128, 128, 128, 0.3);\r\n  cursor: not-allowed;\r\n}\r\n\r\n/* 响应式样式 */\r\n@media (max-width: 480px) {\r\n  .username-input-container {\r\n    margin: 1rem;\r\n    padding: 1rem;\r\n  }\r\n  \r\n  .title {\r\n    font-size: 1.5rem;\r\n  }\r\n}\r\n</style> "],"mappings":"AAkCA,OAAOA,cAAa,MAAO,sBAAqB;AAChD,OAAOC,aAAY,MAAO,qBAAoB;AAE9C,eAAe;EACbC,IAAI,EAAE,eAAe;EACrBC,UAAU,EAAE;IACVH,cAAc;IACdC;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MAAE;MACdC,cAAc,EAAE,EAAE;MAAE;MACpBC,aAAa,EAAE,SAAQ,CAAE;IAC3B;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,MAAMC,UAAS,GAAIC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACrD,IAAIF,UAAU,EAAE;MACd,IAAI,CAACF,aAAY,GAAIE,UAAU;MAC/BG,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,SAASN,UAAU,EAAE,CAAC;IACpD;;IAEA;IACA,MAAMO,aAAY,GAAIN,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IAC3D,MAAMM,WAAU,GAAIP,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAEvD,IAAIK,aAAa,EAAE;MACjB,IAAI,CAACX,QAAO,GAAIW,aAAa;IAC/B;IAEA,IAAIC,WAAW,EAAE;MACf,IAAI,CAACX,cAAa,GAAIW,WAAW;IACnC;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,oBAAoBA,CAACC,SAAS,EAAE;MAC9B,IAAI,CAACd,cAAa,GAAIc,SAAS;IACjC,CAAC;IAED;IACAC,kBAAkBA,CAACC,KAAK,EAAE;MACxB,IAAI,CAACf,aAAY,GAAIe,KAAK;IAC5B,CAAC;IAED;IACAC,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAAClB,QAAQ,CAACmB,IAAI,CAAC,CAAC,EAAE;QACxB;QACA,IAAI,CAACC,KAAK,CAAC,cAAc,EAAE;UACzBpB,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBqB,MAAM,EAAE,IAAI,CAACpB;QACf,CAAC,CAAC;;QAEF;QACAI,YAAY,CAACiB,OAAO,CAAC,eAAe,EAAE,IAAI,CAACtB,QAAQ,CAAC;QACpDK,YAAY,CAACiB,OAAO,CAAC,aAAa,EAAE,IAAI,CAACrB,cAAc,CAAC;QACxDI,YAAY,CAACiB,OAAO,CAAC,YAAY,EAAE,IAAI,CAACpB,aAAa,CAAC;MACxD;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}