{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getRandomDefaultAvatarUrl, getFallbackAvatarUrl, handleAvatarError } from '../../utils/avatarUtils';\nexport default {\n  name: 'UserProfileEditor',\n  props: {\n    // 是否显示编辑器\n    isOpen: {\n      type: Boolean,\n      default: false\n    },\n    // 当前用户信息\n    currentUserInfo: {\n      type: Object,\n      default: () => ({\n        username: '',\n        avatar: '',\n        status: 'online',\n        bio: ''\n      })\n    }\n  },\n  data() {\n    return {\n      username: '',\n      // 用户名\n      currentAvatar: '',\n      // 当前头像\n      selectedAvatar: '',\n      // 选中的新头像\n      status: 'online',\n      // 用户状态\n      bio: '',\n      // 个人简介\n      showAvatarSelector: false,\n      // 是否显示头像选择器\n      defaultAvatars: [],\n      // 默认头像列表\n      customAvatarPreview: null,\n      // 自定义头像预览\n      isCustomAvatarSelected: false // 是否选择了自定义头像\n    };\n  },\n  watch: {\n    // 监听props变化，更新本地数据\n    currentUserInfo: {\n      handler(newValue) {\n        this.username = newValue.username || '';\n        this.currentAvatar = newValue.avatar || '';\n        this.selectedAvatar = newValue.avatar || '';\n        this.status = newValue.status || 'online';\n        this.bio = newValue.bio || '';\n      },\n      immediate: true,\n      // 组件创建时立即执行\n      deep: true\n    },\n    // 监听isOpen变化，当打开编辑器时生成默认头像\n    isOpen(newValue) {\n      if (newValue) {\n        this.generateDefaultAvatars();\n      }\n    }\n  },\n  methods: {\n    // 关闭编辑器\n    closeEditor() {\n      this.$emit('close');\n      this.showAvatarSelector = false;\n    },\n    // 打开头像选择器\n    openAvatarSelector() {\n      this.showAvatarSelector = !this.showAvatarSelector;\n      if (this.showAvatarSelector && this.defaultAvatars.length === 0) {\n        this.generateDefaultAvatars();\n      }\n    },\n    // 生成默认头像\n    generateDefaultAvatars() {\n      // 清空数组\n      this.defaultAvatars = [];\n\n      // 生成6个随机头像\n      for (let i = 0; i < 6; i++) {\n        this.defaultAvatars.push(getRandomDefaultAvatarUrl());\n      }\n\n      // 如果没有选择头像，默认选择第一个\n      if (!this.selectedAvatar) {\n        this.selectedAvatar = this.defaultAvatars[0];\n      }\n    },\n    // 重新生成头像\n    regenerateAvatars() {\n      this.generateDefaultAvatars();\n    },\n    // 选择头像\n    selectAvatar(avatar) {\n      this.selectedAvatar = avatar;\n      this.isCustomAvatarSelected = false;\n    },\n    // 处理头像上传\n    handleAvatarUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n\n      // 检查文件类型\n      if (!file.type.match('image.*')) {\n        alert('请上传图片文件');\n        return;\n      }\n\n      // 检查文件大小 (限制为 2MB)\n      if (file.size > 2 * 1024 * 1024) {\n        alert('图片大小不能超过 2MB');\n        return;\n      }\n\n      // 创建文件读取器\n      const reader = new FileReader();\n\n      // 读取完成后的回调\n      reader.onload = e => {\n        this.customAvatarPreview = e.target.result;\n        this.selectedAvatar = e.target.result;\n        this.isCustomAvatarSelected = true;\n      };\n\n      // 读取文件\n      reader.readAsDataURL(file);\n    },\n    // 保存个人资料\n    saveProfile() {\n      // 创建更新后的用户信息对象\n      const updatedUserInfo = {\n        username: this.username,\n        avatar: this.selectedAvatar,\n        status: this.status,\n        bio: this.bio\n      };\n\n      // 发送更新事件到父组件\n      this.$emit('update-profile', updatedUserInfo);\n\n      // 关闭编辑器\n      this.closeEditor();\n    },\n    // 获取备用头像URL\n    getFallbackAvatarUrl() {\n      return getFallbackAvatarUrl();\n    },\n    // 处理头像加载错误\n    handleAvatarError(event) {\n      handleAvatarError(event);\n    }\n  }\n};","map":{"version":3,"names":["getRandomDefaultAvatarUrl","getFallbackAvatarUrl","handleAvatarError","name","props","isOpen","type","Boolean","default","currentUserInfo","Object","username","avatar","status","bio","data","currentAvatar","selectedAvatar","showAvatarSelector","defaultAvatars","customAvatarPreview","isCustomAvatarSelected","watch","handler","newValue","immediate","deep","generateDefaultAvatars","methods","closeEditor","$emit","openAvatarSelector","length","i","push","regenerateAvatars","selectAvatar","handleAvatarUpload","event","file","target","files","match","alert","size","reader","FileReader","onload","e","result","readAsDataURL","saveProfile","updatedUserInfo"],"sources":["C:\\Users\\Administrator\\Desktop\\discord-chat-app\\fack\\just-do-it\\src\\components\\chat\\UserProfileEditor.vue"],"sourcesContent":["<template>\r\n  <div class=\"profile-editor-overlay\" v-if=\"isOpen\" @click.self=\"closeEditor\">\r\n    <div class=\"profile-editor-container\">\r\n      <!-- 头部 -->\r\n      <div class=\"profile-editor-header\">\r\n        <h2>编辑个人资料</h2>\r\n        <button class=\"close-button\" @click=\"closeEditor\">×</button>\r\n      </div>\r\n      \r\n      <!-- 头像编辑区域 -->\r\n      <div class=\"avatar-editor\">\r\n        <div class=\"current-avatar-container\">\r\n          <img \r\n            :src=\"currentAvatar || getFallbackAvatarUrl()\" \r\n            alt=\"当前头像\" \r\n            class=\"current-avatar\"\r\n            @error=\"handleAvatarError\"\r\n          />\r\n          <div class=\"avatar-overlay\" @click=\"openAvatarSelector\">\r\n            <span class=\"change-avatar-text\">更换头像</span>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- 头像选择器 -->\r\n        <div class=\"avatar-selector\" v-if=\"showAvatarSelector\">\r\n          <h3>选择新头像</h3>\r\n          <div class=\"avatar-options\">\r\n            <!-- 默认头像选项 -->\r\n            <div \r\n              v-for=\"(avatar, index) in defaultAvatars\" \r\n              :key=\"index\"\r\n              class=\"avatar-option\"\r\n              :class=\"{ selected: selectedAvatar === avatar }\"\r\n              @click=\"selectAvatar(avatar)\"\r\n            >\r\n              <img \r\n                :src=\"avatar\" \r\n                alt=\"头像选项\" \r\n                class=\"avatar-img\" \r\n                @error=\"handleAvatarError\"\r\n              />\r\n            </div>\r\n            \r\n            <!-- 刷新头像按钮 -->\r\n            <div \r\n              class=\"avatar-option refresh-avatar\"\r\n              @click=\"regenerateAvatars\"\r\n              title=\"刷新头像选项\"\r\n            >\r\n              <div class=\"refresh-icon\">↻</div>\r\n            </div>\r\n            \r\n            <!-- 自定义头像上传 -->\r\n            <div \r\n              class=\"avatar-option custom-avatar\"\r\n              :class=\"{ selected: isCustomAvatarSelected }\"\r\n            >\r\n              <label for=\"avatar-upload\" class=\"custom-avatar-label\">\r\n                <img \r\n                  :src=\"customAvatarPreview || getFallbackAvatarUrl()\" \r\n                  alt=\"自定义头像\" \r\n                  class=\"avatar-img\"\r\n                  @error=\"handleAvatarError\"\r\n                />\r\n                <div class=\"upload-icon\" v-if=\"!customAvatarPreview\">+</div>\r\n              </label>\r\n              <input \r\n                type=\"file\" \r\n                id=\"avatar-upload\" \r\n                class=\"avatar-upload\" \r\n                accept=\"image/*\"\r\n                @change=\"handleAvatarUpload\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- 用户信息编辑区域 -->\r\n      <div class=\"user-info-editor\">\r\n        <div class=\"form-group\">\r\n          <label for=\"username\">用户名</label>\r\n          <input \r\n            type=\"text\" \r\n            id=\"username\" \r\n            v-model=\"username\" \r\n            placeholder=\"输入新的用户名\"\r\n            class=\"form-input\"\r\n          />\r\n        </div>\r\n        \r\n        <div class=\"form-group\">\r\n          <label for=\"status\">状态</label>\r\n          <select id=\"status\" v-model=\"status\" class=\"form-input\">\r\n            <option value=\"online\">在线</option>\r\n            <option value=\"idle\">离开</option>\r\n            <option value=\"dnd\">请勿打扰</option>\r\n            <option value=\"invisible\">隐身</option>\r\n          </select>\r\n        </div>\r\n        \r\n        <div class=\"form-group\">\r\n          <label for=\"bio\">个人简介</label>\r\n          <textarea \r\n            id=\"bio\" \r\n            v-model=\"bio\" \r\n            placeholder=\"介绍一下自己吧...\"\r\n            class=\"form-input bio-input\"\r\n            rows=\"3\"\r\n          ></textarea>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- 底部按钮 -->\r\n      <div class=\"profile-editor-footer\">\r\n        <button class=\"cancel-button\" @click=\"closeEditor\">取消</button>\r\n        <button class=\"save-button\" @click=\"saveProfile\">保存更改</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getRandomDefaultAvatarUrl, getFallbackAvatarUrl, handleAvatarError } from '../../utils/avatarUtils';\r\n\r\nexport default {\r\n  name: 'UserProfileEditor',\r\n  props: {\r\n    // 是否显示编辑器\r\n    isOpen: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // 当前用户信息\r\n    currentUserInfo: {\r\n      type: Object,\r\n      default: () => ({\r\n        username: '',\r\n        avatar: '',\r\n        status: 'online',\r\n        bio: ''\r\n      })\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      username: '', // 用户名\r\n      currentAvatar: '', // 当前头像\r\n      selectedAvatar: '', // 选中的新头像\r\n      status: 'online', // 用户状态\r\n      bio: '', // 个人简介\r\n      showAvatarSelector: false, // 是否显示头像选择器\r\n      defaultAvatars: [], // 默认头像列表\r\n      customAvatarPreview: null, // 自定义头像预览\r\n      isCustomAvatarSelected: false // 是否选择了自定义头像\r\n    }\r\n  },\r\n  watch: {\r\n    // 监听props变化，更新本地数据\r\n    currentUserInfo: {\r\n      handler(newValue) {\r\n        this.username = newValue.username || '';\r\n        this.currentAvatar = newValue.avatar || '';\r\n        this.selectedAvatar = newValue.avatar || '';\r\n        this.status = newValue.status || 'online';\r\n        this.bio = newValue.bio || '';\r\n      },\r\n      immediate: true, // 组件创建时立即执行\r\n      deep: true\r\n    },\r\n    // 监听isOpen变化，当打开编辑器时生成默认头像\r\n    isOpen(newValue) {\r\n      if (newValue) {\r\n        this.generateDefaultAvatars();\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    // 关闭编辑器\r\n    closeEditor() {\r\n      this.$emit('close');\r\n      this.showAvatarSelector = false;\r\n    },\r\n    \r\n    // 打开头像选择器\r\n    openAvatarSelector() {\r\n      this.showAvatarSelector = !this.showAvatarSelector;\r\n      if (this.showAvatarSelector && this.defaultAvatars.length === 0) {\r\n        this.generateDefaultAvatars();\r\n      }\r\n    },\r\n    \r\n    // 生成默认头像\r\n    generateDefaultAvatars() {\r\n      // 清空数组\r\n      this.defaultAvatars = [];\r\n      \r\n      // 生成6个随机头像\r\n      for (let i = 0; i < 6; i++) {\r\n        this.defaultAvatars.push(getRandomDefaultAvatarUrl());\r\n      }\r\n      \r\n      // 如果没有选择头像，默认选择第一个\r\n      if (!this.selectedAvatar) {\r\n        this.selectedAvatar = this.defaultAvatars[0];\r\n      }\r\n    },\r\n    \r\n    // 重新生成头像\r\n    regenerateAvatars() {\r\n      this.generateDefaultAvatars();\r\n    },\r\n    \r\n    // 选择头像\r\n    selectAvatar(avatar) {\r\n      this.selectedAvatar = avatar;\r\n      this.isCustomAvatarSelected = false;\r\n    },\r\n    \r\n    // 处理头像上传\r\n    handleAvatarUpload(event) {\r\n      const file = event.target.files[0];\r\n      if (!file) return;\r\n      \r\n      // 检查文件类型\r\n      if (!file.type.match('image.*')) {\r\n        alert('请上传图片文件');\r\n        return;\r\n      }\r\n      \r\n      // 检查文件大小 (限制为 2MB)\r\n      if (file.size > 2 * 1024 * 1024) {\r\n        alert('图片大小不能超过 2MB');\r\n        return;\r\n      }\r\n      \r\n      // 创建文件读取器\r\n      const reader = new FileReader();\r\n      \r\n      // 读取完成后的回调\r\n      reader.onload = (e) => {\r\n        this.customAvatarPreview = e.target.result;\r\n        this.selectedAvatar = e.target.result;\r\n        this.isCustomAvatarSelected = true;\r\n      };\r\n      \r\n      // 读取文件\r\n      reader.readAsDataURL(file);\r\n    },\r\n    \r\n    // 保存个人资料\r\n    saveProfile() {\r\n      // 创建更新后的用户信息对象\r\n      const updatedUserInfo = {\r\n        username: this.username,\r\n        avatar: this.selectedAvatar,\r\n        status: this.status,\r\n        bio: this.bio\r\n      };\r\n      \r\n      // 发送更新事件到父组件\r\n      this.$emit('update-profile', updatedUserInfo);\r\n      \r\n      // 关闭编辑器\r\n      this.closeEditor();\r\n    },\r\n    \r\n    // 获取备用头像URL\r\n    getFallbackAvatarUrl() {\r\n      return getFallbackAvatarUrl();\r\n    },\r\n    \r\n    // 处理头像加载错误\r\n    handleAvatarError(event) {\r\n      handleAvatarError(event);\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.profile-editor-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1000;\r\n  backdrop-filter: blur(5px);\r\n}\r\n\r\n.profile-editor-container {\r\n  width: 90%;\r\n  max-width: 500px;\r\n  background-color: var(--chat-background, #36393f);\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\r\n  overflow: hidden;\r\n  animation: slideIn 0.3s ease;\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n}\r\n\r\n@keyframes slideIn {\r\n  from { transform: translateY(20px); opacity: 0; }\r\n  to { transform: translateY(0); opacity: 1; }\r\n}\r\n\r\n.profile-editor-header {\r\n  padding: 16px;\r\n  background-color: var(--primary-color, #7289da);\r\n  color: white;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.profile-editor-header h2 {\r\n  margin: 0;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n}\r\n\r\n.close-button {\r\n  background: none;\r\n  border: none;\r\n  color: white;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n  padding: 0;\r\n  line-height: 1;\r\n}\r\n\r\n.avatar-editor {\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\r\n}\r\n\r\n.current-avatar-container {\r\n  position: relative;\r\n  width: 100px;\r\n  height: 100px;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  margin-bottom: 16px;\r\n  border: 3px solid var(--primary-color, #7289da);\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.current-avatar {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.avatar-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  opacity: 0;\r\n  transition: opacity 0.2s ease;\r\n  cursor: pointer;\r\n}\r\n\r\n.current-avatar-container:hover .avatar-overlay {\r\n  opacity: 1;\r\n}\r\n\r\n.change-avatar-text {\r\n  color: white;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.avatar-selector {\r\n  width: 100%;\r\n  margin-top: 16px;\r\n}\r\n\r\n.avatar-selector h3 {\r\n  margin: 0 0 12px 0;\r\n  font-size: 16px;\r\n  color: var(--text-color, #dcddde);\r\n}\r\n\r\n.avatar-options {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 12px;\r\n  justify-content: center;\r\n}\r\n\r\n.avatar-option {\r\n  width: 60px;\r\n  height: 60px;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n  border: 2px solid transparent;\r\n  transition: all 0.2s ease;\r\n  position: relative;\r\n}\r\n\r\n.avatar-option:hover {\r\n  transform: scale(1.05);\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.avatar-option.selected {\r\n  border-color: var(--primary-color, #7289da);\r\n  box-shadow: 0 0 0 2px rgba(114, 137, 218, 0.3);\r\n}\r\n\r\n.avatar-img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.refresh-avatar {\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.refresh-icon {\r\n  font-size: 24px;\r\n  color: var(--text-color, #dcddde);\r\n  opacity: 0.7;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.refresh-avatar:hover .refresh-icon {\r\n  transform: rotate(180deg);\r\n  opacity: 1;\r\n}\r\n\r\n.custom-avatar {\r\n  position: relative;\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.custom-avatar-label {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n}\r\n\r\n.upload-icon {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  font-size: 24px;\r\n  color: var(--text-color, #dcddde);\r\n  opacity: 0.7;\r\n}\r\n\r\n.avatar-upload {\r\n  position: absolute;\r\n  width: 0.1px;\r\n  height: 0.1px;\r\n  opacity: 0;\r\n  overflow: hidden;\r\n  z-index: -1;\r\n}\r\n\r\n.user-info-editor {\r\n  padding: 20px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.form-group label {\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: var(--text-color, #dcddde);\r\n}\r\n\r\n.form-input {\r\n  width: 100%;\r\n  padding: 10px 12px;\r\n  background-color: rgba(0, 0, 0, 0.1);\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  border-radius: 4px;\r\n  color: var(--text-color, #dcddde);\r\n  font-size: 14px;\r\n  transition: border-color 0.2s ease;\r\n}\r\n\r\n.form-input:focus {\r\n  outline: none;\r\n  border-color: var(--primary-color, #7289da);\r\n}\r\n\r\n.bio-input {\r\n  resize: vertical;\r\n  min-height: 80px;\r\n}\r\n\r\n.profile-editor-footer {\r\n  padding: 16px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 12px;\r\n  background-color: rgba(0, 0, 0, 0.1);\r\n  border-top: 1px solid rgba(255, 255, 255, 0.05);\r\n}\r\n\r\n.cancel-button, .save-button {\r\n  padding: 8px 16px;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.cancel-button {\r\n  background-color: transparent;\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  color: var(--text-color, #dcddde);\r\n}\r\n\r\n.cancel-button:hover {\r\n  background-color: rgba(255, 255, 255, 0.05);\r\n}\r\n\r\n.save-button {\r\n  background-color: var(--primary-color, #7289da);\r\n  border: none;\r\n  color: white;\r\n}\r\n\r\n.save-button:hover {\r\n  background-color: var(--secondary-color, #5c6bc0);\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}