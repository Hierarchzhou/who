{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport UserNameInput from './UserNameInput.vue';\nimport MessageList from './MessageList.vue';\nimport MessageInput from './MessageInput.vue';\nimport ThemeSelector from './ThemeSelector.vue';\nimport axios from 'axios';\nexport default {\n  name: 'ChatContainer',\n  components: {\n    UserNameInput,\n    MessageList,\n    MessageInput,\n    ThemeSelector\n  },\n  data() {\n    return {\n      username: '',\n      // 用户昵称\n      messages: [],\n      // 消息列表\n      apiUrl: 'http://localhost:3000/api/messages',\n      // 修正API地址\n      pollingInterval: null,\n      // 用于轮询的计时器\n      currentTheme: localStorage.getItem('chat-theme') || 'discord' // 当前主题\n    };\n  },\n  created() {\n    // 检查是否有保存的用户名\n    const savedUsername = localStorage.getItem('chat-username');\n    if (savedUsername) {\n      this.username = savedUsername;\n      this.fetchMessages(); // 获取消息\n      this.startPolling(); // 开始轮询获取新消息\n    }\n  },\n  beforeUnmount() {\n    // 组件销毁前清除轮询\n    this.stopPolling();\n  },\n  methods: {\n    // 设置用户名\n    setUsername(name) {\n      this.username = name;\n      localStorage.setItem('chat-username', name); // 保存用户名到本地存储\n\n      this.fetchMessages(); // 获取消息\n      this.startPolling(); // 开始轮询获取新消息\n    },\n    // 获取消息列表\n    async fetchMessages() {\n      try {\n        const response = await axios.get(this.apiUrl);\n        this.messages = response.data;\n      } catch (error) {\n        console.error('获取消息失败:', error);\n        // 开发阶段如果API未就绪，使用模拟数据\n        this.messages = [{\n          id: 1,\n          user: 'System',\n          content: '欢迎来到聊天室!',\n          timestamp: new Date().toISOString()\n        }];\n      }\n    },\n    // 发送消息\n    async sendMessage(content) {\n      try {\n        const newMessage = {\n          user: this.username,\n          content: content\n        };\n\n        // 发送消息到API\n        const response = await axios.post(this.apiUrl, newMessage);\n\n        // 将新消息添加到消息列表\n        this.messages.push(response.data);\n      } catch (error) {\n        console.error('发送消息失败:', error);\n\n        // 开发阶段如果API未就绪，模拟消息发送\n        const mockMessage = {\n          id: this.messages.length + 1,\n          user: this.username,\n          content: content,\n          timestamp: new Date().toISOString()\n        };\n        this.messages.push(mockMessage);\n      }\n    },\n    // 开始轮询获取新消息\n    startPolling() {\n      this.pollingInterval = setInterval(() => {\n        this.fetchMessages();\n      }, 3000); // 每3秒轮询一次\n    },\n    // 停止轮询\n    stopPolling() {\n      if (this.pollingInterval) {\n        clearInterval(this.pollingInterval);\n        this.pollingInterval = null;\n      }\n    },\n    // 主题变更处理函数\n    onThemeChanged(theme) {\n      this.currentTheme = theme; // 更新当前主题\n    }\n  }\n};","map":{"version":3,"names":["UserNameInput","MessageList","MessageInput","ThemeSelector","axios","name","components","data","username","messages","apiUrl","pollingInterval","currentTheme","localStorage","getItem","created","savedUsername","fetchMessages","startPolling","beforeUnmount","stopPolling","methods","setUsername","setItem","response","get","error","console","id","user","content","timestamp","Date","toISOString","sendMessage","newMessage","post","push","mockMessage","length","setInterval","clearInterval","onThemeChanged","theme"],"sources":["C:\\Users\\Administrator\\Desktop\\discord-chat-app\\just-do-it\\src\\components\\chat\\ChatContainer.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <!-- 用户名输入界面，当用户未设置昵称时显示 -->\r\n    <UserNameInput \r\n      v-if=\"!username\" \r\n      @set-username=\"setUsername\" \r\n    />\r\n    \r\n    <!-- 聊天界面，当用户已设置昵称时显示 -->\r\n    <div v-else class=\"chat-interface\">\r\n      <header class=\"chat-header\">\r\n        <h1 class=\"chat-title\">Discord风格聊天室</h1>\r\n        <div class=\"user-info-container\">\r\n          <ThemeSelector @theme-changed=\"onThemeChanged\" />\r\n          <div class=\"user-info\">\r\n            当前用户: <span class=\"current-username\">{{ username }}</span>\r\n          </div>\r\n        </div>\r\n      </header>\r\n      \r\n      <MessageList :messages=\"messages\" />\r\n      \r\n      <MessageInput @send-message=\"sendMessage\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport UserNameInput from './UserNameInput.vue';\r\nimport MessageList from './MessageList.vue';\r\nimport MessageInput from './MessageInput.vue';\r\nimport ThemeSelector from './ThemeSelector.vue';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'ChatContainer',\r\n  components: {\r\n    UserNameInput,\r\n    MessageList,\r\n    MessageInput,\r\n    ThemeSelector\r\n  },\r\n  data() {\r\n    return {\r\n      username: '', // 用户昵称\r\n      messages: [], // 消息列表\r\n      apiUrl: 'http://localhost:3000/api/messages', // 修正API地址\r\n      pollingInterval: null, // 用于轮询的计时器\r\n      currentTheme: localStorage.getItem('chat-theme') || 'discord' // 当前主题\r\n    }\r\n  },\r\n  created() {\r\n    // 检查是否有保存的用户名\r\n    const savedUsername = localStorage.getItem('chat-username');\r\n    if (savedUsername) {\r\n      this.username = savedUsername;\r\n      this.fetchMessages(); // 获取消息\r\n      this.startPolling(); // 开始轮询获取新消息\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    // 组件销毁前清除轮询\r\n    this.stopPolling();\r\n  },\r\n  methods: {\r\n    // 设置用户名\r\n    setUsername(name) {\r\n      this.username = name;\r\n      localStorage.setItem('chat-username', name); // 保存用户名到本地存储\r\n      \r\n      this.fetchMessages(); // 获取消息\r\n      this.startPolling(); // 开始轮询获取新消息\r\n    },\r\n    \r\n    // 获取消息列表\r\n    async fetchMessages() {\r\n      try {\r\n        const response = await axios.get(this.apiUrl);\r\n        this.messages = response.data;\r\n      } catch (error) {\r\n        console.error('获取消息失败:', error);\r\n        // 开发阶段如果API未就绪，使用模拟数据\r\n        this.messages = [\r\n          { id: 1, user: 'System', content: '欢迎来到聊天室!', timestamp: new Date().toISOString() }\r\n        ];\r\n      }\r\n    },\r\n    \r\n    // 发送消息\r\n    async sendMessage(content) {\r\n      try {\r\n        const newMessage = {\r\n          user: this.username,\r\n          content: content\r\n        };\r\n        \r\n        // 发送消息到API\r\n        const response = await axios.post(this.apiUrl, newMessage);\r\n        \r\n        // 将新消息添加到消息列表\r\n        this.messages.push(response.data);\r\n      } catch (error) {\r\n        console.error('发送消息失败:', error);\r\n        \r\n        // 开发阶段如果API未就绪，模拟消息发送\r\n        const mockMessage = {\r\n          id: this.messages.length + 1,\r\n          user: this.username,\r\n          content: content,\r\n          timestamp: new Date().toISOString()\r\n        };\r\n        this.messages.push(mockMessage);\r\n      }\r\n    },\r\n    \r\n    // 开始轮询获取新消息\r\n    startPolling() {\r\n      this.pollingInterval = setInterval(() => {\r\n        this.fetchMessages();\r\n      }, 3000); // 每3秒轮询一次\r\n    },\r\n    \r\n    // 停止轮询\r\n    stopPolling() {\r\n      if (this.pollingInterval) {\r\n        clearInterval(this.pollingInterval);\r\n        this.pollingInterval = null;\r\n      }\r\n    },\r\n    \r\n    // 主题变更处理函数\r\n    onThemeChanged(theme) {\r\n      this.currentTheme = theme; // 更新当前主题\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container {\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: var(--chat-background); /* 使用主题变量 */\r\n  color: var(--text-color); /* 使用主题变量 */\r\n}\r\n\r\n.chat-interface {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n}\r\n\r\n.chat-header {\r\n  padding: 1rem;\r\n  background-color: var(--primary-color); /* 使用主题变量 */\r\n  color: var(--header-color); /* 使用主题变量 */\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.chat-title {\r\n  margin: 0;\r\n  font-size: 1.25rem;\r\n}\r\n\r\n.user-info-container {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.user-info {\r\n  font-size: 0.875rem;\r\n  margin-left: 1rem;\r\n}\r\n\r\n.current-username {\r\n  font-weight: bold;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}