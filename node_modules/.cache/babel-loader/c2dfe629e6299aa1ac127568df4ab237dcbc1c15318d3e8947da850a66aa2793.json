{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat-interface\"\n};\nconst _hoisted_3 = {\n  class: \"chat-main\"\n};\nconst _hoisted_4 = {\n  class: \"messages-container\"\n};\nconst _hoisted_5 = {\n  class: \"messages-list\",\n  ref: \"messagesList\"\n};\nconst _hoisted_6 = {\n  class: \"message-avatar\"\n};\nconst _hoisted_7 = [\"src\", \"alt\"];\nconst _hoisted_8 = {\n  class: \"message-content\"\n};\nconst _hoisted_9 = {\n  class: \"message-header\"\n};\nconst _hoisted_10 = {\n  class: \"message-sender\"\n};\nconst _hoisted_11 = {\n  class: \"message-time\"\n};\nconst _hoisted_12 = {\n  class: \"message-text\"\n};\nconst _hoisted_13 = {\n  class: \"input-container\"\n};\nconst _hoisted_14 = {\n  class: \"input-wrapper\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UserNameInput = _resolveComponent(\"UserNameInput\");\n  const _component_UserProfileEditor = _resolveComponent(\"UserProfileEditor\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 用户名输入界面，当用户未设置昵称时显示 \"), !$setup.username ? (_openBlock(), _createBlock(_component_UserNameInput, {\n    key: 0,\n    onSetUsername: $setup.setUsername\n  }, null, 8 /* PROPS */, [\"onSetUsername\"])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 聊天界面，当用户已设置昵称时显示 \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.messages, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id,\n      class: \"message-item\"\n    }, [_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"img\", {\n      src: message.avatar || $setup.getFallbackAvatarUrl(),\n      alt: message.sender,\n      onError: _cache[0] || (_cache[0] = (...args) => $setup.handleAvatarError && $setup.handleAvatarError(...args))\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_7)]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"span\", _hoisted_10, _toDisplayString(message.sender), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_11, _toDisplayString($setup.formatTime(message.timestamp)), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_12, _toDisplayString(message.content), 1 /* TEXT */)])]);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */)]), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"div\", _hoisted_14, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.newMessage = $event),\n    onKeyup: _cache[2] || (_cache[2] = _withKeys((...args) => $setup.sendMessage && $setup.sendMessage(...args), [\"enter\"])),\n    placeholder: \"发送消息...\",\n    class: \"message-input\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.newMessage]]), _createElementVNode(\"button\", {\n    class: \"send-button\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $setup.sendMessage && $setup.sendMessage(...args))\n  }, \" 发送 \")])])])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createCommentVNode(\" 个人资料编辑器 \"), _createVNode(_component_UserProfileEditor, {\n    isOpen: $setup.showProfileEditor,\n    currentUserInfo: $setup.currentUserInfo,\n    onClose: $setup.closeProfileEditor,\n    onUpdateProfile: $setup.updateProfile\n  }, null, 8 /* PROPS */, [\"isOpen\", \"currentUserInfo\", \"onClose\", \"onUpdateProfile\"])]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createCommentVNode","$setup","username","_createBlock","_component_UserNameInput","key","onSetUsername","setUsername","_Fragment","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_renderList","messages","message","id","_hoisted_6","src","avatar","getFallbackAvatarUrl","alt","sender","onError","_cache","args","handleAvatarError","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_toDisplayString","_hoisted_11","formatTime","timestamp","_hoisted_12","content","_hoisted_13","_hoisted_14","type","$event","newMessage","onKeyup","_withKeys","sendMessage","placeholder","onClick","_createVNode","_component_UserProfileEditor","isOpen","showProfileEditor","currentUserInfo","onClose","closeProfileEditor","onUpdateProfile","updateProfile"],"sources":["C:\\Users\\Administrator\\Desktop\\discord-chat-app\\fack\\just-do-it\\src\\components\\chat\\ChatContainer.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <!-- 用户名输入界面，当用户未设置昵称时显示 -->\r\n    <UserNameInput \r\n      v-if=\"!username\" \r\n      @set-username=\"setUsername\" \r\n    />\r\n    \r\n    <!-- 聊天界面，当用户已设置昵称时显示 -->\r\n    <div v-else class=\"chat-interface\">\r\n      <div class=\"chat-main\">\r\n        <div class=\"messages-container\">\r\n          <div class=\"messages-list\" ref=\"messagesList\">\r\n            <div v-for=\"message in messages\" :key=\"message.id\" class=\"message-item\">\r\n              <div class=\"message-avatar\">\r\n                <img \r\n                  :src=\"message.avatar || getFallbackAvatarUrl()\" \r\n                  :alt=\"message.sender\"\r\n                  @error=\"handleAvatarError\"\r\n                >\r\n              </div>\r\n              <div class=\"message-content\">\r\n                <div class=\"message-header\">\r\n                  <span class=\"message-sender\">{{ message.sender }}</span>\r\n                  <span class=\"message-time\">{{ formatTime(message.timestamp) }}</span>\r\n                </div>\r\n                <div class=\"message-text\">{{ message.content }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"input-container\">\r\n          <div class=\"input-wrapper\">\r\n            <input \r\n              type=\"text\" \r\n              v-model=\"newMessage\" \r\n              @keyup.enter=\"sendMessage\"\r\n              placeholder=\"发送消息...\"\r\n              class=\"message-input\"\r\n            >\r\n            <button class=\"send-button\" @click=\"sendMessage\">\r\n              发送\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 个人资料编辑器 -->\r\n    <UserProfileEditor \r\n      :isOpen=\"showProfileEditor\"\r\n      :currentUserInfo=\"currentUserInfo\"\r\n      @close=\"closeProfileEditor\"\r\n      @update-profile=\"updateProfile\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport UserNameInput from './UserNameInput.vue';\r\nimport UserProfileEditor from './UserProfileEditor.vue';\r\nimport axios from 'axios';\r\nimport { handleAvatarError, getFallbackAvatarUrl } from '../../utils/avatarUtils';\r\nimport { ref, onMounted, onUnmounted, nextTick, watch } from 'vue';\r\n\r\nexport default {\r\n  name: 'ChatContainer',\r\n  components: {\r\n    UserNameInput,\r\n    UserProfileEditor\r\n  },\r\n  props: {\r\n    currentUser: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  setup(props, { emit }) {\r\n    const messages = ref([]);\r\n    const newMessage = ref('');\r\n    const messagesList = ref(null);\r\n    const apiUrl = 'http://localhost:3001/api/messages';\r\n    const usersApiUrl = 'http://localhost:3001/api/users';\r\n    const username = ref(props.currentUser.username || '');\r\n    const userAvatar = ref(props.currentUser.avatar || '');\r\n    const onlineUsers = ref([]);\r\n    const pollingInterval = ref(null);\r\n    const onlinePollingInterval = ref(null);\r\n    const currentTheme = ref(localStorage.getItem('chat-theme') || 'discord');\r\n    const showProfileEditor = ref(false);\r\n    const currentUserInfo = ref({});\r\n\r\n    // 从localStorage获取用户信息\r\n    const initUserInfo = () => {\r\n      const savedUsername = localStorage.getItem('chat-username');\r\n      const savedAvatar = localStorage.getItem('chat-avatar');\r\n      \r\n      if (savedUsername && !username.value) {\r\n        username.value = savedUsername;\r\n      }\r\n      \r\n      if (savedAvatar && !userAvatar.value) {\r\n        userAvatar.value = savedAvatar;\r\n      } else if (!userAvatar.value) {\r\n        // 设置默认头像\r\n        userAvatar.value = '/avatars/default.png';\r\n        localStorage.setItem('chat-avatar', userAvatar.value);\r\n      }\r\n      \r\n      // 如果用户已登录，注册用户\r\n      if (username.value) {\r\n        registerUser();\r\n      }\r\n    };\r\n\r\n    // 注册用户\r\n    const registerUser = async () => {\r\n      try {\r\n        await axios.post(`${usersApiUrl}/register`, {\r\n          username: username.value,\r\n          avatar: userAvatar.value\r\n        });\r\n        console.log('用户注册成功');\r\n      } catch (error) {\r\n        console.error('用户注册失败:', error);\r\n      }\r\n    };\r\n\r\n    // 获取消息\r\n    const fetchMessages = async () => {\r\n      try {\r\n        const response = await axios.get(apiUrl);\r\n        messages.value = response.data;\r\n        nextTick(() => {\r\n          scrollToBottom();\r\n        });\r\n      } catch (error) {\r\n        console.error('获取消息失败:', error);\r\n      }\r\n    };\r\n\r\n    // 获取在线用户\r\n    const fetchOnlineUsers = async () => {\r\n      try {\r\n        const response = await axios.get(`${usersApiUrl}/online`);\r\n        onlineUsers.value = response.data;\r\n        // 向父组件发送在线用户更新\r\n        emit('update-online-users', onlineUsers.value);\r\n      } catch (error) {\r\n        console.error('获取在线用户失败:', error);\r\n        if (onlineUsers.value.length === 0) {\r\n          onlineUsers.value = [\r\n            { username: username.value, avatar: userAvatar.value }\r\n          ];\r\n          emit('update-online-users', onlineUsers.value);\r\n        }\r\n      }\r\n    };\r\n\r\n    // 发送消息\r\n    const sendMessage = async () => {\r\n      if (!newMessage.value.trim()) return;\r\n      \r\n      try {\r\n        const response = await axios.post(apiUrl, {\r\n          sender: username.value,\r\n          content: newMessage.value,\r\n          avatar: userAvatar.value\r\n        });\r\n        \r\n        messages.value.push(response.data);\r\n        newMessage.value = '';\r\n        nextTick(() => {\r\n          scrollToBottom();\r\n        });\r\n      } catch (error) {\r\n        console.error('发送消息失败:', error);\r\n      }\r\n    };\r\n\r\n    // 滚动到底部\r\n    const scrollToBottom = () => {\r\n      nextTick(() => {\r\n        const messagesListEl = messagesList.value;\r\n        if (messagesListEl) {\r\n          messagesListEl.scrollTop = messagesListEl.scrollHeight;\r\n        }\r\n      });\r\n    };\r\n\r\n    // 格式化时间\r\n    const formatTime = (timestamp) => {\r\n      const date = new Date(timestamp);\r\n      return date.toLocaleTimeString('zh-CN', {\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      });\r\n    };\r\n\r\n    // 设置用户名和头像\r\n    const setUsername = (userData) => {\r\n      username.value = userData.username;\r\n      userAvatar.value = userData.avatar;\r\n      \r\n      // 保存到localStorage\r\n      localStorage.setItem('chat-username', username.value);\r\n      localStorage.setItem('chat-avatar', userAvatar.value);\r\n      \r\n      // 注册用户\r\n      registerUser();\r\n      \r\n      // 获取消息和在线用户\r\n      fetchMessages();\r\n      fetchOnlineUsers();\r\n      \r\n      // 设置轮询\r\n      startPolling();\r\n    };\r\n\r\n    // 开始轮询\r\n    const startPolling = () => {\r\n      pollingInterval.value = setInterval(fetchMessages, 3000);\r\n      onlinePollingInterval.value = setInterval(fetchOnlineUsers, 5000);\r\n    };\r\n\r\n    // 停止轮询\r\n    const stopPolling = () => {\r\n      if (pollingInterval.value) {\r\n        clearInterval(pollingInterval.value);\r\n      }\r\n      if (onlinePollingInterval.value) {\r\n        clearInterval(onlinePollingInterval.value);\r\n      }\r\n    };\r\n\r\n    // 打开个人资料编辑器\r\n    const openProfileEditor = () => {\r\n      showProfileEditor.value = true;\r\n      currentUserInfo.value = {\r\n        username: username.value,\r\n        avatar: userAvatar.value\r\n      };\r\n    };\r\n\r\n    // 关闭个人资料编辑器\r\n    const closeProfileEditor = () => {\r\n      showProfileEditor.value = false;\r\n    };\r\n\r\n    // 更新用户信息\r\n    const updateProfile = (updatedInfo) => {\r\n      username.value = updatedInfo.username;\r\n      userAvatar.value = updatedInfo.avatar;\r\n      \r\n      // 保存到localStorage\r\n      localStorage.setItem('chat-username', username.value);\r\n      localStorage.setItem('chat-avatar', userAvatar.value);\r\n      \r\n      // 注册用户\r\n      registerUser();\r\n      \r\n      // 获取消息和在线用户\r\n      fetchMessages();\r\n      fetchOnlineUsers();\r\n      \r\n      // 设置轮询\r\n      startPolling();\r\n    };\r\n\r\n    // 监听消息列表变化\r\n    watch(messages, () => {\r\n      nextTick(() => {\r\n        scrollToBottom();\r\n      });\r\n    }, { deep: true });\r\n\r\n    // 组件挂载时\r\n    onMounted(() => {\r\n      initUserInfo();\r\n      document.body.classList.add(`theme-${currentTheme.value}`);\r\n      \r\n      if (username.value) {\r\n        fetchMessages();\r\n        fetchOnlineUsers();\r\n        startPolling();\r\n      }\r\n    });\r\n\r\n    // 组件卸载时\r\n    onUnmounted(() => {\r\n      stopPolling();\r\n    });\r\n\r\n    return {\r\n      messages,\r\n      newMessage,\r\n      messagesList,\r\n      sendMessage,\r\n      formatTime,\r\n      handleAvatarError,\r\n      getFallbackAvatarUrl,\r\n      username,\r\n      userAvatar,\r\n      onlineUsers,\r\n      showProfileEditor,\r\n      currentUserInfo,\r\n      openProfileEditor,\r\n      closeProfileEditor,\r\n      updateProfile,\r\n      setUsername\r\n    };\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container {\r\n  flex: 1;\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: var(--chat-background); /* 使用主题变量 */\r\n  color: var(--text-color); /* 使用主题变量 */\r\n  position: relative;\r\n  z-index: 1;\r\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);\r\n  background-image: var(--background-image); /* 使用主题变量中的背景图案 */\r\n  background-repeat: repeat;\r\n  background-size: 100px 100px; /* 设置背景图案大小 */\r\n}\r\n\r\n.chat-interface {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  backdrop-filter: blur(5px); /* 添加模糊效果 */\r\n}\r\n\r\n.chat-main {\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1;\r\n  overflow: hidden;\r\n  position: relative;\r\n  background-image: var(--background-image); /* 使用主题变量中的背景图案 */\r\n  background-repeat: repeat;\r\n  background-size: 100px 100px; /* 设置背景图案大小 */\r\n}\r\n\r\n.messages-container {\r\n  flex: 1;\r\n  overflow: hidden;\r\n  padding: 20px;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.messages-list {\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  padding-right: 8px;\r\n}\r\n\r\n.messages-list::-webkit-scrollbar {\r\n  width: 8px;\r\n}\r\n\r\n.messages-list::-webkit-scrollbar-track {\r\n  background: transparent;\r\n}\r\n\r\n.messages-list::-webkit-scrollbar-thumb {\r\n  background-color: var(--background-tertiary);\r\n  border-radius: 4px;\r\n}\r\n\r\n.message-item {\r\n  display: flex;\r\n  margin-bottom: 16px;\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.message-item:hover {\r\n  background-color: var(--background-modifier-hover);\r\n}\r\n\r\n.message-avatar {\r\n  margin-right: 16px;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.message-avatar img {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n}\r\n\r\n.message-content {\r\n  flex: 1;\r\n  min-width: 0;\r\n}\r\n\r\n.message-header {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.message-sender {\r\n  font-weight: 500;\r\n  color: var(--header-primary);\r\n  margin-right: 8px;\r\n}\r\n\r\n.message-time {\r\n  font-size: 0.8rem;\r\n  color: var(--text-muted);\r\n}\r\n\r\n.message-text {\r\n  color: var(--text-normal);\r\n  word-wrap: break-word;\r\n  line-height: 1.4;\r\n}\r\n\r\n.input-container {\r\n  padding: 16px;\r\n  background-color: var(--background-secondary);\r\n  border-top: 1px solid var(--border-color);\r\n}\r\n\r\n.input-wrapper {\r\n  display: flex;\r\n  gap: 12px;\r\n  padding: 0 16px;\r\n  background-color: var(--background-tertiary);\r\n  border-radius: 8px;\r\n}\r\n\r\n.message-input {\r\n  flex: 1;\r\n  padding: 12px 0;\r\n  background: none;\r\n  border: none;\r\n  color: var(--text-normal);\r\n  font-size: 1rem;\r\n  outline: none;\r\n}\r\n\r\n.message-input::placeholder {\r\n  color: var(--text-muted);\r\n}\r\n\r\n.send-button {\r\n  padding: 8px 16px;\r\n  background: none;\r\n  border: none;\r\n  color: var(--text-link);\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: color 0.2s;\r\n}\r\n\r\n.send-button:hover {\r\n  color: var(--header-primary);\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .chat-container {\r\n    height: auto;\r\n    flex: 1;\r\n  }\r\n  \r\n  .messages-container {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .message-avatar img {\r\n    width: 32px;\r\n    height: 32px;\r\n  }\r\n  \r\n  .input-container {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .input-wrapper {\r\n    padding: 0 12px;\r\n  }\r\n  \r\n  .message-input {\r\n    padding: 10px 0;\r\n  }\r\n  \r\n  .send-button {\r\n    padding: 6px 12px;\r\n  }\r\n}\r\n</style> \r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}