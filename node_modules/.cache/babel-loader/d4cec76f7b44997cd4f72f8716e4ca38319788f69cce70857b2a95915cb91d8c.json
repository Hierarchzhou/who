{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, withModifiers as _withModifiers, withKeys as _withKeys, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"message-input-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"sticker-picker-container\",\n  ref: \"stickerPicker\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_StickerPicker = _resolveComponent(\"StickerPicker\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 表情按钮 \"), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleStickerPicker && $options.toggleStickerPicker(...args)),\n    class: \"emoji-button\",\n    ref: \"emojiButton\"\n  }, \" 🎯 \", 512 /* NEED_PATCH */), _createCommentVNode(\" 表情包选择器 \"), $data.showStickerPicker ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(_component_StickerPicker, {\n    onSelect: $options.onStickerSelect\n  }, null, 8 /* PROPS */, [\"onSelect\"])], 512 /* NEED_PATCH */)) : _createCommentVNode(\"v-if\", true), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.message = $event),\n    onKeydown: _cache[2] || (_cache[2] = _withKeys(_withModifiers((...args) => $options.sendMessage && $options.sendMessage(...args), [\"prevent\"]), [\"enter\"])),\n    placeholder: \"输入消息...\",\n    class: \"message-input\",\n    ref: \"messageInput\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.message]]), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.sendMessage && $options.sendMessage(...args)),\n    class: \"send-button\"\n  }, \" 发送 \")]);\n}","map":{"version":3,"names":["class","key","ref","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","onClick","_cache","args","$options","toggleStickerPicker","$data","showStickerPicker","_hoisted_2","_createVNode","_component_StickerPicker","onSelect","onStickerSelect","$event","message","onKeydown","_withKeys","_withModifiers","sendMessage","placeholder"],"sources":["C:\\Users\\Administrator\\Desktop\\discord-chat-app\\fack\\just-do-it\\src\\components\\chat\\MessageInput.vue"],"sourcesContent":["<template>\r\n  <div class=\"message-input-container\">\r\n    <!-- 表情按钮 -->\r\n    <button @click=\"toggleStickerPicker\" class=\"emoji-button\" ref=\"emojiButton\">\r\n      🎯\r\n    </button>\r\n    \r\n    <!-- 表情包选择器 -->\r\n    <div v-if=\"showStickerPicker\" class=\"sticker-picker-container\" ref=\"stickerPicker\">\r\n      <StickerPicker @select=\"onStickerSelect\" />\r\n    </div>\r\n\r\n    <textarea\r\n      v-model=\"message\"\r\n      @keydown.enter.prevent=\"sendMessage\"\r\n      placeholder=\"输入消息...\"\r\n      class=\"message-input\"\r\n      ref=\"messageInput\"\r\n    ></textarea>\r\n    <button @click=\"sendMessage\" class=\"send-button\">\r\n      发送\r\n    </button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport StickerPicker from './StickerPicker.vue'\r\n\r\nexport default {\r\n  name: 'MessageInput',\r\n  components: {\r\n    StickerPicker\r\n  },\r\n  data() {\r\n    return {\r\n      message: '',  // 存储用户输入的消息\r\n      showStickerPicker: false,  // 控制表情选择器的显示/隐藏\r\n    }\r\n  },\r\n  methods: {\r\n    // 发送消息\r\n    sendMessage() {\r\n      if (this.message.trim()) {\r\n        this.$emit('send-message', this.message);\r\n        this.message = '';\r\n        this.$nextTick(() => {\r\n          this.$refs.messageInput.focus();\r\n        });\r\n      }\r\n    },\r\n    // 切换表情选择器的显示/隐藏\r\n    toggleStickerPicker(event) {\r\n      event.stopPropagation();\r\n      this.showStickerPicker = !this.showStickerPicker;\r\n    },\r\n    // 处理表情选择\r\n    onStickerSelect(sticker) {\r\n      // 发送带有表情包的消息\r\n      this.$emit('send-message', `[sticker:${sticker.id}]`);\r\n      this.showStickerPicker = false;\r\n    },\r\n    // 处理点击外部\r\n    handleClickOutside(e) {\r\n      if (this.showStickerPicker && \r\n          !this.$refs.stickerPicker?.contains(e.target) && \r\n          !this.$refs.emojiButton?.contains(e.target)) {\r\n        this.showStickerPicker = false;\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$refs.messageInput.focus();\r\n    document.addEventListener('click', this.handleClickOutside);\r\n  },\r\n  beforeUnmount() {\r\n    document.removeEventListener('click', this.handleClickOutside);\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.message-input-container {\r\n  display: flex;\r\n  padding: 1rem;\r\n  background-color: var(--input-background); /* 使用主题变量 */\r\n  border-top: 1px solid rgba(255, 255, 255, 0.1);\r\n  position: relative;\r\n  z-index: 2;\r\n}\r\n\r\n.message-input {\r\n  flex: 1;\r\n  padding: 0.75rem 1rem;\r\n  border-radius: 1.5rem;\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n  color: var(--input-color); /* 使用主题变量 */\r\n  font-size: 0.95rem;\r\n  resize: none;\r\n  height: 20px;\r\n  line-height: 20px;\r\n  transition: all 0.2s ease;\r\n  margin-left: 0.5rem;\r\n}\r\n\r\n.message-input:focus {\r\n  outline: none;\r\n  border-color: var(--primary-color);\r\n  box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 138, 113, 88), 0.2);\r\n}\r\n\r\n.message-input::placeholder {\r\n  color: var(--input-placeholder); /* 使用主题变量 */\r\n  opacity: 0.7;\r\n}\r\n\r\n.send-button {\r\n  margin-left: 0.75rem;\r\n  padding: 0.5rem 1.25rem;\r\n  background-color: var(--primary-color);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 1.5rem;\r\n  cursor: pointer;\r\n  font-weight: 500;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.send-button:hover {\r\n  background-color: var(--secondary-color);\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.send-button:active {\r\n  transform: translateY(0);\r\n}\r\n\r\n/* 修改表情选择器容器样式 */\r\n.sticker-picker-container {\r\n  position: absolute;\r\n  bottom: 100%;\r\n  left: 0;\r\n  margin-bottom: 8px;\r\n  width: 350px;\r\n  background: var(--background-primary);\r\n  border: 1px solid var(--border-color);\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);\r\n  z-index: 1000;\r\n}\r\n\r\n/* 表情按钮样式优化 */\r\n.emoji-button {\r\n  padding: 0.5rem;\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 1.2rem;\r\n  transition: all 0.2s ease;\r\n  margin-right: 0.5rem;\r\n}\r\n\r\n.emoji-button:hover {\r\n  transform: scale(1.1);\r\n}\r\n\r\n.emoji-button:focus {\r\n  outline: none;\r\n}\r\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAyB;;EADtCC,GAAA;EAQkCD,KAAK,EAAC,0BAA0B;EAACE,GAAG,EAAC;;;;uBAPrEC,mBAAA,CAqBM,OArBNC,UAqBM,GApBJC,mBAAA,UAAa,EACbC,mBAAA,CAES;IAFAC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,mBAAA,IAAAD,QAAA,CAAAC,mBAAA,IAAAF,IAAA,CAAmB;IAAET,KAAK,EAAC,cAAc;IAACE,GAAG,EAAC;KAAc,MAE5E,yBAEAG,mBAAA,YAAe,EACJO,KAAA,CAAAC,iBAAiB,I,cAA5BV,mBAAA,CAEM,OAFNW,UAEM,GADJC,YAAA,CAA2CC,wBAAA;IAA3BC,QAAM,EAAEP,QAAA,CAAAQ;EAAe,sC,2BAT7Cb,mBAAA,gB,gBAYIC,mBAAA,CAMY;IAlBhB,uBAAAE,MAAA,QAAAA,MAAA,MAAAW,MAAA,IAaeP,KAAA,CAAAQ,OAAO,GAAAD,MAAA;IACfE,SAAO,EAAAb,MAAA,QAAAA,MAAA,MAddc,SAAA,CAAAC,cAAA,KAAAd,IAAA,KAc8BC,QAAA,CAAAc,WAAA,IAAAd,QAAA,CAAAc,WAAA,IAAAf,IAAA,CAAW;IACnCgB,WAAW,EAAC,SAAS;IACrBzB,KAAK,EAAC,eAAe;IACrBE,GAAG,EAAC;iEAJKU,KAAA,CAAAQ,OAAO,E,GAMlBd,mBAAA,CAES;IAFAC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAc,WAAA,IAAAd,QAAA,CAAAc,WAAA,IAAAf,IAAA,CAAW;IAAET,KAAK,EAAC;KAAc,MAEjD,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}