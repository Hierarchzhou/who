{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { getRandomDefaultAvatarUrl, avatarStyles } from '../../utils/avatarUtils';\nexport default {\n  name: 'AvatarSelector',\n  data() {\n    return {\n      selectedStyle: avatarStyles[0],\n      selectedAvatar: '',\n      previewUrl: null,\n      generatedAvatars: [],\n      avatarStyles\n    };\n  },\n  created() {\n    this.generateAvatarSet();\n  },\n  methods: {\n    // 生成一组头像\n    generateAvatarSet() {\n      this.generatedAvatars = Array(8).fill(null).map(() => getRandomDefaultAvatarUrl());\n    },\n    // 选择头像样式\n    selectStyle(style) {\n      this.selectedStyle = style;\n      this.generateAvatarSet();\n    },\n    // 获取样式名称的中文显示\n    getStyleName(style) {\n      const styleNames = {\n        'micah': '简约',\n        'avataaars': '卡通',\n        'bottts': '机器人',\n        'personas': '像素',\n        'thumbs': '拇指',\n        'lorelei': '可爱',\n        'notionists': '商务',\n        'adventurer': '冒险',\n        'fun-emoji': '表情',\n        'big-smile': '微笑'\n      };\n      return styleNames[style] || style;\n    },\n    // 选择头像\n    selectAvatar(avatar) {\n      this.selectedAvatar = avatar;\n      this.previewUrl = avatar;\n      this.$emit('avatar-selected', avatar);\n    },\n    // 重新生成头像\n    regenerateAvatars() {\n      this.generateAvatarSet();\n    },\n    // 处理文件选择\n    handleFileSelect(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      if (!file.type.match('image.*')) {\n        alert('请上传图片文件');\n        return;\n      }\n      if (file.size > 2 * 1024 * 1024) {\n        alert('图片大小不能超过 2MB');\n        return;\n      }\n      const reader = new FileReader();\n      reader.onload = e => {\n        this.previewUrl = e.target.result;\n        this.selectedAvatar = e.target.result;\n        this.$emit('avatar-selected', e.target.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  }\n};","map":{"version":3,"names":["getRandomDefaultAvatarUrl","avatarStyles","name","data","selectedStyle","selectedAvatar","previewUrl","generatedAvatars","created","generateAvatarSet","methods","Array","fill","map","selectStyle","style","getStyleName","styleNames","selectAvatar","avatar","$emit","regenerateAvatars","handleFileSelect","event","file","target","files","type","match","alert","size","reader","FileReader","onload","e","result","readAsDataURL"],"sources":["C:\\Users\\Administrator\\Desktop\\discord-chat-app\\fack\\just-do-it\\src\\components\\chat\\AvatarSelector.vue"],"sourcesContent":["<template>\n  <div class=\"avatar-selector\">\n    <!-- 头像预览区域 -->\n    <div class=\"avatar-preview\" @click=\"triggerFileInput\">\n      <div v-if=\"previewUrl\" class=\"avatar-preview-container\">\n        <img :src=\"previewUrl\" alt=\"Avatar preview\" class=\"preview-image\" />\n        <div class=\"avatar-hover-effect\">\n          <span class=\"change-text\">更换头像</span>\n        </div>\n      </div>\n      <div v-else class=\"empty-preview\">\n        <div class=\"default-avatar\">\n          <img :src=\"getRandomDefaultAvatarUrl()\" alt=\"Default avatar\" />\n        </div>\n        <span>点击选择头像</span>\n      </div>\n    </div>\n\n    <!-- 头像样式选择器 -->\n    <div class=\"style-selector\">\n      <div class=\"style-categories\">\n        <button \n          v-for=\"style in avatarStyles\" \n          :key=\"style\"\n          class=\"style-button\"\n          :class=\"{ active: selectedStyle === style }\"\n          @click=\"selectStyle(style)\"\n        >\n          {{ getStyleName(style) }}\n        </button>\n      </div>\n    </div>\n\n    <!-- 头像网格 -->\n    <div class=\"avatar-grid\">\n      <div \n        v-for=\"(avatar, index) in generatedAvatars\" \n        :key=\"index\"\n        class=\"avatar-option\"\n        :class=\"{ selected: selectedAvatar === avatar }\"\n        @click=\"selectAvatar(avatar)\"\n      >\n        <img :src=\"avatar\" alt=\"Avatar option\" />\n        <div class=\"hover-effect\">\n          <span class=\"select-text\">选择</span>\n        </div>\n      </div>\n      \n      <!-- 刷新按钮 -->\n      <div class=\"avatar-option refresh-option\" @click=\"regenerateAvatars\">\n        <div class=\"refresh-icon\">\n          <span>↻</span>\n          <span class=\"refresh-text\">换一批</span>\n        </div>\n      </div>\n      \n      <!-- 自定义上传选项 -->\n      <div class=\"avatar-option upload-option\">\n        <label for=\"avatar-upload\" class=\"upload-label\">\n          <div class=\"upload-icon\">\n            <span>+</span>\n            <span class=\"upload-text\">上传图片</span>\n          </div>\n        </label>\n        <input \n          type=\"file\" \n          id=\"avatar-upload\" \n          @change=\"handleFileSelect\" \n          accept=\"image/*\"\n          style=\"display: none\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getRandomDefaultAvatarUrl, avatarStyles } from '../../utils/avatarUtils';\n\nexport default {\n  name: 'AvatarSelector',\n  data() {\n    return {\n      selectedStyle: avatarStyles[0],\n      selectedAvatar: '',\n      previewUrl: null,\n      generatedAvatars: [],\n      avatarStyles\n    }\n  },\n  created() {\n    this.generateAvatarSet();\n  },\n  methods: {\n    // 生成一组头像\n    generateAvatarSet() {\n      this.generatedAvatars = Array(8).fill(null).map(() => getRandomDefaultAvatarUrl());\n    },\n    \n    // 选择头像样式\n    selectStyle(style) {\n      this.selectedStyle = style;\n      this.generateAvatarSet();\n    },\n    \n    // 获取样式名称的中文显示\n    getStyleName(style) {\n      const styleNames = {\n        'micah': '简约',\n        'avataaars': '卡通',\n        'bottts': '机器人',\n        'personas': '像素',\n        'thumbs': '拇指',\n        'lorelei': '可爱',\n        'notionists': '商务',\n        'adventurer': '冒险',\n        'fun-emoji': '表情',\n        'big-smile': '微笑'\n      };\n      return styleNames[style] || style;\n    },\n    \n    // 选择头像\n    selectAvatar(avatar) {\n      this.selectedAvatar = avatar;\n      this.previewUrl = avatar;\n      this.$emit('avatar-selected', avatar);\n    },\n    \n    // 重新生成头像\n    regenerateAvatars() {\n      this.generateAvatarSet();\n    },\n    \n    // 处理文件选择\n    handleFileSelect(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      \n      if (!file.type.match('image.*')) {\n        alert('请上传图片文件');\n        return;\n      }\n      \n      if (file.size > 2 * 1024 * 1024) {\n        alert('图片大小不能超过 2MB');\n        return;\n      }\n      \n      const reader = new FileReader();\n      reader.onload = (e) => {\n        this.previewUrl = e.target.result;\n        this.selectedAvatar = e.target.result;\n        this.$emit('avatar-selected', e.target.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  }\n}\n</script>\n\n<style scoped>\n.avatar-selector {\n  width: 100%;\n  max-width: 600px;\n  padding: 1.5rem;\n  background: var(--chat-background);\n  border-radius: 12px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n}\n\n.avatar-preview {\n  width: 120px;\n  height: 120px;\n  margin: 0 auto 2rem;\n  border-radius: 50%;\n  overflow: hidden;\n  position: relative;\n  cursor: pointer;\n  background: linear-gradient(45deg, var(--primary-color), var(--secondary-color));\n  padding: 3px;\n}\n\n.preview-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 50%;\n}\n\n.avatar-hover-effect, .hover-effect {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.avatar-preview:hover .avatar-hover-effect,\n.avatar-option:hover .hover-effect {\n  opacity: 1;\n}\n\n.change-text, .select-text {\n  color: white;\n  font-size: 0.9rem;\n  font-weight: 500;\n}\n\n.style-selector {\n  margin-bottom: 2rem;\n}\n\n.style-categories {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  justify-content: center;\n}\n\n.style-button {\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 20px;\n  background: var(--input-background);\n  color: var(--text-color);\n  cursor: pointer;\n  transition: all 0.3s ease;\n  font-size: 0.9rem;\n}\n\n.style-button.active {\n  background: var(--primary-color);\n  color: white;\n  transform: scale(1.05);\n}\n\n.avatar-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));\n  gap: 1rem;\n  padding: 1rem;\n  background: var(--input-background);\n  border-radius: 8px;\n}\n\n.avatar-option {\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n  overflow: hidden;\n  cursor: pointer;\n  position: relative;\n  transition: all 0.3s ease;\n  border: 3px solid transparent;\n}\n\n.avatar-option img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.avatar-option.selected {\n  border-color: var(--primary-color);\n  transform: scale(1.1);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n}\n\n.refresh-option, .upload-option {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: var(--chat-background);\n  border: 2px dashed var(--border-color);\n}\n\n.refresh-icon, .upload-icon {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  color: var(--text-color);\n  font-size: 1.5rem;\n}\n\n.refresh-text, .upload-text {\n  font-size: 0.8rem;\n  margin-top: 0.3rem;\n}\n\n.empty-preview {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background: var(--input-background);\n  border-radius: 50%;\n}\n\n.default-avatar {\n  width: 80%;\n  height: 80%;\n  border-radius: 50%;\n  overflow: hidden;\n}\n\n.default-avatar img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n@media (max-width: 480px) {\n  .avatar-grid {\n    grid-template-columns: repeat(3, 1fr);\n  }\n  \n  .style-button {\n    padding: 0.4rem 0.8rem;\n    font-size: 0.8rem;\n  }\n}\n</style> "],"mappings":";;AA6EA,SAASA,yBAAyB,EAAEC,YAAW,QAAS,yBAAyB;AAEjF,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,aAAa,EAAEH,YAAY,CAAC,CAAC,CAAC;MAC9BI,cAAc,EAAE,EAAE;MAClBC,UAAU,EAAE,IAAI;MAChBC,gBAAgB,EAAE,EAAE;MACpBN;IACF;EACF,CAAC;EACDO,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,iBAAiB,CAAC,CAAC;EAC1B,CAAC;EACDC,OAAO,EAAE;IACP;IACAD,iBAAiBA,CAAA,EAAG;MAClB,IAAI,CAACF,gBAAe,GAAII,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,MAAMb,yBAAyB,CAAC,CAAC,CAAC;IACpF,CAAC;IAED;IACAc,WAAWA,CAACC,KAAK,EAAE;MACjB,IAAI,CAACX,aAAY,GAAIW,KAAK;MAC1B,IAAI,CAACN,iBAAiB,CAAC,CAAC;IAC1B,CAAC;IAED;IACAO,YAAYA,CAACD,KAAK,EAAE;MAClB,MAAME,UAAS,GAAI;QACjB,OAAO,EAAE,IAAI;QACb,WAAW,EAAE,IAAI;QACjB,QAAQ,EAAE,KAAK;QACf,UAAU,EAAE,IAAI;QAChB,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE,IAAI;QACf,YAAY,EAAE,IAAI;QAClB,YAAY,EAAE,IAAI;QAClB,WAAW,EAAE,IAAI;QACjB,WAAW,EAAE;MACf,CAAC;MACD,OAAOA,UAAU,CAACF,KAAK,KAAKA,KAAK;IACnC,CAAC;IAED;IACAG,YAAYA,CAACC,MAAM,EAAE;MACnB,IAAI,CAACd,cAAa,GAAIc,MAAM;MAC5B,IAAI,CAACb,UAAS,GAAIa,MAAM;MACxB,IAAI,CAACC,KAAK,CAAC,iBAAiB,EAAED,MAAM,CAAC;IACvC,CAAC;IAED;IACAE,iBAAiBA,CAAA,EAAG;MAClB,IAAI,CAACZ,iBAAiB,CAAC,CAAC;IAC1B,CAAC;IAED;IACAa,gBAAgBA,CAACC,KAAK,EAAE;MACtB,MAAMC,IAAG,GAAID,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClC,IAAI,CAACF,IAAI,EAAE;MAEX,IAAI,CAACA,IAAI,CAACG,IAAI,CAACC,KAAK,CAAC,SAAS,CAAC,EAAE;QAC/BC,KAAK,CAAC,SAAS,CAAC;QAChB;MACF;MAEA,IAAIL,IAAI,CAACM,IAAG,GAAI,IAAI,IAAG,GAAI,IAAI,EAAE;QAC/BD,KAAK,CAAC,cAAc,CAAC;QACrB;MACF;MAEA,MAAME,MAAK,GAAI,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAK,GAAKC,CAAC,IAAK;QACrB,IAAI,CAAC5B,UAAS,GAAI4B,CAAC,CAACT,MAAM,CAACU,MAAM;QACjC,IAAI,CAAC9B,cAAa,GAAI6B,CAAC,CAACT,MAAM,CAACU,MAAM;QACrC,IAAI,CAACf,KAAK,CAAC,iBAAiB,EAAEc,CAAC,CAACT,MAAM,CAACU,MAAM,CAAC;MAChD,CAAC;MACDJ,MAAM,CAACK,aAAa,CAACZ,IAAI,CAAC;IAC5B;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}