{"ast":null,"code":"/**\r\n * 头像工具函数\r\n * 这个文件包含与用户头像相关的工具函数\r\n */\n\n// 默认头像颜色数组 - Discord风格的颜色\nconst avatarColors = ['7289da',\n// Discord蓝\n'43b581',\n// Discord绿\n'faa61a',\n// Discord黄\n'f04747',\n// Discord红\n'593695',\n// Discord紫\n'747f8d',\n// Discord灰\n'2c2f33',\n// Discord深灰\n'99aab5',\n// Discord浅灰\n'ff6b6b',\n// 珊瑚红\n'4ecdc4',\n// 薄荷绿\n'45b7d1',\n// 天空蓝\n'a67f5d',\n// 暖棕色\n'b056db',\n// 梦幻紫\n'f7d794' // 温暖黄\n];\n\n// 预定义的头像样式\nconst avatarStyles = ['micah',\n// 现代简约风格\n'avataaars',\n// 卡通人物\n'bottts',\n// 机器人风格\n'personas',\n// 像素艺术风格\n'thumbs',\n// 拇指风格\n'lorelei',\n// 可爱风格\n'notionists',\n// 商务风格\n'adventurer',\n// 冒险家风格\n'fun-emoji',\n// 表情符号风格\n'big-smile' // 微笑风格\n];\n\n/**\r\n * 获取基于用户名的随机头像URL\r\n * @param {string} username - 用户名\r\n * @param {number} size - 头像尺寸（像素）\r\n * @returns {string} - 头像URL\r\n */\nexport function getRandomAvatarUrl(username, size = 200) {\n  if (!username || username.trim() === '') {\n    return getFallbackAvatarUrl();\n  }\n  try {\n    // 基于用户名生成一个一致的随机数，这样同一用户名总是得到相同的头像\n    const randomIndex = Math.abs(hashCode(username)) % avatarColors.length;\n    const color = avatarColors[randomIndex];\n\n    // 使用UI Avatars服务生成基于文字的头像\n    // 这个服务会根据用户名生成一个包含用户名首字母的头像\n    return `https://ui-avatars.com/api/?name=${encodeURIComponent(username)}&background=${color}&color=fff&size=${size}`;\n  } catch (error) {\n    console.error('生成头像URL失败:', error);\n    return getFallbackAvatarUrl();\n  }\n}\n\n/**\r\n * 获取随机的默认头像URL\r\n * @returns {string} - 随机默认头像URL\r\n */\nexport function getRandomDefaultAvatarUrl() {\n  try {\n    // 随机选择一个颜色\n    const randomIndex = Math.floor(Math.random() * avatarColors.length);\n    const color = avatarColors[randomIndex];\n\n    // 随机选择一个样式\n    const styleIndex = Math.floor(Math.random() * avatarStyles.length);\n    const style = avatarStyles[styleIndex];\n\n    // 生成一个随机的种子\n    const seed = Math.floor(Math.random() * 10000);\n\n    // 使用DiceBear API生成多样化的头像\n    return `https://api.dicebear.com/6.x/${style}/svg?seed=${seed}&backgroundColor=${color}`;\n  } catch (error) {\n    console.error('生成随机头像URL失败:', error);\n    return getFallbackAvatarUrl();\n  }\n}\n\n/**\r\n * 获取备用头像URL（当其他方法失败时使用）\r\n * @returns {string} - 备用头像URL\r\n */\nexport function getFallbackAvatarUrl() {\n  // 使用一个简单的灰色头像作为备用\n  return 'https://ui-avatars.com/api/?name=用户&background=747f8d&color=fff&size=200';\n}\n\n/**\r\n * 简单的字符串哈希函数\r\n * @param {string} str - 要哈希的字符串\r\n * @returns {number} - 哈希值\r\n */\nfunction hashCode(str) {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = (hash << 5) - hash + str.charCodeAt(i);\n    hash |= 0; // 转换为32位整数\n  }\n  return hash;\n}\n\n/**\r\n * 检查URL是否是有效的图片URL\r\n * @param {string} url - 要检查的URL\r\n * @returns {boolean} - 是否是有效的图片URL\r\n */\nexport function isValidImageUrl(url) {\n  if (!url) return false;\n  return /\\.(jpeg|jpg|gif|png|svg)$/i.test(url) || url.startsWith('https://ui-avatars.com/') || url.startsWith('https://avatars.dicebear.com/');\n}\n\n/**\r\n * 处理头像加载错误\r\n * @param {Event} event - 错误事件\r\n */\nexport function handleAvatarError(event) {\n  // 当头像加载失败时，替换为备用头像\n  event.target.src = getFallbackAvatarUrl();\n}","map":{"version":3,"names":["avatarColors","avatarStyles","getRandomAvatarUrl","username","size","trim","getFallbackAvatarUrl","randomIndex","Math","abs","hashCode","length","color","encodeURIComponent","error","console","getRandomDefaultAvatarUrl","floor","random","styleIndex","style","seed","str","hash","i","charCodeAt","isValidImageUrl","url","test","startsWith","handleAvatarError","event","target","src"],"sources":["C:/Users/Administrator/Desktop/discord-chat-app/fack/just-do-it/src/utils/avatarUtils.js"],"sourcesContent":["/**\r\n * 头像工具函数\r\n * 这个文件包含与用户头像相关的工具函数\r\n */\r\n\r\n// 默认头像颜色数组 - Discord风格的颜色\r\nconst avatarColors = [\r\n  '7289da', // Discord蓝\r\n  '43b581', // Discord绿\r\n  'faa61a', // Discord黄\r\n  'f04747', // Discord红\r\n  '593695', // Discord紫\r\n  '747f8d',  // Discord灰\r\n  '2c2f33', // Discord深灰\r\n  '99aab5',  // Discord浅灰\r\n  'ff6b6b', // 珊瑚红\r\n  '4ecdc4', // 薄荷绿\r\n  '45b7d1', // 天空蓝\r\n  'a67f5d', // 暖棕色\r\n  'b056db', // 梦幻紫\r\n  'f7d794'  // 温暖黄\r\n];\r\n\r\n// 预定义的头像样式\r\nconst avatarStyles = [\r\n  'micah',      // 现代简约风格\r\n  'avataaars',  // 卡通人物\r\n  'bottts',     // 机器人风格\r\n  'personas',   // 像素艺术风格\r\n  'thumbs',     // 拇指风格\r\n  'lorelei',    // 可爱风格\r\n  'notionists', // 商务风格\r\n  'adventurer', // 冒险家风格\r\n  'fun-emoji',  // 表情符号风格\r\n  'big-smile'   // 微笑风格\r\n];\r\n\r\n/**\r\n * 获取基于用户名的随机头像URL\r\n * @param {string} username - 用户名\r\n * @param {number} size - 头像尺寸（像素）\r\n * @returns {string} - 头像URL\r\n */\r\nexport function getRandomAvatarUrl(username, size = 200) {\r\n  if (!username || username.trim() === '') {\r\n    return getFallbackAvatarUrl();\r\n  }\r\n  \r\n  try {\r\n    // 基于用户名生成一个一致的随机数，这样同一用户名总是得到相同的头像\r\n    const randomIndex = Math.abs(hashCode(username)) % avatarColors.length;\r\n    const color = avatarColors[randomIndex];\r\n    \r\n    // 使用UI Avatars服务生成基于文字的头像\r\n    // 这个服务会根据用户名生成一个包含用户名首字母的头像\r\n    return `https://ui-avatars.com/api/?name=${encodeURIComponent(username)}&background=${color}&color=fff&size=${size}`;\r\n  } catch (error) {\r\n    console.error('生成头像URL失败:', error);\r\n    return getFallbackAvatarUrl();\r\n  }\r\n}\r\n\r\n/**\r\n * 获取随机的默认头像URL\r\n * @returns {string} - 随机默认头像URL\r\n */\r\nexport function getRandomDefaultAvatarUrl() {\r\n  try {\r\n    // 随机选择一个颜色\r\n    const randomIndex = Math.floor(Math.random() * avatarColors.length);\r\n    const color = avatarColors[randomIndex];\r\n    \r\n    // 随机选择一个样式\r\n    const styleIndex = Math.floor(Math.random() * avatarStyles.length);\r\n    const style = avatarStyles[styleIndex];\r\n    \r\n    // 生成一个随机的种子\r\n    const seed = Math.floor(Math.random() * 10000);\r\n    \r\n    // 使用DiceBear API生成多样化的头像\r\n    return `https://api.dicebear.com/6.x/${style}/svg?seed=${seed}&backgroundColor=${color}`;\r\n  } catch (error) {\r\n    console.error('生成随机头像URL失败:', error);\r\n    return getFallbackAvatarUrl();\r\n  }\r\n}\r\n\r\n/**\r\n * 获取备用头像URL（当其他方法失败时使用）\r\n * @returns {string} - 备用头像URL\r\n */\r\nexport function getFallbackAvatarUrl() {\r\n  // 使用一个简单的灰色头像作为备用\r\n  return 'https://ui-avatars.com/api/?name=用户&background=747f8d&color=fff&size=200';\r\n}\r\n\r\n/**\r\n * 简单的字符串哈希函数\r\n * @param {string} str - 要哈希的字符串\r\n * @returns {number} - 哈希值\r\n */\r\nfunction hashCode(str) {\r\n  let hash = 0;\r\n  for (let i = 0; i < str.length; i++) {\r\n    hash = ((hash << 5) - hash) + str.charCodeAt(i);\r\n    hash |= 0; // 转换为32位整数\r\n  }\r\n  return hash;\r\n}\r\n\r\n/**\r\n * 检查URL是否是有效的图片URL\r\n * @param {string} url - 要检查的URL\r\n * @returns {boolean} - 是否是有效的图片URL\r\n */\r\nexport function isValidImageUrl(url) {\r\n  if (!url) return false;\r\n  return /\\.(jpeg|jpg|gif|png|svg)$/i.test(url) || \r\n         url.startsWith('https://ui-avatars.com/') || \r\n         url.startsWith('https://avatars.dicebear.com/');\r\n}\r\n\r\n/**\r\n * 处理头像加载错误\r\n * @param {Event} event - 错误事件\r\n */\r\nexport function handleAvatarError(event) {\r\n  // 当头像加载失败时，替换为备用头像\r\n  event.target.src = getFallbackAvatarUrl();\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}