{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport UserNameInput from './UserNameInput.vue';\nimport ThemeSelector from './ThemeSelector.vue';\nimport UserProfileEditor from './UserProfileEditor.vue';\nimport axios from 'axios';\nimport { handleAvatarError, getFallbackAvatarUrl } from '../../utils/avatarUtils';\nimport { ref, onMounted, onUnmounted } from 'vue';\nexport default {\n  name: 'ChatContainer',\n  components: {\n    UserNameInput,\n    ThemeSelector,\n    UserProfileEditor\n  },\n  props: {\n    currentUser: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props, {\n    emit\n  }) {\n    const messages = ref([]);\n    const newMessage = ref('');\n    const messagesList = ref(null);\n    const apiUrl = 'http://localhost:3001/api/messages';\n    const usersApiUrl = 'http://localhost:3001/api/users';\n    const username = ref(props.currentUser.username || '');\n    const userAvatar = ref(props.currentUser.avatar || '');\n    const onlineUsers = ref([]);\n    const pollingInterval = ref(null);\n    const onlinePollingInterval = ref(null);\n    const currentTheme = ref(localStorage.getItem('chat-theme') || 'discord');\n    const showProfileEditor = ref(false);\n    const currentUserInfo = ref({});\n\n    // 获取消息\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get(apiUrl);\n        messages.value = response.data;\n        scrollToBottom();\n      } catch (error) {\n        console.error('获取消息失败:', error);\n      }\n    };\n\n    // 发送消息\n    const sendMessage = async () => {\n      if (!newMessage.value.trim()) return;\n      try {\n        const response = await axios.post(apiUrl, {\n          sender: username.value,\n          content: newMessage.value,\n          avatar: userAvatar.value\n        });\n        messages.value.push(response.data);\n        newMessage.value = '';\n        scrollToBottom();\n      } catch (error) {\n        console.error('发送消息失败:', error);\n      }\n    };\n\n    // 滚动到底部\n    const scrollToBottom = () => {\n      if (messagesList.value) {\n        setTimeout(() => {\n          messagesList.value.scrollTop = messagesList.value.scrollHeight;\n        }, 100);\n      }\n    };\n\n    // 格式化时间\n    const formatTime = timestamp => {\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString('zh-CN', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    };\n\n    // 设置定时获取消息\n    let messageInterval;\n    onMounted(() => {\n      fetchMessages();\n      messageInterval = setInterval(fetchMessages, 3000);\n    });\n    onUnmounted(() => {\n      if (messageInterval) {\n        clearInterval(messageInterval);\n      }\n    });\n    return {\n      messages,\n      newMessage,\n      messagesList,\n      sendMessage,\n      formatTime,\n      handleAvatarError,\n      getFallbackAvatarUrl,\n      username,\n      userAvatar,\n      onlineUsers,\n      usersApiUrl,\n      pollingInterval,\n      onlinePollingInterval,\n      currentTheme,\n      showProfileEditor,\n      currentUserInfo\n    };\n  },\n  created() {\n    // 从localStorage获取用户信息\n    const savedUsername = localStorage.getItem('chat-username');\n    const savedAvatar = localStorage.getItem('chat-avatar');\n    if (savedUsername && !this.username) {\n      this.username = savedUsername;\n    }\n    if (savedAvatar && !this.userAvatar) {\n      this.userAvatar = savedAvatar;\n    } else if (!this.userAvatar) {\n      // 设置默认头像\n      this.userAvatar = '/avatars/default.png';\n      localStorage.setItem('chat-avatar', this.userAvatar);\n    }\n\n    // 如果用户已登录，注册用户\n    if (this.username) {\n      this.registerUser();\n    }\n  },\n  mounted() {\n    // 如果用户已登录，获取消息和在线用户\n    if (this.username) {\n      this.fetchOnlineUsers();\n\n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    }\n\n    // 应用保存的主题\n    document.body.classList.add(`theme-${this.currentTheme}`);\n  },\n  beforeUnmount() {\n    // 清除轮询\n    clearInterval(this.pollingInterval);\n    clearInterval(this.onlinePollingInterval);\n  },\n  methods: {\n    // 设置用户名和头像\n    setUsername(userData) {\n      this.username = userData.username;\n      this.userAvatar = userData.avatar;\n\n      // 保存到localStorage\n      localStorage.setItem('chat-username', this.username);\n      localStorage.setItem('chat-avatar', this.userAvatar);\n\n      // 注册用户\n      this.registerUser();\n\n      // 获取消息和在线用户\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n\n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    },\n    // 注册用户\n    async registerUser() {\n      try {\n        await axios.post(`${this.usersApiUrl}/register`, {\n          username: this.username,\n          avatar: this.userAvatar\n        });\n        console.log('用户注册成功');\n      } catch (error) {\n        console.error('用户注册失败:', error);\n      }\n    },\n    // 获取在线用户\n    async fetchOnlineUsers() {\n      try {\n        const response = await axios.get(`${this.usersApiUrl}/online`);\n        this.onlineUsers = response.data;\n      } catch (error) {\n        console.error('获取在线用户失败:', error);\n        // 开发阶段如果API未就绪，使用模拟数据\n        if (this.onlineUsers.length === 0) {\n          this.onlineUsers = [{\n            username: this.username,\n            avatar: this.userAvatar\n          }];\n        }\n      }\n    },\n    // 打开个人资料编辑器\n    openProfileEditor() {\n      this.showProfileEditor = true;\n      this.currentUserInfo = {\n        username: this.username,\n        avatar: this.userAvatar\n      };\n    },\n    // 关闭个人资料编辑器\n    closeProfileEditor() {\n      this.showProfileEditor = false;\n    },\n    // 更新用户信息\n    updateProfile(updatedInfo) {\n      this.username = updatedInfo.username;\n      this.userAvatar = updatedInfo.avatar;\n\n      // 保存到localStorage\n      localStorage.setItem('chat-username', this.username);\n      localStorage.setItem('chat-avatar', this.userAvatar);\n\n      // 注册用户\n      this.registerUser();\n\n      // 获取消息和在线用户\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n\n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    }\n  }\n};","map":{"version":3,"names":["UserNameInput","ThemeSelector","UserProfileEditor","axios","handleAvatarError","getFallbackAvatarUrl","ref","onMounted","onUnmounted","name","components","props","currentUser","type","Object","required","setup","emit","messages","newMessage","messagesList","apiUrl","usersApiUrl","username","userAvatar","avatar","onlineUsers","pollingInterval","onlinePollingInterval","currentTheme","localStorage","getItem","showProfileEditor","currentUserInfo","fetchMessages","response","get","value","data","scrollToBottom","error","console","sendMessage","trim","post","sender","content","push","setTimeout","scrollTop","scrollHeight","formatTime","timestamp","date","Date","toLocaleTimeString","hour","minute","messageInterval","setInterval","clearInterval","created","savedUsername","savedAvatar","setItem","registerUser","mounted","fetchOnlineUsers","document","body","classList","add","beforeUnmount","methods","setUsername","userData","log","length","openProfileEditor","closeProfileEditor","updateProfile","updatedInfo"],"sources":["C:\\Users\\Administrator\\Desktop\\discord-chat-app\\fack\\just-do-it\\src\\components\\chat\\ChatContainer.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <!-- 用户名输入界面，当用户未设置昵称时显示 -->\r\n    <UserNameInput \r\n      v-if=\"!username\" \r\n      @set-username=\"setUsername\" \r\n    />\r\n    \r\n    <!-- 聊天界面，当用户已设置昵称时显示 -->\r\n    <div v-else class=\"chat-interface\">\r\n      <header class=\"chat-header\">\r\n        <h2 class=\"chat-title\">Vue聊天室</h2>\r\n        <div class=\"user-info-container\">\r\n          <ThemeSelector />\r\n          <div class=\"user-info\">\r\n            <img \r\n              :src=\"userAvatar || getFallbackAvatarUrl()\" \r\n              alt=\"用户头像\" \r\n              class=\"user-avatar\"\r\n              @error=\"handleAvatarError\"\r\n              @click=\"openProfileEditor\" \r\n            >\r\n            <span class=\"current-username\">{{ username }}</span>\r\n          </div>\r\n        </div>\r\n      </header>\r\n      \r\n      <div class=\"chat-main\">\r\n        <div class=\"messages-container\">\r\n          <div class=\"messages-list\" ref=\"messagesList\">\r\n            <div v-for=\"message in messages\" :key=\"message.id\" class=\"message-item\">\r\n              <div class=\"message-avatar\">\r\n                <img \r\n                  :src=\"message.avatar || getFallbackAvatarUrl()\" \r\n                  :alt=\"message.sender\"\r\n                  @error=\"handleAvatarError\"\r\n                >\r\n              </div>\r\n              <div class=\"message-content\">\r\n                <div class=\"message-header\">\r\n                  <span class=\"message-sender\">{{ message.sender }}</span>\r\n                  <span class=\"message-time\">{{ formatTime(message.timestamp) }}</span>\r\n                </div>\r\n                <div class=\"message-text\">{{ message.content }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"input-container\">\r\n          <div class=\"input-wrapper\">\r\n            <input \r\n              type=\"text\" \r\n              v-model=\"newMessage\" \r\n              @keyup.enter=\"sendMessage\"\r\n              placeholder=\"发送消息...\"\r\n              class=\"message-input\"\r\n            >\r\n            <button class=\"send-button\" @click=\"sendMessage\">\r\n              发送\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 个人资料编辑器 -->\r\n    <UserProfileEditor \r\n      :isOpen=\"showProfileEditor\"\r\n      :currentUserInfo=\"currentUserInfo\"\r\n      @close=\"closeProfileEditor\"\r\n      @update-profile=\"updateProfile\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport UserNameInput from './UserNameInput.vue';\r\nimport ThemeSelector from './ThemeSelector.vue';\r\nimport UserProfileEditor from './UserProfileEditor.vue';\r\nimport axios from 'axios';\r\nimport { handleAvatarError, getFallbackAvatarUrl } from '../../utils/avatarUtils';\r\nimport { ref, onMounted, onUnmounted } from 'vue';\r\n\r\nexport default {\r\n  name: 'ChatContainer',\r\n  components: {\r\n    UserNameInput,\r\n    ThemeSelector,\r\n    UserProfileEditor\r\n  },\r\n  props: {\r\n    currentUser: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  setup(props, { emit }) {\r\n    const messages = ref([]);\r\n    const newMessage = ref('');\r\n    const messagesList = ref(null);\r\n    const apiUrl = 'http://localhost:3001/api/messages';\r\n    const usersApiUrl = 'http://localhost:3001/api/users';\r\n    const username = ref(props.currentUser.username || '');\r\n    const userAvatar = ref(props.currentUser.avatar || '');\r\n    const onlineUsers = ref([]);\r\n    const pollingInterval = ref(null);\r\n    const onlinePollingInterval = ref(null);\r\n    const currentTheme = ref(localStorage.getItem('chat-theme') || 'discord');\r\n    const showProfileEditor = ref(false);\r\n    const currentUserInfo = ref({});\r\n\r\n    // 获取消息\r\n    const fetchMessages = async () => {\r\n      try {\r\n        const response = await axios.get(apiUrl);\r\n        messages.value = response.data;\r\n        scrollToBottom();\r\n      } catch (error) {\r\n        console.error('获取消息失败:', error);\r\n      }\r\n    };\r\n\r\n    // 发送消息\r\n    const sendMessage = async () => {\r\n      if (!newMessage.value.trim()) return;\r\n      \r\n      try {\r\n        const response = await axios.post(apiUrl, {\r\n          sender: username.value,\r\n          content: newMessage.value,\r\n          avatar: userAvatar.value\r\n        });\r\n        \r\n        messages.value.push(response.data);\r\n        newMessage.value = '';\r\n        scrollToBottom();\r\n      } catch (error) {\r\n        console.error('发送消息失败:', error);\r\n      }\r\n    };\r\n\r\n    // 滚动到底部\r\n    const scrollToBottom = () => {\r\n      if (messagesList.value) {\r\n        setTimeout(() => {\r\n          messagesList.value.scrollTop = messagesList.value.scrollHeight;\r\n        }, 100);\r\n      }\r\n    };\r\n\r\n    // 格式化时间\r\n    const formatTime = (timestamp) => {\r\n      const date = new Date(timestamp);\r\n      return date.toLocaleTimeString('zh-CN', {\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      });\r\n    };\r\n\r\n    // 设置定时获取消息\r\n    let messageInterval;\r\n    onMounted(() => {\r\n      fetchMessages();\r\n      messageInterval = setInterval(fetchMessages, 3000);\r\n    });\r\n\r\n    onUnmounted(() => {\r\n      if (messageInterval) {\r\n        clearInterval(messageInterval);\r\n      }\r\n    });\r\n\r\n    return {\r\n      messages,\r\n      newMessage,\r\n      messagesList,\r\n      sendMessage,\r\n      formatTime,\r\n      handleAvatarError,\r\n      getFallbackAvatarUrl,\r\n      username,\r\n      userAvatar,\r\n      onlineUsers,\r\n      usersApiUrl,\r\n      pollingInterval,\r\n      onlinePollingInterval,\r\n      currentTheme,\r\n      showProfileEditor,\r\n      currentUserInfo\r\n    };\r\n  },\r\n  created() {\r\n    // 从localStorage获取用户信息\r\n    const savedUsername = localStorage.getItem('chat-username');\r\n    const savedAvatar = localStorage.getItem('chat-avatar');\r\n    \r\n    if (savedUsername && !this.username) {\r\n      this.username = savedUsername;\r\n    }\r\n    \r\n    if (savedAvatar && !this.userAvatar) {\r\n      this.userAvatar = savedAvatar;\r\n    } else if (!this.userAvatar) {\r\n      // 设置默认头像\r\n      this.userAvatar = '/avatars/default.png';\r\n      localStorage.setItem('chat-avatar', this.userAvatar);\r\n    }\r\n    \r\n    // 如果用户已登录，注册用户\r\n    if (this.username) {\r\n      this.registerUser();\r\n    }\r\n  },\r\n  mounted() {\r\n    // 如果用户已登录，获取消息和在线用户\r\n    if (this.username) {\r\n      this.fetchOnlineUsers();\r\n      \r\n      // 设置轮询\r\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\r\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\r\n    }\r\n    \r\n    // 应用保存的主题\r\n    document.body.classList.add(`theme-${this.currentTheme}`);\r\n  },\r\n  beforeUnmount() {\r\n    // 清除轮询\r\n    clearInterval(this.pollingInterval);\r\n    clearInterval(this.onlinePollingInterval);\r\n  },\r\n  methods: {\r\n    // 设置用户名和头像\r\n    setUsername(userData) {\r\n      this.username = userData.username;\r\n      this.userAvatar = userData.avatar;\r\n      \r\n      // 保存到localStorage\r\n      localStorage.setItem('chat-username', this.username);\r\n      localStorage.setItem('chat-avatar', this.userAvatar);\r\n      \r\n      // 注册用户\r\n      this.registerUser();\r\n      \r\n      // 获取消息和在线用户\r\n      this.fetchMessages();\r\n      this.fetchOnlineUsers();\r\n      \r\n      // 设置轮询\r\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\r\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\r\n    },\r\n    \r\n    // 注册用户\r\n    async registerUser() {\r\n      try {\r\n        await axios.post(`${this.usersApiUrl}/register`, {\r\n          username: this.username,\r\n          avatar: this.userAvatar\r\n        });\r\n        console.log('用户注册成功');\r\n      } catch (error) {\r\n        console.error('用户注册失败:', error);\r\n      }\r\n    },\r\n    \r\n    // 获取在线用户\r\n    async fetchOnlineUsers() {\r\n      try {\r\n        const response = await axios.get(`${this.usersApiUrl}/online`);\r\n        this.onlineUsers = response.data;\r\n      } catch (error) {\r\n        console.error('获取在线用户失败:', error);\r\n        // 开发阶段如果API未就绪，使用模拟数据\r\n        if (this.onlineUsers.length === 0) {\r\n          this.onlineUsers = [\r\n            { username: this.username, avatar: this.userAvatar }\r\n          ];\r\n        }\r\n      }\r\n    },\r\n    // 打开个人资料编辑器\r\n    openProfileEditor() {\r\n      this.showProfileEditor = true;\r\n      this.currentUserInfo = {\r\n        username: this.username,\r\n        avatar: this.userAvatar\r\n      };\r\n    },\r\n    // 关闭个人资料编辑器\r\n    closeProfileEditor() {\r\n      this.showProfileEditor = false;\r\n    },\r\n    // 更新用户信息\r\n    updateProfile(updatedInfo) {\r\n      this.username = updatedInfo.username;\r\n      this.userAvatar = updatedInfo.avatar;\r\n      \r\n      // 保存到localStorage\r\n      localStorage.setItem('chat-username', this.username);\r\n      localStorage.setItem('chat-avatar', this.userAvatar);\r\n      \r\n      // 注册用户\r\n      this.registerUser();\r\n      \r\n      // 获取消息和在线用户\r\n      this.fetchMessages();\r\n      this.fetchOnlineUsers();\r\n      \r\n      // 设置轮询\r\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\r\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container {\r\n  flex: 1;\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: var(--chat-background); /* 使用主题变量 */\r\n  color: var(--text-color); /* 使用主题变量 */\r\n  position: relative;\r\n  z-index: 1;\r\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);\r\n  background-image: var(--background-image); /* 使用主题变量中的背景图案 */\r\n  background-repeat: repeat;\r\n  background-size: 100px 100px; /* 设置背景图案大小 */\r\n}\r\n\r\n.chat-interface {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  backdrop-filter: blur(5px); /* 添加模糊效果 */\r\n}\r\n\r\n.chat-header {\r\n  padding: 1rem 1.5rem;\r\n  background-color: var(--primary-color); /* 使用主题变量 */\r\n  color: var(--header-color); /* 使用主题变量 */\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  box-shadow: var(--header-shadow);\r\n  position: relative;\r\n  z-index: 2;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1); /* 添加边框 */\r\n  background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.05), transparent); /* 添加渐变效果 */\r\n}\r\n\r\n.chat-title {\r\n  margin: 0;\r\n  font-size: 1.25rem;\r\n  font-weight: 600;\r\n  letter-spacing: 0.5px;\r\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2); /* 添加文字阴影 */\r\n}\r\n\r\n.user-info-container {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 1rem;\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  padding: 0.5rem 0.75rem;\r\n  border-radius: 2rem;\r\n  backdrop-filter: blur(5px);\r\n  border: 1px solid rgba(255, 255, 255, 0.05); /* 添加细微边框 */\r\n  transition: all 0.2s ease; /* 添加过渡效果 */\r\n}\r\n\r\n.user-info:hover {\r\n  background-color: rgba(255, 255, 255, 0.15); /* 悬停时背景变亮 */\r\n  transform: translateY(-1px); /* 悬停时轻微上移 */\r\n}\r\n\r\n.user-avatar {\r\n  width: 32px; /* 增加头像尺寸 */\r\n  height: 32px; /* 增加头像尺寸 */\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  border: var(--avatar-border, 1px solid rgba(255, 255, 255, 0.3));\r\n  box-shadow: var(--avatar-shadow, 0 2px 4px rgba(0, 0, 0, 0.2));\r\n  transition: transform 0.2s ease; /* 添加过渡效果 */\r\n}\r\n\r\n.user-avatar:hover {\r\n  transform: scale(1.1); /* 悬停时放大 */\r\n}\r\n\r\n.current-username {\r\n  margin-left: 0.5rem;\r\n  font-weight: 500;\r\n  color: var(--text-color);\r\n  mix-blend-mode: overlay;\r\n}\r\n\r\n.chat-main {\r\n  display: flex;\r\n  flex: 1;\r\n  overflow: hidden;\r\n  position: relative;\r\n  background-image: var(--background-image); /* 使用主题变量中的背景图案 */\r\n  background-repeat: repeat;\r\n  background-size: 100px 100px; /* 设置背景图案大小 */\r\n}\r\n\r\n.messages-container {\r\n  flex: 1;\r\n  overflow: hidden;\r\n  padding: 20px;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.messages-list {\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  padding-right: 8px;\r\n}\r\n\r\n.messages-list::-webkit-scrollbar {\r\n  width: 8px;\r\n}\r\n\r\n.messages-list::-webkit-scrollbar-track {\r\n  background: transparent;\r\n}\r\n\r\n.messages-list::-webkit-scrollbar-thumb {\r\n  background-color: var(--background-tertiary);\r\n  border-radius: 4px;\r\n}\r\n\r\n.message-item {\r\n  display: flex;\r\n  margin-bottom: 16px;\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.message-item:hover {\r\n  background-color: var(--background-modifier-hover);\r\n}\r\n\r\n.message-avatar {\r\n  margin-right: 16px;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.message-avatar img {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n}\r\n\r\n.message-content {\r\n  flex: 1;\r\n  min-width: 0;\r\n}\r\n\r\n.message-header {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.message-sender {\r\n  font-weight: 500;\r\n  color: var(--header-primary);\r\n  margin-right: 8px;\r\n}\r\n\r\n.message-time {\r\n  font-size: 0.8rem;\r\n  color: var(--text-muted);\r\n}\r\n\r\n.message-text {\r\n  color: var(--text-normal);\r\n  word-wrap: break-word;\r\n  line-height: 1.4;\r\n}\r\n\r\n.input-container {\r\n  padding: 16px;\r\n  background-color: var(--background-secondary);\r\n  border-top: 1px solid var(--border-color);\r\n}\r\n\r\n.input-wrapper {\r\n  display: flex;\r\n  gap: 12px;\r\n  padding: 0 16px;\r\n  background-color: var(--background-tertiary);\r\n  border-radius: 8px;\r\n}\r\n\r\n.message-input {\r\n  flex: 1;\r\n  padding: 12px 0;\r\n  background: none;\r\n  border: none;\r\n  color: var(--text-normal);\r\n  font-size: 1rem;\r\n  outline: none;\r\n}\r\n\r\n.message-input::placeholder {\r\n  color: var(--text-muted);\r\n}\r\n\r\n.send-button {\r\n  padding: 8px 16px;\r\n  background: none;\r\n  border: none;\r\n  color: var(--text-link);\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: color 0.2s;\r\n}\r\n\r\n.send-button:hover {\r\n  color: var(--header-primary);\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .chat-container {\r\n    height: auto;\r\n    flex: 1;\r\n  }\r\n  \r\n  .messages-container {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .message-avatar img {\r\n    width: 32px;\r\n    height: 32px;\r\n  }\r\n  \r\n  .input-container {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .input-wrapper {\r\n    padding: 0 12px;\r\n  }\r\n  \r\n  .message-input {\r\n    padding: 10px 0;\r\n  }\r\n  \r\n  .send-button {\r\n    padding: 6px 12px;\r\n  }\r\n}\r\n</style> \r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}