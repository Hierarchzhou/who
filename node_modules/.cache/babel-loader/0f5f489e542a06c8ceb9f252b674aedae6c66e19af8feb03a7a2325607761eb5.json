{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport LoginForm from './components/auth/LoginForm.vue';\nimport ChatContainer from './components/chat/ChatContainer.vue';\nimport ServerList from './components/chat/ServerList.vue';\nimport ChannelList from './components/chat/ChannelList.vue';\nimport OnlineUsersSidebar from './components/chat/OnlineUsersSidebar.vue';\nimport UserProfileEditor from './components/chat/UserProfileEditor.vue';\nexport default {\n  name: 'App',\n  components: {\n    LoginForm,\n    ChatContainer,\n    ServerList,\n    ChannelList,\n    OnlineUsersSidebar,\n    UserProfileEditor\n  },\n  data() {\n    return {\n      username: '',\n      avatar: '',\n      onlineUsers: [],\n      showProfileEditor: false,\n      currentServerId: 'home',\n      currentChannelId: 'general',\n      currentServer: {\n        id: 'home',\n        name: '主页'\n      },\n      currentChannel: {\n        id: 'general',\n        name: 'general',\n        type: 'text'\n      },\n      // 服务器模板\n      serverTemplate: {\n        name: 'general',\n        description: 'Welcome to the chat channel!',\n        channels: [{\n          id: 'general',\n          name: 'general',\n          type: 'text',\n          description: 'General chat channel for everyone'\n        }],\n        roles: [{\n          id: 'admin',\n          name: '管理员',\n          permissions: ['manage_server', 'manage_channels', 'manage_roles']\n        }, {\n          id: 'member',\n          name: '成员',\n          permissions: ['send_messages', 'read_messages']\n        }],\n        categories: [{\n          id: 'text-channels',\n          name: '文字频道',\n          type: 'category',\n          channels: ['general']\n        }]\n      }\n    };\n  },\n  created() {\n    // 从localStorage获取用户信息\n    const savedUsername = localStorage.getItem('chat-username');\n    const savedAvatar = localStorage.getItem('chat-avatar');\n    if (savedUsername) {\n      this.username = savedUsername;\n      this.avatar = savedAvatar || '';\n    }\n\n    // 应用保存的主题\n    const savedTheme = localStorage.getItem('chat-theme') || 'discord';\n    document.body.classList.add(`theme-${savedTheme}`);\n\n    // 恢复上次选择的服务器\n    const savedServerId = localStorage.getItem('current-server-id');\n    if (savedServerId) {\n      this.currentServerId = savedServerId;\n    }\n\n    // 初始化默认服务器\n    const servers = this.getServers();\n    if (servers.length === 0) {\n      const defaultServer = this.createNewServer('测试服务器');\n      this.currentServerId = defaultServer.id;\n      this.currentServer = defaultServer;\n    } else if (this.currentServerId === 'home') {\n      // 如果当前是主页，切换到第一个服务器\n      this.currentServerId = servers[0].id;\n      this.currentServer = servers[0];\n    }\n  },\n  methods: {\n    setUsername(userData) {\n      this.username = userData.username;\n      this.avatar = userData.avatar || '';\n\n      // 保存用户信息到localStorage\n      localStorage.setItem('chat-username', this.username);\n      if (this.avatar) {\n        localStorage.setItem('chat-avatar', this.avatar);\n      }\n    },\n    // 更新在线用户列表\n    updateOnlineUsers(users) {\n      this.onlineUsers = users;\n    },\n    // 打开个人资料编辑器\n    openProfileEditor() {\n      this.showProfileEditor = true;\n    },\n    // 关闭个人资料编辑器\n    closeProfileEditor() {\n      this.showProfileEditor = false;\n    },\n    // 更新个人资料\n    updateProfile(updatedProfile) {\n      this.username = updatedProfile.username;\n      this.avatar = updatedProfile.avatar;\n      this.showProfileEditor = false;\n\n      // 保存到localStorage\n      localStorage.setItem('chat-username', this.username);\n      localStorage.setItem('chat-avatar', this.avatar);\n    },\n    // 切换服务器\n    changeServer(server) {\n      this.currentServerId = server.id;\n      this.currentServer = server;\n\n      // 保存当前服务器ID到localStorage\n      localStorage.setItem('current-server-id', server.id);\n    },\n    // 显示添加服务器对话框\n    showAddServerDialog() {\n      // 创建一个新的服务器\n      const newServer = this.createNewServer('新服务器');\n      this.changeServer(newServer);\n    },\n    // 创建新服务器\n    createNewServer(serverName) {\n      const serverId = 'server-' + Date.now();\n      const newServer = {\n        id: serverId,\n        name: serverName,\n        icon: null,\n        description: this.serverTemplate.description,\n        channels: [...this.serverTemplate.channels],\n        roles: [...this.serverTemplate.roles],\n        categories: [...this.serverTemplate.categories],\n        members: [],\n        createdAt: new Date().toISOString(),\n        ownerId: this.username\n      };\n\n      // 保存服务器信息到 localStorage\n      const servers = JSON.parse(localStorage.getItem('chat-servers') || '[]');\n      servers.push(newServer);\n      localStorage.setItem('chat-servers', JSON.stringify(servers));\n      return newServer;\n    },\n    // 获取所有服务器\n    getServers() {\n      return JSON.parse(localStorage.getItem('chat-servers') || '[]');\n    },\n    // 更新服务器信息\n    updateServer(server) {\n      const servers = this.getServers();\n      const index = servers.findIndex(s => s.id === server.id);\n      if (index !== -1) {\n        servers[index] = server;\n        localStorage.setItem('chat-servers', JSON.stringify(servers));\n      }\n    },\n    // 显示服务器浏览器\n    showExploreServers() {\n      // TODO: 实现服务器浏览功能\n      console.log('显示服务器浏览器');\n    },\n    changeChannel(channel) {\n      this.currentChannelId = channel.id;\n      this.currentChannel = channel;\n    },\n    // 切换用户菜单\n    toggleUserMenu() {\n      // 这里可以添加额外的用户菜单逻辑\n      console.log('Toggle user menu');\n    }\n  }\n};","map":{"version":3,"names":["LoginForm","ChatContainer","ServerList","ChannelList","OnlineUsersSidebar","UserProfileEditor","name","components","data","username","avatar","onlineUsers","showProfileEditor","currentServerId","currentChannelId","currentServer","id","currentChannel","type","serverTemplate","description","channels","roles","permissions","categories","created","savedUsername","localStorage","getItem","savedAvatar","savedTheme","document","body","classList","add","savedServerId","servers","getServers","length","defaultServer","createNewServer","methods","setUsername","userData","setItem","updateOnlineUsers","users","openProfileEditor","closeProfileEditor","updateProfile","updatedProfile","changeServer","server","showAddServerDialog","newServer","serverName","serverId","Date","now","icon","members","createdAt","toISOString","ownerId","JSON","parse","push","stringify","updateServer","index","findIndex","s","showExploreServers","console","log","changeChannel","channel","toggleUserMenu"],"sources":["C:\\Users\\Administrator\\Desktop\\who\\src\\App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div v-if=\"!username\" class=\"login-container\">\n      <LoginForm @login=\"setUsername\" />\n    </div>\n    <div v-else class=\"discord-layout\">\n      <!-- 服务器列表 -->\n      <ServerList \n        :external-servers=\"[]\"\n        :current-server-id=\"currentServerId\"\n        @change-server=\"changeServer\"\n        @add-server=\"showAddServerDialog\"\n        @explore-servers=\"showExploreServers\"\n      />\n      \n      <!-- 频道列表 -->\n      <ChannelList\n        :server-name=\"currentServer.name\"\n        :username=\"username\"\n        :avatar=\"avatar\"\n        :current-channel-id=\"currentChannelId\"\n        @select-channel=\"changeChannel\"\n        @open-settings=\"openProfileEditor\"\n        @toggle-user-menu=\"toggleUserMenu\"\n      />\n      \n      <!-- 聊天容器 -->\n      <ChatContainer \n        :currentUser=\"{ username, avatar }\" \n        :current-server=\"currentServer\"\n        :current-channel=\"currentChannel\"\n        @update-online-users=\"updateOnlineUsers\"\n      />\n\n      <!-- 在线用户列表 -->\n      <OnlineUsersSidebar \n        :onlineUsers=\"onlineUsers\" \n        :currentUsername=\"username\"\n      />\n      \n      <!-- 个人资料编辑器 -->\n      <UserProfileEditor\n        v-if=\"showProfileEditor\"\n        :isOpen=\"showProfileEditor\"\n        @close=\"closeProfileEditor\"\n        @update-profile=\"updateProfile\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport LoginForm from './components/auth/LoginForm.vue'\nimport ChatContainer from './components/chat/ChatContainer.vue'\nimport ServerList from './components/chat/ServerList.vue'\nimport ChannelList from './components/chat/ChannelList.vue'\nimport OnlineUsersSidebar from './components/chat/OnlineUsersSidebar.vue'\nimport UserProfileEditor from './components/chat/UserProfileEditor.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    LoginForm,\n    ChatContainer,\n    ServerList,\n    ChannelList,\n    OnlineUsersSidebar,\n    UserProfileEditor\n  },\n  data() {\n    return {\n      username: '',\n      avatar: '',\n      onlineUsers: [],\n      showProfileEditor: false,\n      currentServerId: 'home',\n      currentChannelId: 'general',\n      currentServer: {\n        id: 'home',\n        name: '主页'\n      },\n      currentChannel: {\n        id: 'general',\n        name: 'general',\n        type: 'text'\n      },\n      // 服务器模板\n      serverTemplate: {\n        name: 'general',\n        description: 'Welcome to the chat channel!',\n        channels: [\n          {\n            id: 'general',\n            name: 'general',\n            type: 'text',\n            description: 'General chat channel for everyone'\n          }\n        ],\n        roles: [\n          {\n            id: 'admin',\n            name: '管理员',\n            permissions: ['manage_server', 'manage_channels', 'manage_roles']\n          },\n          {\n            id: 'member',\n            name: '成员',\n            permissions: ['send_messages', 'read_messages']\n          }\n        ],\n        categories: [\n          {\n            id: 'text-channels',\n            name: '文字频道',\n            type: 'category',\n            channels: ['general']\n          }\n        ]\n      }\n    }\n  },\n  created() {\n    // 从localStorage获取用户信息\n    const savedUsername = localStorage.getItem('chat-username')\n    const savedAvatar = localStorage.getItem('chat-avatar')\n    \n    if (savedUsername) {\n      this.username = savedUsername\n      this.avatar = savedAvatar || ''\n    }\n    \n    // 应用保存的主题\n    const savedTheme = localStorage.getItem('chat-theme') || 'discord'\n    document.body.classList.add(`theme-${savedTheme}`)\n\n    // 恢复上次选择的服务器\n    const savedServerId = localStorage.getItem('current-server-id')\n    if (savedServerId) {\n      this.currentServerId = savedServerId\n    }\n\n    // 初始化默认服务器\n    const servers = this.getServers()\n    if (servers.length === 0) {\n      const defaultServer = this.createNewServer('测试服务器')\n      this.currentServerId = defaultServer.id\n      this.currentServer = defaultServer\n    } else if (this.currentServerId === 'home') {\n      // 如果当前是主页，切换到第一个服务器\n      this.currentServerId = servers[0].id\n      this.currentServer = servers[0]\n    }\n  },\n  methods: {\n    setUsername(userData) {\n      this.username = userData.username\n      this.avatar = userData.avatar || ''\n      \n      // 保存用户信息到localStorage\n      localStorage.setItem('chat-username', this.username)\n      if (this.avatar) {\n        localStorage.setItem('chat-avatar', this.avatar)\n      }\n    },\n    \n    // 更新在线用户列表\n    updateOnlineUsers(users) {\n      this.onlineUsers = users;\n    },\n    \n    // 打开个人资料编辑器\n    openProfileEditor() {\n      this.showProfileEditor = true\n    },\n    \n    // 关闭个人资料编辑器\n    closeProfileEditor() {\n      this.showProfileEditor = false\n    },\n    \n    // 更新个人资料\n    updateProfile(updatedProfile) {\n      this.username = updatedProfile.username\n      this.avatar = updatedProfile.avatar\n      this.showProfileEditor = false\n      \n      // 保存到localStorage\n      localStorage.setItem('chat-username', this.username)\n      localStorage.setItem('chat-avatar', this.avatar)\n    },\n\n    // 切换服务器\n    changeServer(server) {\n      this.currentServerId = server.id\n      this.currentServer = server\n      \n      // 保存当前服务器ID到localStorage\n      localStorage.setItem('current-server-id', server.id)\n    },\n\n    // 显示添加服务器对话框\n    showAddServerDialog() {\n      // 创建一个新的服务器\n      const newServer = this.createNewServer('新服务器')\n      this.changeServer(newServer)\n    },\n\n    // 创建新服务器\n    createNewServer(serverName) {\n      const serverId = 'server-' + Date.now()\n      const newServer = {\n        id: serverId,\n        name: serverName,\n        icon: null,\n        description: this.serverTemplate.description,\n        channels: [...this.serverTemplate.channels],\n        roles: [...this.serverTemplate.roles],\n        categories: [...this.serverTemplate.categories],\n        members: [],\n        createdAt: new Date().toISOString(),\n        ownerId: this.username\n      }\n\n      // 保存服务器信息到 localStorage\n      const servers = JSON.parse(localStorage.getItem('chat-servers') || '[]')\n      servers.push(newServer)\n      localStorage.setItem('chat-servers', JSON.stringify(servers))\n\n      return newServer\n    },\n\n    // 获取所有服务器\n    getServers() {\n      return JSON.parse(localStorage.getItem('chat-servers') || '[]')\n    },\n\n    // 更新服务器信息\n    updateServer(server) {\n      const servers = this.getServers()\n      const index = servers.findIndex(s => s.id === server.id)\n      if (index !== -1) {\n        servers[index] = server\n        localStorage.setItem('chat-servers', JSON.stringify(servers))\n      }\n    },\n\n    // 显示服务器浏览器\n    showExploreServers() {\n      // TODO: 实现服务器浏览功能\n      console.log('显示服务器浏览器')\n    },\n\n    changeChannel(channel) {\n      this.currentChannelId = channel.id\n      this.currentChannel = channel\n    },\n    \n    // 切换用户菜单\n    toggleUserMenu() {\n      // 这里可以添加额外的用户菜单逻辑\n      console.log('Toggle user menu')\n    }\n  }\n}\n</script>\n\n<style>\n/* 全局样式重置 */\n:root {\n  /* Discord's color palette */\n  --background-primary: #36393f;         /* Main chat background */\n  --background-secondary: #2f3136;       /* Sidebar background */\n  --background-tertiary: #202225;        /* Server list background */\n  --background-accent: #4f545c;          /* Hover states */\n  --text-normal: #dcddde;               /* Normal text color */\n  --text-muted: #72767d;                /* Muted text color */\n  --text-link: #00b0f4;                 /* Link color */\n  --header-primary: #fff;               /* Header text color */\n  --interactive-normal: #b9bbbe;        /* Interactive elements */\n  --interactive-hover: #dcddde;         /* Interactive elements on hover */\n  --interactive-active: #fff;           /* Interactive elements when active */\n  --primary-color: #5865f2;             /* Brand color */\n  --online-color: #3ba55d;              /* Online status */\n  --idle-color: #faa81a;                /* Idle status */\n  --dnd-color: #ed4245;                 /* Do not disturb status */\n  --offline-color: #747f8d;             /* Offline status */\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody, html {\n  height: 100%;\n  width: 100%;\n  font-family: 'gg sans', 'Noto Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;  /* Discord's font stack */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: var(--text-normal);\n  background-color: var(--background-tertiary);\n}\n\n#app {\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.app-container {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.login-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  padding: 1rem;\n  background-color: var(--background-tertiary);\n}\n\n/* Discord布局 */\n.discord-layout {\n  display: flex;\n  width: 100%;\n  height: 100vh;\n  overflow: hidden;\n  background-color: var(--background-primary);\n}\n\n/* 滚动条样式 */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background-color: transparent;\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: var(--background-accent);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background-color: var(--interactive-normal);\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .chat-main {\n    flex-direction: column;\n  }\n  \n  .discord-layout {\n    flex-direction: column;\n  }\n  \n  .server-list {\n    width: 100% !important;\n    height: auto !important;\n    flex-direction: row !important;\n    padding: 8px !important;\n  }\n  \n  .server-items {\n    flex-direction: row !important;\n    padding: 0 8px !important;\n  }\n  \n  .server-item {\n    margin-right: 8px !important;\n    margin-bottom: 0 !important;\n  }\n}\n\n/* 动画过渡 */\n.fade-enter-active, .fade-leave-active {\n  transition: opacity 0.2s ease;\n}\n\n.fade-enter-from, .fade-leave-to {\n  opacity: 0;\n}\n\n/* 按钮基础样式 */\nbutton {\n  border: none;\n  background: none;\n  cursor: pointer;\n  font-family: inherit;\n  padding: 8px 16px;\n  border-radius: 4px;\n  font-size: 14px;\n  font-weight: 500;\n  transition: background-color 0.2s ease;\n}\n\nbutton:hover {\n  background-color: var(--background-accent);\n}\n\n/* 输入框基础样式 */\ninput, textarea {\n  background-color: var(--background-tertiary);\n  border: none;\n  border-radius: 4px;\n  padding: 10px;\n  color: var(--text-normal);\n  font-size: 14px;\n  outline: none;\n  transition: border-color 0.2s ease;\n}\n\ninput:focus, textarea:focus {\n  box-shadow: 0 0 0 2px var(--primary-color);\n}\n</style>\n"],"mappings":";AAoDA,OAAOA,SAAQ,MAAO,iCAAgC;AACtD,OAAOC,aAAY,MAAO,qCAAoC;AAC9D,OAAOC,UAAS,MAAO,kCAAiC;AACxD,OAAOC,WAAU,MAAO,mCAAkC;AAC1D,OAAOC,kBAAiB,MAAO,0CAAyC;AACxE,OAAOC,iBAAgB,MAAO,yCAAwC;AAEtE,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACVP,SAAS;IACTC,aAAa;IACbC,UAAU;IACVC,WAAW;IACXC,kBAAkB;IAClBC;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAE,EAAE;MACVC,WAAW,EAAE,EAAE;MACfC,iBAAiB,EAAE,KAAK;MACxBC,eAAe,EAAE,MAAM;MACvBC,gBAAgB,EAAE,SAAS;MAC3BC,aAAa,EAAE;QACbC,EAAE,EAAE,MAAM;QACVV,IAAI,EAAE;MACR,CAAC;MACDW,cAAc,EAAE;QACdD,EAAE,EAAE,SAAS;QACbV,IAAI,EAAE,SAAS;QACfY,IAAI,EAAE;MACR,CAAC;MACD;MACAC,cAAc,EAAE;QACdb,IAAI,EAAE,SAAS;QACfc,WAAW,EAAE,8BAA8B;QAC3CC,QAAQ,EAAE,CACR;UACEL,EAAE,EAAE,SAAS;UACbV,IAAI,EAAE,SAAS;UACfY,IAAI,EAAE,MAAM;UACZE,WAAW,EAAE;QACf,EACD;QACDE,KAAK,EAAE,CACL;UACEN,EAAE,EAAE,OAAO;UACXV,IAAI,EAAE,KAAK;UACXiB,WAAW,EAAE,CAAC,eAAe,EAAE,iBAAiB,EAAE,cAAc;QAClE,CAAC,EACD;UACEP,EAAE,EAAE,QAAQ;UACZV,IAAI,EAAE,IAAI;UACViB,WAAW,EAAE,CAAC,eAAe,EAAE,eAAe;QAChD,EACD;QACDC,UAAU,EAAE,CACV;UACER,EAAE,EAAE,eAAe;UACnBV,IAAI,EAAE,MAAM;UACZY,IAAI,EAAE,UAAU;UAChBG,QAAQ,EAAE,CAAC,SAAS;QACtB;MAEJ;IACF;EACF,CAAC;EACDI,OAAOA,CAAA,EAAG;IACR;IACA,MAAMC,aAAY,GAAIC,YAAY,CAACC,OAAO,CAAC,eAAe;IAC1D,MAAMC,WAAU,GAAIF,YAAY,CAACC,OAAO,CAAC,aAAa;IAEtD,IAAIF,aAAa,EAAE;MACjB,IAAI,CAACjB,QAAO,GAAIiB,aAAY;MAC5B,IAAI,CAAChB,MAAK,GAAImB,WAAU,IAAK,EAAC;IAChC;;IAEA;IACA,MAAMC,UAAS,GAAIH,YAAY,CAACC,OAAO,CAAC,YAAY,KAAK,SAAQ;IACjEG,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,SAASJ,UAAU,EAAE;;IAEjD;IACA,MAAMK,aAAY,GAAIR,YAAY,CAACC,OAAO,CAAC,mBAAmB;IAC9D,IAAIO,aAAa,EAAE;MACjB,IAAI,CAACtB,eAAc,GAAIsB,aAAY;IACrC;;IAEA;IACA,MAAMC,OAAM,GAAI,IAAI,CAACC,UAAU,CAAC;IAChC,IAAID,OAAO,CAACE,MAAK,KAAM,CAAC,EAAE;MACxB,MAAMC,aAAY,GAAI,IAAI,CAACC,eAAe,CAAC,OAAO;MAClD,IAAI,CAAC3B,eAAc,GAAI0B,aAAa,CAACvB,EAAC;MACtC,IAAI,CAACD,aAAY,GAAIwB,aAAY;IACnC,OAAO,IAAI,IAAI,CAAC1B,eAAc,KAAM,MAAM,EAAE;MAC1C;MACA,IAAI,CAACA,eAAc,GAAIuB,OAAO,CAAC,CAAC,CAAC,CAACpB,EAAC;MACnC,IAAI,CAACD,aAAY,GAAIqB,OAAO,CAAC,CAAC;IAChC;EACF,CAAC;EACDK,OAAO,EAAE;IACPC,WAAWA,CAACC,QAAQ,EAAE;MACpB,IAAI,CAAClC,QAAO,GAAIkC,QAAQ,CAAClC,QAAO;MAChC,IAAI,CAACC,MAAK,GAAIiC,QAAQ,CAACjC,MAAK,IAAK,EAAC;;MAElC;MACAiB,YAAY,CAACiB,OAAO,CAAC,eAAe,EAAE,IAAI,CAACnC,QAAQ;MACnD,IAAI,IAAI,CAACC,MAAM,EAAE;QACfiB,YAAY,CAACiB,OAAO,CAAC,aAAa,EAAE,IAAI,CAAClC,MAAM;MACjD;IACF,CAAC;IAED;IACAmC,iBAAiBA,CAACC,KAAK,EAAE;MACvB,IAAI,CAACnC,WAAU,GAAImC,KAAK;IAC1B,CAAC;IAED;IACAC,iBAAiBA,CAAA,EAAG;MAClB,IAAI,CAACnC,iBAAgB,GAAI,IAAG;IAC9B,CAAC;IAED;IACAoC,kBAAkBA,CAAA,EAAG;MACnB,IAAI,CAACpC,iBAAgB,GAAI,KAAI;IAC/B,CAAC;IAED;IACAqC,aAAaA,CAACC,cAAc,EAAE;MAC5B,IAAI,CAACzC,QAAO,GAAIyC,cAAc,CAACzC,QAAO;MACtC,IAAI,CAACC,MAAK,GAAIwC,cAAc,CAACxC,MAAK;MAClC,IAAI,CAACE,iBAAgB,GAAI,KAAI;;MAE7B;MACAe,YAAY,CAACiB,OAAO,CAAC,eAAe,EAAE,IAAI,CAACnC,QAAQ;MACnDkB,YAAY,CAACiB,OAAO,CAAC,aAAa,EAAE,IAAI,CAAClC,MAAM;IACjD,CAAC;IAED;IACAyC,YAAYA,CAACC,MAAM,EAAE;MACnB,IAAI,CAACvC,eAAc,GAAIuC,MAAM,CAACpC,EAAC;MAC/B,IAAI,CAACD,aAAY,GAAIqC,MAAK;;MAE1B;MACAzB,YAAY,CAACiB,OAAO,CAAC,mBAAmB,EAAEQ,MAAM,CAACpC,EAAE;IACrD,CAAC;IAED;IACAqC,mBAAmBA,CAAA,EAAG;MACpB;MACA,MAAMC,SAAQ,GAAI,IAAI,CAACd,eAAe,CAAC,MAAM;MAC7C,IAAI,CAACW,YAAY,CAACG,SAAS;IAC7B,CAAC;IAED;IACAd,eAAeA,CAACe,UAAU,EAAE;MAC1B,MAAMC,QAAO,GAAI,SAAQ,GAAIC,IAAI,CAACC,GAAG,CAAC;MACtC,MAAMJ,SAAQ,GAAI;QAChBtC,EAAE,EAAEwC,QAAQ;QACZlD,IAAI,EAAEiD,UAAU;QAChBI,IAAI,EAAE,IAAI;QACVvC,WAAW,EAAE,IAAI,CAACD,cAAc,CAACC,WAAW;QAC5CC,QAAQ,EAAE,CAAC,GAAG,IAAI,CAACF,cAAc,CAACE,QAAQ,CAAC;QAC3CC,KAAK,EAAE,CAAC,GAAG,IAAI,CAACH,cAAc,CAACG,KAAK,CAAC;QACrCE,UAAU,EAAE,CAAC,GAAG,IAAI,CAACL,cAAc,CAACK,UAAU,CAAC;QAC/CoC,OAAO,EAAE,EAAE;QACXC,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC,CAACK,WAAW,CAAC,CAAC;QACnCC,OAAO,EAAE,IAAI,CAACtD;MAChB;;MAEA;MACA,MAAM2B,OAAM,GAAI4B,IAAI,CAACC,KAAK,CAACtC,YAAY,CAACC,OAAO,CAAC,cAAc,KAAK,IAAI;MACvEQ,OAAO,CAAC8B,IAAI,CAACZ,SAAS;MACtB3B,YAAY,CAACiB,OAAO,CAAC,cAAc,EAAEoB,IAAI,CAACG,SAAS,CAAC/B,OAAO,CAAC;MAE5D,OAAOkB,SAAQ;IACjB,CAAC;IAED;IACAjB,UAAUA,CAAA,EAAG;MACX,OAAO2B,IAAI,CAACC,KAAK,CAACtC,YAAY,CAACC,OAAO,CAAC,cAAc,KAAK,IAAI;IAChE,CAAC;IAED;IACAwC,YAAYA,CAAChB,MAAM,EAAE;MACnB,MAAMhB,OAAM,GAAI,IAAI,CAACC,UAAU,CAAC;MAChC,MAAMgC,KAAI,GAAIjC,OAAO,CAACkC,SAAS,CAACC,CAAA,IAAKA,CAAC,CAACvD,EAAC,KAAMoC,MAAM,CAACpC,EAAE;MACvD,IAAIqD,KAAI,KAAM,CAAC,CAAC,EAAE;QAChBjC,OAAO,CAACiC,KAAK,IAAIjB,MAAK;QACtBzB,YAAY,CAACiB,OAAO,CAAC,cAAc,EAAEoB,IAAI,CAACG,SAAS,CAAC/B,OAAO,CAAC;MAC9D;IACF,CAAC;IAED;IACAoC,kBAAkBA,CAAA,EAAG;MACnB;MACAC,OAAO,CAACC,GAAG,CAAC,UAAU;IACxB,CAAC;IAEDC,aAAaA,CAACC,OAAO,EAAE;MACrB,IAAI,CAAC9D,gBAAe,GAAI8D,OAAO,CAAC5D,EAAC;MACjC,IAAI,CAACC,cAAa,GAAI2D,OAAM;IAC9B,CAAC;IAED;IACAC,cAAcA,CAAA,EAAG;MACf;MACAJ,OAAO,CAACC,GAAG,CAAC,kBAAkB;IAChC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}