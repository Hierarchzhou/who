{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport { GiphyFetch } from '@giphy/js-fetch-api';\nimport { GIPHY_API_KEY, GIPHY_CONFIG } from '@/config/giphy';\n\n// 初始化 GIPHY API 客户端\nconst gf = new GiphyFetch(GIPHY_API_KEY);\nexport default {\n  name: 'StickerPicker',\n  data() {\n    return {\n      searchQuery: '',\n      stickers: [],\n      loading: false,\n      currentCategory: 'trending',\n      categories: [{\n        id: 'trending',\n        name: '热门',\n        searchTerm: ''\n      }, {\n        id: 'reactions',\n        name: '反应',\n        searchTerm: 'reaction'\n      }, {\n        id: 'memes',\n        name: '梗图',\n        searchTerm: 'meme'\n      }, {\n        id: 'anime',\n        name: '动漫',\n        searchTerm: 'anime'\n      }, {\n        id: 'cute',\n        name: '可爱',\n        searchTerm: 'cute'\n      }],\n      searchTimeout: null,\n      offset: 0,\n      // 添加 offset 用于分页\n      hasMore: true // 是否还有更多数据\n    };\n  },\n  methods: {\n    async fetchStickers(options = {}, loadMore = false) {\n      if (!loadMore) {\n        this.offset = 0;\n        this.hasMore = true;\n      }\n      if (!this.hasMore || this.loading) return;\n      this.loading = true;\n      try {\n        let response;\n        const params = {\n          ...GIPHY_CONFIG,\n          ...options,\n          type: 'stickers',\n          limit: 20,\n          offset: this.offset\n        };\n        const currentCategory = this.categories.find(c => c.id === this.currentCategory);\n        const searchTerm = this.searchQuery || currentCategory?.searchTerm || '';\n        if (searchTerm) {\n          response = await gf.search(searchTerm, params);\n        } else {\n          response = await gf.trending(params);\n        }\n\n        // 更新数据\n        if (loadMore) {\n          const container = this.$refs.gridContainer;\n          const scrollTop = container.scrollTop;\n          this.stickers = [...this.stickers, ...response.data];\n          this.$nextTick(() => {\n            container.scrollTop = scrollTop;\n          });\n        } else {\n          this.stickers = response.data;\n        }\n\n        // 更新分页信息\n        this.offset += response.data.length;\n        this.hasMore = response.pagination.total_count > this.offset;\n      } catch (error) {\n        console.error('Error fetching stickers:', error);\n      }\n      this.loading = false;\n    },\n    handleScroll(event) {\n      const container = event.target;\n      const scrollBottom = container.scrollHeight - container.scrollTop - container.clientHeight;\n\n      // 当滚动到距离底部 100px 时加载更多，增加提前加载的距离\n      if (scrollBottom < 100 && !this.loading && this.hasMore) {\n        this.fetchStickers({}, true);\n      }\n    },\n    handleSearch() {\n      if (this.searchTimeout) {\n        clearTimeout(this.searchTimeout);\n      }\n      this.searchTimeout = setTimeout(() => {\n        this.fetchStickers();\n      }, 300);\n    },\n    selectCategory(category) {\n      this.currentCategory = category.id;\n      this.searchQuery = ''; // 清空搜索框\n      this.fetchStickers();\n    },\n    selectSticker(sticker) {\n      this.$emit('select', {\n        id: sticker.id,\n        url: sticker.images.fixed_width.url,\n        // 使用固定宽度的图片\n        title: sticker.title\n      });\n    }\n  },\n  mounted() {\n    this.fetchStickers();\n    // 添加滚动事件监听\n    this.$refs.gridContainer.addEventListener('scroll', this.handleScroll);\n  },\n  beforeUnmount() {\n    // 移除滚动事件监听\n    this.$refs.gridContainer?.removeEventListener('scroll', this.handleScroll);\n  }\n};","map":{"version":3,"names":["GiphyFetch","GIPHY_API_KEY","GIPHY_CONFIG","gf","name","data","searchQuery","stickers","loading","currentCategory","categories","id","searchTerm","searchTimeout","offset","hasMore","methods","fetchStickers","options","loadMore","response","params","type","limit","find","c","search","trending","container","$refs","gridContainer","scrollTop","$nextTick","length","pagination","total_count","error","console","handleScroll","event","target","scrollBottom","scrollHeight","clientHeight","handleSearch","clearTimeout","setTimeout","selectCategory","category","selectSticker","sticker","$emit","url","images","fixed_width","title","mounted","addEventListener","beforeUnmount","removeEventListener"],"sources":["C:\\Users\\Administrator\\Desktop\\discord-chat-app\\fack\\just-do-it\\src\\components\\chat\\StickerPicker.vue"],"sourcesContent":["<template>\r\n  <div class=\"sticker-picker\">\r\n    <!-- 标题 -->\r\n    <div class=\"sticker-picker-header\">\r\n      {{ currentCategory === 'trending' ? '热门表情' : categories.find(c => c.id === currentCategory)?.name || '表情包' }}\r\n    </div>\r\n\r\n    <!-- 搜索框 -->\r\n    <div class=\"search-container\">\r\n      <input \r\n        type=\"text\" \r\n        v-model=\"searchQuery\"\r\n        placeholder=\"搜索表情包...\"\r\n        @input=\"handleSearch\"\r\n        class=\"search-input\"\r\n      />\r\n    </div>\r\n\r\n    <!-- 分类标签 -->\r\n    <div class=\"categories\">\r\n      <button \r\n        v-for=\"category in categories\" \r\n        :key=\"category.id\"\r\n        @click=\"selectCategory(category)\"\r\n        :class=\"['category-btn', { active: currentCategory === category.id }]\"\r\n      >\r\n        {{ category.name }}\r\n      </button>\r\n    </div>\r\n\r\n    <!-- 表情包网格 -->\r\n    <div class=\"stickers-grid\" ref=\"gridContainer\">\r\n      <template v-if=\"stickers.length > 0\">\r\n        <div \r\n          v-for=\"sticker in stickers\" \r\n          :key=\"sticker.id\" \r\n          class=\"sticker-item\"\r\n          @click=\"selectSticker(sticker)\"\r\n        >\r\n          <!-- 使用固定宽度的图片 -->\r\n          <img \r\n            :src=\"sticker.images.fixed_width.url\"\r\n            :alt=\"sticker.title\"\r\n            loading=\"lazy\"\r\n          />\r\n        </div>\r\n        <!-- 将加载提示移到底部 -->\r\n        <div v-if=\"loading\" class=\"loading-more\">\r\n          加载更多...\r\n        </div>\r\n      </template>\r\n      <div v-else-if=\"loading\" class=\"loading\">加载中...</div>\r\n      <div v-else class=\"no-results\">未找到相关表情</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { GiphyFetch } from '@giphy/js-fetch-api'\r\nimport { GIPHY_API_KEY, GIPHY_CONFIG } from '@/config/giphy'\r\n\r\n// 初始化 GIPHY API 客户端\r\nconst gf = new GiphyFetch(GIPHY_API_KEY)\r\n\r\nexport default {\r\n  name: 'StickerPicker',\r\n  data() {\r\n    return {\r\n      searchQuery: '',\r\n      stickers: [],\r\n      loading: false,\r\n      currentCategory: 'trending',\r\n      categories: [\r\n        { id: 'trending', name: '热门', searchTerm: '' },\r\n        { id: 'reactions', name: '反应', searchTerm: 'reaction' },\r\n        { id: 'memes', name: '梗图', searchTerm: 'meme' },\r\n        { id: 'anime', name: '动漫', searchTerm: 'anime' },\r\n        { id: 'cute', name: '可爱', searchTerm: 'cute' }\r\n      ],\r\n      searchTimeout: null,\r\n      offset: 0,  // 添加 offset 用于分页\r\n      hasMore: true  // 是否还有更多数据\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchStickers(options = {}, loadMore = false) {\r\n      if (!loadMore) {\r\n        this.offset = 0\r\n        this.hasMore = true\r\n      }\r\n      \r\n      if (!this.hasMore || this.loading) return\r\n\r\n      this.loading = true\r\n      try {\r\n        let response\r\n        const params = {\r\n          ...GIPHY_CONFIG,\r\n          ...options,\r\n          type: 'stickers',\r\n          limit: 20,\r\n          offset: this.offset\r\n        }\r\n\r\n        const currentCategory = this.categories.find(c => c.id === this.currentCategory)\r\n        const searchTerm = this.searchQuery || currentCategory?.searchTerm || ''\r\n\r\n        if (searchTerm) {\r\n          response = await gf.search(searchTerm, params)\r\n        } else {\r\n          response = await gf.trending(params)\r\n        }\r\n\r\n        // 更新数据\r\n        if (loadMore) {\r\n          const container = this.$refs.gridContainer\r\n          const scrollTop = container.scrollTop\r\n\r\n          this.stickers = [...this.stickers, ...response.data]\r\n\r\n          this.$nextTick(() => {\r\n            container.scrollTop = scrollTop\r\n          })\r\n        } else {\r\n          this.stickers = response.data\r\n        }\r\n\r\n        // 更新分页信息\r\n        this.offset += response.data.length\r\n        this.hasMore = response.pagination.total_count > this.offset\r\n      } catch (error) {\r\n        console.error('Error fetching stickers:', error)\r\n      }\r\n      this.loading = false\r\n    },\r\n\r\n    handleScroll(event) {\r\n      const container = event.target\r\n      const scrollBottom = container.scrollHeight - container.scrollTop - container.clientHeight\r\n      \r\n      // 当滚动到距离底部 100px 时加载更多，增加提前加载的距离\r\n      if (scrollBottom < 100 && !this.loading && this.hasMore) {\r\n        this.fetchStickers({}, true)\r\n      }\r\n    },\r\n\r\n    handleSearch() {\r\n      if (this.searchTimeout) {\r\n        clearTimeout(this.searchTimeout)\r\n      }\r\n      this.searchTimeout = setTimeout(() => {\r\n        this.fetchStickers()\r\n      }, 300)\r\n    },\r\n\r\n    selectCategory(category) {\r\n      this.currentCategory = category.id\r\n      this.searchQuery = ''  // 清空搜索框\r\n      this.fetchStickers()\r\n    },\r\n\r\n    selectSticker(sticker) {\r\n      this.$emit('select', {\r\n        id: sticker.id,\r\n        url: sticker.images.fixed_width.url,  // 使用固定宽度的图片\r\n        title: sticker.title\r\n      })\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchStickers()\r\n    // 添加滚动事件监听\r\n    this.$refs.gridContainer.addEventListener('scroll', this.handleScroll)\r\n  },\r\n  beforeUnmount() {\r\n    // 移除滚动事件监听\r\n    this.$refs.gridContainer?.removeEventListener('scroll', this.handleScroll)\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.sticker-picker {\r\n  width: 420px;  /* 设置固定宽度 */\r\n  height: 500px;  /* 增加高度 */\r\n  display: flex;\r\n  flex-direction: column;\r\n  background: #2f3136;\r\n  border-radius: 12px;  /* 增加圆角 */\r\n  overflow: hidden;\r\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);  /* 增强阴影 */\r\n  position: absolute;\r\n  bottom: 100%;\r\n  left: 0;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.sticker-picker-header {\r\n  padding: 16px 20px;  /* 增加水平内边距 */\r\n  background: #202225;\r\n  color: #fff;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.search-container {\r\n  padding: 12px 20px;  /* 增加水平内边距 */\r\n  background: #202225;\r\n  border-bottom: 1px solid rgba(255, 255, 255, 0.06);\r\n}\r\n\r\n.search-input {\r\n  width: 100%;\r\n  padding: 10px 16px;  /* 增加内边距 */\r\n  border-radius: 6px;  /* 增加圆角 */\r\n  border: none;\r\n  background: #40444b;\r\n  color: #dcddde;\r\n  font-size: 14px;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.search-input:focus {\r\n  outline: none;\r\n  background: #454950;\r\n  box-shadow: 0 0 0 2px rgba(88, 101, 242, 0.3);  /* 添加焦点轮廓 */\r\n}\r\n\r\n.search-input::placeholder {\r\n  color: #72767d;\r\n}\r\n\r\n.categories {\r\n  padding: 8px 16px;  /* 增加水平内边距 */\r\n  display: flex;\r\n  gap: 8px;\r\n  background: #2f3136;\r\n  border-bottom: 1px solid rgba(255, 255, 255, 0.06);\r\n  overflow-x: auto;\r\n  scrollbar-width: none;\r\n  position: relative;  /* 为底部指示条定位 */\r\n}\r\n\r\n.categories::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\n.category-btn {\r\n  padding: 8px 16px;  /* 增加内边距 */\r\n  border: none;\r\n  border-radius: 6px;  /* 增加圆角 */\r\n  background: transparent;\r\n  color: #b9bbbe;\r\n  cursor: pointer;\r\n  white-space: nowrap;\r\n  transition: all 0.2s ease;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  position: relative;\r\n}\r\n\r\n.category-btn:hover {\r\n  color: #fff;\r\n  background: rgba(255, 255, 255, 0.05);\r\n}\r\n\r\n.category-btn.active {\r\n  color: #fff;\r\n  background: #454950;\r\n}\r\n\r\n.category-btn.active::after {\r\n  content: '';\r\n  position: absolute;\r\n  bottom: -9px;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 2px;\r\n  background: #5865f2;\r\n  border-radius: 1px;\r\n}\r\n\r\n.stickers-grid {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 16px;  /* 减小内边距以获得更多空间 */\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  gap: 16px;\r\n  background: #36393f;\r\n  align-content: start;\r\n}\r\n\r\n.sticker-item {\r\n  aspect-ratio: auto;  /* 移除固定宽高比，让它根据内容自适应 */\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  background: #2f3136;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 8px;  /* 减小内边距 */\r\n  position: relative;\r\n  min-height: 120px;  /* 设置最小高度 */\r\n}\r\n\r\n.sticker-item:hover {\r\n  transform: translateY(-2px);\r\n  background: #40444b;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.sticker-item img {\r\n  max-width: 100%;\r\n  max-height: 120px;  /* 限制最大高度 */\r\n  width: auto;\r\n  height: auto;\r\n  object-fit: contain;  /* 确保图片完整显示 */\r\n  transition: transform 0.2s ease;\r\n  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));  /* 添加图片阴影 */\r\n}\r\n\r\n.sticker-item:hover img {\r\n  transform: scale(1.05);\r\n}\r\n\r\n.loading {\r\n  grid-column: 1 / -1;\r\n  text-align: center;\r\n  padding: 32px;  /* 增加内边距 */\r\n  color: #72767d;\r\n  font-size: 14px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 12px;\r\n}\r\n\r\n.loading::after {\r\n  content: '';\r\n  width: 20px;  /* 增加尺寸 */\r\n  height: 20px;\r\n  border: 2px solid #72767d;\r\n  border-top-color: transparent;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n.loading-more {\r\n  grid-column: 1 / -1;\r\n  text-align: center;\r\n  padding: 16px;\r\n  color: #72767d;\r\n  font-size: 14px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 8px;\r\n  background: transparent;\r\n}\r\n\r\n.loading-more::after {\r\n  content: '';\r\n  width: 16px;\r\n  height: 16px;\r\n  border: 2px solid #72767d;\r\n  border-top-color: transparent;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n.no-results {\r\n  grid-column: 1 / -1;\r\n  text-align: center;\r\n  padding: 32px;\r\n  color: #72767d;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 滚动条样式 */\r\n.stickers-grid::-webkit-scrollbar {\r\n  width: 6px;  /* 减小宽度 */\r\n}\r\n\r\n.stickers-grid::-webkit-scrollbar-track {\r\n  background: transparent;\r\n}\r\n\r\n.stickers-grid::-webkit-scrollbar-thumb {\r\n  background: rgba(255, 255, 255, 0.1);\r\n  border-radius: 3px;\r\n}\r\n\r\n.stickers-grid::-webkit-scrollbar-thumb:hover {\r\n  background: rgba(255, 255, 255, 0.2);\r\n}\r\n\r\n@keyframes spin {\r\n  to { transform: rotate(360deg); }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}