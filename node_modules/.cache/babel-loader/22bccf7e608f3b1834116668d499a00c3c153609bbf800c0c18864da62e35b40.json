{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getRandomAvatarUrl, getRandomDefaultAvatarUrl, getFallbackAvatarUrl, handleAvatarError } from '../../utils/avatarUtils';\nexport default {\n  name: 'UserNameInput',\n  data() {\n    return {\n      username: '',\n      // 用户昵称\n      selectedAvatar: '',\n      // 选中的头像\n      customAvatarPreview: null,\n      // 自定义头像预览\n      isCustomAvatarSelected: false,\n      // 是否选择了自定义头像\n      selectedTheme: 'discord',\n      // 默认主题\n      themes: [{\n        id: 'discord',\n        name: 'Discord'\n      }, {\n        id: 'dark',\n        name: '暗黑'\n      }],\n      defaultAvatars: [] // 默认头像列表\n    };\n  },\n  created() {\n    // 从 localStorage 获取保存的主题\n    const savedTheme = localStorage.getItem('chat-theme');\n    if (savedTheme) {\n      this.selectedTheme = savedTheme;\n      this.selectTheme(savedTheme);\n    }\n\n    // 生成默认头像\n    this.generateDefaultAvatars();\n\n    // 尝试从localStorage恢复用户名和头像\n    const savedUsername = localStorage.getItem('chat-username');\n    const savedAvatar = localStorage.getItem('chat-avatar');\n    if (savedUsername) {\n      this.username = savedUsername;\n    }\n    if (savedAvatar) {\n      this.selectedAvatar = savedAvatar;\n      this.isCustomAvatarSelected = !this.defaultAvatars.includes(savedAvatar);\n    }\n  },\n  methods: {\n    // 生成默认头像\n    generateDefaultAvatars() {\n      // 清空数组\n      this.defaultAvatars = [];\n\n      // 生成6个随机头像\n      for (let i = 0; i < 6; i++) {\n        this.defaultAvatars.push(getRandomDefaultAvatarUrl());\n      }\n\n      // 默认选择第一个头像\n      if (!this.selectedAvatar) {\n        this.selectedAvatar = this.defaultAvatars[0];\n      }\n    },\n    // 重新生成头像\n    regenerateAvatars() {\n      this.generateDefaultAvatars();\n    },\n    // 根据用户名更新头像\n    updateUsernameAvatar() {\n      if (this.username.trim() && !this.isCustomAvatarSelected) {\n        // 如果用户输入了用户名，并且没有选择自定义头像，则根据用户名生成头像\n        this.selectedAvatar = getRandomAvatarUrl(this.username);\n      }\n    },\n    // 设置用户名和头像\n    setUsername() {\n      if (this.username.trim()) {\n        // 如果没有选择头像，则根据用户名生成一个\n        if (!this.selectedAvatar) {\n          this.selectedAvatar = getRandomAvatarUrl(this.username);\n        }\n\n        // 将用户名和头像传递给父组件\n        this.$emit('set-username', {\n          username: this.username,\n          avatar: this.selectedAvatar\n        });\n\n        // 保存到localStorage\n        localStorage.setItem('chat-username', this.username);\n        localStorage.setItem('chat-avatar', this.selectedAvatar);\n\n        // 保存主题选择\n        localStorage.setItem('chat-theme', this.selectedTheme);\n        document.body.classList.add(`theme-${this.selectedTheme}`);\n      }\n    },\n    // 选择头像\n    selectAvatar(avatar) {\n      this.selectedAvatar = avatar;\n      this.isCustomAvatarSelected = false;\n    },\n    // 选择主题\n    selectTheme(themeId) {\n      this.selectedTheme = themeId;\n\n      // 移除所有主题类\n      document.body.classList.remove('theme-discord', 'theme-dark');\n\n      // 添加选中的主题类\n      document.body.classList.add(`theme-${themeId}`);\n    },\n    // 处理头像上传\n    handleAvatarUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n\n      // 检查文件类型\n      if (!file.type.match('image.*')) {\n        alert('请上传图片文件');\n        return;\n      }\n\n      // 检查文件大小 (限制为 2MB)\n      if (file.size > 2 * 1024 * 1024) {\n        alert('图片大小不能超过 2MB');\n        return;\n      }\n\n      // 创建文件读取器\n      const reader = new FileReader();\n\n      // 读取完成后的回调\n      reader.onload = e => {\n        this.customAvatarPreview = e.target.result;\n        this.selectedAvatar = e.target.result;\n        this.isCustomAvatarSelected = true;\n      };\n\n      // 读取文件\n      reader.readAsDataURL(file);\n    },\n    // 获取备用头像URL\n    getFallbackAvatarUrl() {\n      return getFallbackAvatarUrl();\n    },\n    // 处理头像加载错误\n    handleAvatarError(event) {\n      handleAvatarError(event);\n    }\n  }\n};","map":{"version":3,"names":["getRandomAvatarUrl","getRandomDefaultAvatarUrl","getFallbackAvatarUrl","handleAvatarError","name","data","username","selectedAvatar","customAvatarPreview","isCustomAvatarSelected","selectedTheme","themes","id","defaultAvatars","created","savedTheme","localStorage","getItem","selectTheme","generateDefaultAvatars","savedUsername","savedAvatar","includes","methods","i","push","regenerateAvatars","updateUsernameAvatar","trim","setUsername","$emit","avatar","setItem","document","body","classList","add","selectAvatar","themeId","remove","handleAvatarUpload","event","file","target","files","type","match","alert","size","reader","FileReader","onload","e","result","readAsDataURL"],"sources":["C:\\Users\\Administrator\\Desktop\\discord-chat-app\\fack\\just-do-it\\src\\components\\chat\\UserNameInput.vue"],"sourcesContent":["<template>\r\n  <div class=\"username-input-container\">\r\n    <h2 class=\"title\">欢迎来到聊天室</h2>\r\n    \r\n    <div class=\"avatar-selection\">\r\n      <h3>选择头像</h3>\r\n      <div class=\"avatar-options\">\r\n        <!-- 默认头像选项 -->\r\n        <div \r\n          v-for=\"(avatar, index) in defaultAvatars\" \r\n          :key=\"index\"\r\n          class=\"avatar-option\"\r\n          :class=\"{ selected: selectedAvatar === avatar }\"\r\n          @click=\"selectAvatar(avatar)\"\r\n        >\r\n          <img \r\n            :src=\"avatar\" \r\n            alt=\"头像选项\" \r\n            class=\"avatar-img\" \r\n            @error=\"handleAvatarError\"\r\n          />\r\n        </div>\r\n        \r\n        <!-- 刷新头像按钮 -->\r\n        <div \r\n          class=\"avatar-option refresh-avatar\"\r\n          @click=\"regenerateAvatars\"\r\n          title=\"刷新头像选项\"\r\n        >\r\n          <div class=\"refresh-icon\">↻</div>\r\n        </div>\r\n        \r\n        <!-- 自定义头像上传 -->\r\n        <div \r\n          class=\"avatar-option custom-avatar\"\r\n          :class=\"{ selected: isCustomAvatarSelected }\"\r\n        >\r\n          <label for=\"avatar-upload\" class=\"custom-avatar-label\">\r\n            <img \r\n              :src=\"customAvatarPreview || getFallbackAvatarUrl()\" \r\n              alt=\"自定义头像\" \r\n              class=\"avatar-img\"\r\n              @error=\"handleAvatarError\"\r\n            />\r\n            <div class=\"upload-icon\" v-if=\"!customAvatarPreview\">+</div>\r\n          </label>\r\n          <input \r\n            type=\"file\" \r\n            id=\"avatar-upload\" \r\n            class=\"avatar-upload\" \r\n            accept=\"image/*\"\r\n            @change=\"handleAvatarUpload\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"input-group\">\r\n      <label for=\"username\">请输入您的昵称</label>\r\n      <input \r\n        type=\"text\" \r\n        id=\"username\"\r\n        v-model=\"username\" \r\n        placeholder=\"输入昵称...\" \r\n        @keyup.enter=\"setUsername\"\r\n        class=\"username-input\"\r\n        @input=\"updateUsernameAvatar\"\r\n      />\r\n    </div>\r\n    \r\n    <div class=\"theme-selection\">\r\n      <h3>选择主题</h3>\r\n      <div class=\"theme-options\">\r\n        <div \r\n          v-for=\"theme in themes\" \r\n          :key=\"theme.id\"\r\n          class=\"theme-option\"\r\n          :class=\"{ selected: selectedTheme === theme.id }\"\r\n          @click=\"selectTheme(theme.id)\"\r\n        >\r\n          <div class=\"theme-color\" :class=\"`theme-preview-${theme.id}`\"></div>\r\n          <span class=\"theme-name\">{{ theme.name }}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <button \r\n      @click=\"setUsername\" \r\n      class=\"enter-button\"\r\n      :disabled=\"!username.trim()\"\r\n    >\r\n      进入聊天室\r\n    </button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getRandomAvatarUrl, getRandomDefaultAvatarUrl, getFallbackAvatarUrl, handleAvatarError } from '../../utils/avatarUtils';\r\n\r\nexport default {\r\n  name: 'UserNameInput',\r\n  data() {\r\n    return {\r\n      username: '', // 用户昵称\r\n      selectedAvatar: '', // 选中的头像\r\n      customAvatarPreview: null, // 自定义头像预览\r\n      isCustomAvatarSelected: false, // 是否选择了自定义头像\r\n      selectedTheme: 'discord', // 默认主题\r\n      themes: [\r\n        { id: 'discord', name: 'Discord' },\r\n        { id: 'dark', name: '暗黑' }\r\n      ],\r\n      defaultAvatars: [] // 默认头像列表\r\n    }\r\n  },\r\n  created() {\r\n    // 从 localStorage 获取保存的主题\r\n    const savedTheme = localStorage.getItem('chat-theme');\r\n    if (savedTheme) {\r\n      this.selectedTheme = savedTheme;\r\n      this.selectTheme(savedTheme);\r\n    }\r\n    \r\n    // 生成默认头像\r\n    this.generateDefaultAvatars();\r\n    \r\n    // 尝试从localStorage恢复用户名和头像\r\n    const savedUsername = localStorage.getItem('chat-username');\r\n    const savedAvatar = localStorage.getItem('chat-avatar');\r\n    \r\n    if (savedUsername) {\r\n      this.username = savedUsername;\r\n    }\r\n    \r\n    if (savedAvatar) {\r\n      this.selectedAvatar = savedAvatar;\r\n      this.isCustomAvatarSelected = !this.defaultAvatars.includes(savedAvatar);\r\n    }\r\n  },\r\n  methods: {\r\n    // 生成默认头像\r\n    generateDefaultAvatars() {\r\n      // 清空数组\r\n      this.defaultAvatars = [];\r\n      \r\n      // 生成6个随机头像\r\n      for (let i = 0; i < 6; i++) {\r\n        this.defaultAvatars.push(getRandomDefaultAvatarUrl());\r\n      }\r\n      \r\n      // 默认选择第一个头像\r\n      if (!this.selectedAvatar) {\r\n        this.selectedAvatar = this.defaultAvatars[0];\r\n      }\r\n    },\r\n    \r\n    // 重新生成头像\r\n    regenerateAvatars() {\r\n      this.generateDefaultAvatars();\r\n    },\r\n    \r\n    // 根据用户名更新头像\r\n    updateUsernameAvatar() {\r\n      if (this.username.trim() && !this.isCustomAvatarSelected) {\r\n        // 如果用户输入了用户名，并且没有选择自定义头像，则根据用户名生成头像\r\n        this.selectedAvatar = getRandomAvatarUrl(this.username);\r\n      }\r\n    },\r\n    \r\n    // 设置用户名和头像\r\n    setUsername() {\r\n      if (this.username.trim()) {\r\n        // 如果没有选择头像，则根据用户名生成一个\r\n        if (!this.selectedAvatar) {\r\n          this.selectedAvatar = getRandomAvatarUrl(this.username);\r\n        }\r\n        \r\n        // 将用户名和头像传递给父组件\r\n        this.$emit('set-username', {\r\n          username: this.username,\r\n          avatar: this.selectedAvatar\r\n        });\r\n        \r\n        // 保存到localStorage\r\n        localStorage.setItem('chat-username', this.username);\r\n        localStorage.setItem('chat-avatar', this.selectedAvatar);\r\n        \r\n        // 保存主题选择\r\n        localStorage.setItem('chat-theme', this.selectedTheme);\r\n        document.body.classList.add(`theme-${this.selectedTheme}`);\r\n      }\r\n    },\r\n    \r\n    // 选择头像\r\n    selectAvatar(avatar) {\r\n      this.selectedAvatar = avatar;\r\n      this.isCustomAvatarSelected = false;\r\n    },\r\n    \r\n    // 选择主题\r\n    selectTheme(themeId) {\r\n      this.selectedTheme = themeId;\r\n      \r\n      // 移除所有主题类\r\n      document.body.classList.remove('theme-discord', 'theme-dark');\r\n      \r\n      // 添加选中的主题类\r\n      document.body.classList.add(`theme-${themeId}`);\r\n    },\r\n    \r\n    // 处理头像上传\r\n    handleAvatarUpload(event) {\r\n      const file = event.target.files[0];\r\n      if (!file) return;\r\n      \r\n      // 检查文件类型\r\n      if (!file.type.match('image.*')) {\r\n        alert('请上传图片文件');\r\n        return;\r\n      }\r\n      \r\n      // 检查文件大小 (限制为 2MB)\r\n      if (file.size > 2 * 1024 * 1024) {\r\n        alert('图片大小不能超过 2MB');\r\n        return;\r\n      }\r\n      \r\n      // 创建文件读取器\r\n      const reader = new FileReader();\r\n      \r\n      // 读取完成后的回调\r\n      reader.onload = (e) => {\r\n        this.customAvatarPreview = e.target.result;\r\n        this.selectedAvatar = e.target.result;\r\n        this.isCustomAvatarSelected = true;\r\n      };\r\n      \r\n      // 读取文件\r\n      reader.readAsDataURL(file);\r\n    },\r\n    \r\n    // 获取备用头像URL\r\n    getFallbackAvatarUrl() {\r\n      return getFallbackAvatarUrl();\r\n    },\r\n    \r\n    // 处理头像加载错误\r\n    handleAvatarError(event) {\r\n      handleAvatarError(event);\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.username-input-container {\r\n  max-width: 500px;\r\n  margin: 2rem auto;\r\n  padding: 2rem;\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n  border-radius: 0.5rem;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\r\n  backdrop-filter: blur(10px);\r\n  color: var(--text-color);\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n}\r\n\r\n.title {\r\n  text-align: center;\r\n  margin-bottom: 2rem;\r\n  font-size: 1.75rem;\r\n  color: var(--header-color);\r\n}\r\n\r\n.input-group {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.input-group label {\r\n  display: block;\r\n  margin-bottom: 0.5rem;\r\n  font-weight: 500;\r\n}\r\n\r\n.username-input {\r\n  width: 100%;\r\n  padding: 0.75rem 1rem;\r\n  border-radius: 0.5rem;\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n  color: var(--text-color);\r\n  font-size: 1rem;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.username-input:focus {\r\n  outline: none;\r\n  border-color: var(--primary-color);\r\n  box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 138, 113, 88), 0.2);\r\n}\r\n\r\n.avatar-selection, .theme-selection {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.avatar-selection h3, .theme-selection h3 {\r\n  margin-bottom: 0.75rem;\r\n  font-size: 1.1rem;\r\n  font-weight: 500;\r\n}\r\n\r\n.avatar-options {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 0.75rem;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.avatar-option {\r\n  width: 60px;\r\n  height: 60px;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n  border: 2px solid transparent;\r\n  transition: all 0.2s ease;\r\n  position: relative;\r\n}\r\n\r\n.avatar-option:hover {\r\n  transform: scale(1.05);\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.avatar-option.selected {\r\n  border-color: var(--primary-color);\r\n  box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 138, 113, 88), 0.3);\r\n}\r\n\r\n.avatar-img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.custom-avatar {\r\n  position: relative;\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.custom-avatar-label {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n}\r\n\r\n.upload-icon {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  font-size: 1.5rem;\r\n  color: var(--text-color);\r\n  opacity: 0.7;\r\n}\r\n\r\n.avatar-upload {\r\n  position: absolute;\r\n  width: 0.1px;\r\n  height: 0.1px;\r\n  opacity: 0;\r\n  overflow: hidden;\r\n  z-index: -1;\r\n}\r\n\r\n.refresh-avatar {\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.refresh-icon {\r\n  font-size: 1.5rem;\r\n  color: var(--text-color);\r\n  opacity: 0.7;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.refresh-avatar:hover .refresh-icon {\r\n  transform: rotate(180deg);\r\n  opacity: 1;\r\n}\r\n\r\n.theme-options {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 0.75rem;\r\n}\r\n\r\n.theme-option {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  padding: 0.5rem;\r\n  border-radius: 0.5rem;\r\n  border: 1px solid transparent;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.theme-option:hover {\r\n  background-color: rgba(255, 255, 255, 0.05);\r\n}\r\n\r\n.theme-option.selected {\r\n  border-color: var(--primary-color);\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n}\r\n\r\n.theme-color {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.theme-preview-discord {\r\n  background: linear-gradient(135deg, #7289da, #5c6bc0);\r\n}\r\n\r\n.theme-preview-dark {\r\n  background: linear-gradient(135deg, #bb86fc, #1e1e1e);\r\n}\r\n\r\n.theme-name {\r\n  font-size: 0.85rem;\r\n}\r\n\r\n.enter-button {\r\n  width: 100%;\r\n  padding: 0.75rem 1rem;\r\n  background-color: var(--primary-color);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 0.5rem;\r\n  font-size: 1rem;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  margin-top: 1rem;\r\n}\r\n\r\n.enter-button:hover:not(:disabled) {\r\n  background-color: var(--secondary-color);\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.enter-button:active:not(:disabled) {\r\n  transform: translateY(0);\r\n}\r\n\r\n.enter-button:disabled {\r\n  background-color: rgba(128, 128, 128, 0.3);\r\n  cursor: not-allowed;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}