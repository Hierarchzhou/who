{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createElementVNode as _createElementVNode, createVNode as _createVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat-interface\"\n};\nconst _hoisted_3 = {\n  class: \"chat-header\"\n};\nconst _hoisted_4 = {\n  class: \"user-info-container\"\n};\nconst _hoisted_5 = {\n  class: \"user-info\"\n};\nconst _hoisted_6 = [\"src\"];\nconst _hoisted_7 = {\n  class: \"current-username\"\n};\nconst _hoisted_8 = {\n  class: \"chat-main\"\n};\nconst _hoisted_9 = {\n  class: \"messages-container\"\n};\nconst _hoisted_10 = {\n  class: \"messages-list\",\n  ref: \"messagesList\"\n};\nconst _hoisted_11 = {\n  class: \"message-avatar\"\n};\nconst _hoisted_12 = [\"src\", \"alt\"];\nconst _hoisted_13 = {\n  class: \"message-content\"\n};\nconst _hoisted_14 = {\n  class: \"message-header\"\n};\nconst _hoisted_15 = {\n  class: \"message-sender\"\n};\nconst _hoisted_16 = {\n  class: \"message-time\"\n};\nconst _hoisted_17 = {\n  class: \"message-text\"\n};\nconst _hoisted_18 = {\n  class: \"input-container\"\n};\nconst _hoisted_19 = {\n  class: \"input-wrapper\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UserNameInput = _resolveComponent(\"UserNameInput\");\n  const _component_ThemeSelector = _resolveComponent(\"ThemeSelector\");\n  const _component_UserProfileEditor = _resolveComponent(\"UserProfileEditor\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 用户名输入界面，当用户未设置昵称时显示 \"), !$setup.username ? (_openBlock(), _createBlock(_component_UserNameInput, {\n    key: 0,\n    onSetUsername: $options.setUsername\n  }, null, 8 /* PROPS */, [\"onSetUsername\"])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 聊天界面，当用户已设置昵称时显示 \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"header\", _hoisted_3, [_cache[6] || (_cache[6] = _createElementVNode(\"h2\", {\n    class: \"chat-title\"\n  }, \"Vue聊天室\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_ThemeSelector), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"img\", {\n    src: $setup.userAvatar || $setup.getFallbackAvatarUrl(),\n    alt: \"用户头像\",\n    class: \"user-avatar\",\n    onError: _cache[0] || (_cache[0] = (...args) => $setup.handleAvatarError && $setup.handleAvatarError(...args)),\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.openProfileEditor && $options.openProfileEditor(...args))\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_6), _createElementVNode(\"span\", _hoisted_7, _toDisplayString($setup.username), 1 /* TEXT */)])])]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"div\", _hoisted_10, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.messages, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id,\n      class: \"message-item\"\n    }, [_createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"img\", {\n      src: message.avatar || $setup.getFallbackAvatarUrl(),\n      alt: message.sender,\n      onError: _cache[2] || (_cache[2] = (...args) => $setup.handleAvatarError && $setup.handleAvatarError(...args))\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_12)]), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"span\", _hoisted_15, _toDisplayString(message.sender), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_16, _toDisplayString($setup.formatTime(message.timestamp)), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_17, _toDisplayString(message.content), 1 /* TEXT */)])]);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */)]), _createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"div\", _hoisted_19, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.newMessage = $event),\n    onKeyup: _cache[4] || (_cache[4] = _withKeys((...args) => $setup.sendMessage && $setup.sendMessage(...args), [\"enter\"])),\n    placeholder: \"发送消息...\",\n    class: \"message-input\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.newMessage]]), _createElementVNode(\"button\", {\n    class: \"send-button\",\n    onClick: _cache[5] || (_cache[5] = (...args) => $setup.sendMessage && $setup.sendMessage(...args))\n  }, \" 发送 \")])])])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createCommentVNode(\" 个人资料编辑器 \"), _createVNode(_component_UserProfileEditor, {\n    isOpen: $setup.showProfileEditor,\n    currentUserInfo: $setup.currentUserInfo,\n    onClose: $options.closeProfileEditor,\n    onUpdateProfile: $options.updateProfile\n  }, null, 8 /* PROPS */, [\"isOpen\", \"currentUserInfo\", \"onClose\", \"onUpdateProfile\"])]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createCommentVNode","$setup","username","_createBlock","_component_UserNameInput","key","onSetUsername","$options","setUsername","_Fragment","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_createVNode","_component_ThemeSelector","_hoisted_5","src","userAvatar","getFallbackAvatarUrl","alt","onError","_cache","args","handleAvatarError","onClick","openProfileEditor","_hoisted_6","_hoisted_7","_toDisplayString","_hoisted_8","_hoisted_9","_hoisted_10","_renderList","messages","message","id","_hoisted_11","avatar","sender","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","formatTime","timestamp","_hoisted_17","content","_hoisted_18","_hoisted_19","type","$event","newMessage","onKeyup","_withKeys","sendMessage","placeholder","_component_UserProfileEditor","isOpen","showProfileEditor","currentUserInfo","onClose","closeProfileEditor","onUpdateProfile","updateProfile"],"sources":["C:\\Users\\Administrator\\Desktop\\discord-chat-app\\fack\\just-do-it\\src\\components\\chat\\ChatContainer.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <!-- 用户名输入界面，当用户未设置昵称时显示 -->\r\n    <UserNameInput \r\n      v-if=\"!username\" \r\n      @set-username=\"setUsername\" \r\n    />\r\n    \r\n    <!-- 聊天界面，当用户已设置昵称时显示 -->\r\n    <div v-else class=\"chat-interface\">\r\n      <header class=\"chat-header\">\r\n        <h2 class=\"chat-title\">Vue聊天室</h2>\r\n        <div class=\"user-info-container\">\r\n          <ThemeSelector />\r\n          <div class=\"user-info\">\r\n            <img \r\n              :src=\"userAvatar || getFallbackAvatarUrl()\" \r\n              alt=\"用户头像\" \r\n              class=\"user-avatar\"\r\n              @error=\"handleAvatarError\"\r\n              @click=\"openProfileEditor\" \r\n            >\r\n            <span class=\"current-username\">{{ username }}</span>\r\n          </div>\r\n        </div>\r\n      </header>\r\n      \r\n      <div class=\"chat-main\">\r\n        <div class=\"messages-container\">\r\n          <div class=\"messages-list\" ref=\"messagesList\">\r\n            <div v-for=\"message in messages\" :key=\"message.id\" class=\"message-item\">\r\n              <div class=\"message-avatar\">\r\n                <img \r\n                  :src=\"message.avatar || getFallbackAvatarUrl()\" \r\n                  :alt=\"message.sender\"\r\n                  @error=\"handleAvatarError\"\r\n                >\r\n              </div>\r\n              <div class=\"message-content\">\r\n                <div class=\"message-header\">\r\n                  <span class=\"message-sender\">{{ message.sender }}</span>\r\n                  <span class=\"message-time\">{{ formatTime(message.timestamp) }}</span>\r\n                </div>\r\n                <div class=\"message-text\">{{ message.content }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"input-container\">\r\n          <div class=\"input-wrapper\">\r\n            <input \r\n              type=\"text\" \r\n              v-model=\"newMessage\" \r\n              @keyup.enter=\"sendMessage\"\r\n              placeholder=\"发送消息...\"\r\n              class=\"message-input\"\r\n            >\r\n            <button class=\"send-button\" @click=\"sendMessage\">\r\n              发送\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 个人资料编辑器 -->\r\n    <UserProfileEditor \r\n      :isOpen=\"showProfileEditor\"\r\n      :currentUserInfo=\"currentUserInfo\"\r\n      @close=\"closeProfileEditor\"\r\n      @update-profile=\"updateProfile\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport UserNameInput from './UserNameInput.vue';\r\nimport ThemeSelector from './ThemeSelector.vue';\r\nimport UserProfileEditor from './UserProfileEditor.vue';\r\nimport axios from 'axios';\r\nimport { handleAvatarError, getFallbackAvatarUrl } from '../../utils/avatarUtils';\r\nimport { ref, onMounted, onUnmounted, nextTick, watch } from 'vue';\r\n\r\nexport default {\r\n  name: 'ChatContainer',\r\n  components: {\r\n    UserNameInput,\r\n    ThemeSelector,\r\n    UserProfileEditor\r\n  },\r\n  props: {\r\n    currentUser: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  setup(props, { emit }) {\r\n    const messages = ref([]);\r\n    const newMessage = ref('');\r\n    const messagesList = ref(null);\r\n    const apiUrl = 'http://localhost:3001/api/messages';\r\n    const usersApiUrl = 'http://localhost:3001/api/users';\r\n    const username = ref(props.currentUser.username || '');\r\n    const userAvatar = ref(props.currentUser.avatar || '');\r\n    const onlineUsers = ref([]);\r\n    const pollingInterval = ref(null);\r\n    const onlinePollingInterval = ref(null);\r\n    const currentTheme = ref(localStorage.getItem('chat-theme') || 'discord');\r\n    const showProfileEditor = ref(false);\r\n    const currentUserInfo = ref({});\r\n\r\n    // 获取消息\r\n    const fetchMessages = async () => {\r\n      try {\r\n        const response = await axios.get(apiUrl);\r\n        messages.value = response.data;\r\n        nextTick(() => {\r\n          scrollToBottom();\r\n        });\r\n      } catch (error) {\r\n        console.error('获取消息失败:', error);\r\n      }\r\n    };\r\n\r\n    // 获取在线用户\r\n    const fetchOnlineUsers = async () => {\r\n      try {\r\n        const response = await axios.get(`${usersApiUrl}/online`);\r\n        onlineUsers.value = response.data;\r\n        // 向父组件发送在线用户更新\r\n        emit('update-online-users', onlineUsers.value);\r\n      } catch (error) {\r\n        console.error('获取在线用户失败:', error);\r\n        if (onlineUsers.value.length === 0) {\r\n          onlineUsers.value = [\r\n            { username: username.value, avatar: userAvatar.value }\r\n          ];\r\n          emit('update-online-users', onlineUsers.value);\r\n        }\r\n      }\r\n    };\r\n\r\n    // 发送消息\r\n    const sendMessage = async () => {\r\n      if (!newMessage.value.trim()) return;\r\n      \r\n      try {\r\n        const response = await axios.post(apiUrl, {\r\n          sender: username.value,\r\n          content: newMessage.value,\r\n          avatar: userAvatar.value\r\n        });\r\n        \r\n        messages.value.push(response.data);\r\n        newMessage.value = '';\r\n        nextTick(() => {\r\n          scrollToBottom();\r\n        });\r\n      } catch (error) {\r\n        console.error('发送消息失败:', error);\r\n      }\r\n    };\r\n\r\n    // 滚动到底部\r\n    const scrollToBottom = () => {\r\n      nextTick(() => {\r\n        const messagesListEl = messagesList.value;\r\n        if (messagesListEl) {\r\n          messagesListEl.scrollTop = messagesListEl.scrollHeight;\r\n        }\r\n      });\r\n    };\r\n\r\n    // 格式化时间\r\n    const formatTime = (timestamp) => {\r\n      const date = new Date(timestamp);\r\n      return date.toLocaleTimeString('zh-CN', {\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      });\r\n    };\r\n\r\n    // 设置定时获取消息和在线用户\r\n    let messageInterval;\r\n    let onlineUsersInterval;\r\n    onMounted(() => {\r\n      fetchMessages();\r\n      fetchOnlineUsers();\r\n      messageInterval = setInterval(fetchMessages, 3000);\r\n      onlineUsersInterval = setInterval(fetchOnlineUsers, 5000);\r\n    });\r\n\r\n    onUnmounted(() => {\r\n      if (messageInterval) {\r\n        clearInterval(messageInterval);\r\n      }\r\n      if (onlineUsersInterval) {\r\n        clearInterval(onlineUsersInterval);\r\n      }\r\n    });\r\n\r\n    // 监听消息列表变化\r\n    watch(messages, () => {\r\n      nextTick(() => {\r\n        scrollToBottom();\r\n      });\r\n    }, { deep: true });\r\n\r\n    return {\r\n      messages,\r\n      newMessage,\r\n      messagesList,\r\n      sendMessage,\r\n      formatTime,\r\n      handleAvatarError,\r\n      getFallbackAvatarUrl,\r\n      username,\r\n      userAvatar,\r\n      onlineUsers,\r\n      usersApiUrl,\r\n      pollingInterval,\r\n      onlinePollingInterval,\r\n      currentTheme,\r\n      showProfileEditor,\r\n      currentUserInfo,\r\n      fetchOnlineUsers\r\n    };\r\n  },\r\n  created() {\r\n    // 从localStorage获取用户信息\r\n    const savedUsername = localStorage.getItem('chat-username');\r\n    const savedAvatar = localStorage.getItem('chat-avatar');\r\n    \r\n    if (savedUsername && !this.username) {\r\n      this.username = savedUsername;\r\n    }\r\n    \r\n    if (savedAvatar && !this.userAvatar) {\r\n      this.userAvatar = savedAvatar;\r\n    } else if (!this.userAvatar) {\r\n      // 设置默认头像\r\n      this.userAvatar = '/avatars/default.png';\r\n      localStorage.setItem('chat-avatar', this.userAvatar);\r\n    }\r\n    \r\n    // 如果用户已登录，注册用户\r\n    if (this.username) {\r\n      this.registerUser();\r\n    }\r\n  },\r\n  mounted() {\r\n    // 如果用户已登录，获取消息和在线用户\r\n    if (this.username) {\r\n      this.fetchOnlineUsers();\r\n      \r\n      // 设置轮询\r\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\r\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\r\n    }\r\n    \r\n    // 应用保存的主题\r\n    document.body.classList.add(`theme-${this.currentTheme}`);\r\n  },\r\n  beforeUnmount() {\r\n    // 清除轮询\r\n    clearInterval(this.pollingInterval);\r\n    clearInterval(this.onlinePollingInterval);\r\n  },\r\n  methods: {\r\n    // 设置用户名和头像\r\n    setUsername(userData) {\r\n      this.username = userData.username;\r\n      this.userAvatar = userData.avatar;\r\n      \r\n      // 保存到localStorage\r\n      localStorage.setItem('chat-username', this.username);\r\n      localStorage.setItem('chat-avatar', this.userAvatar);\r\n      \r\n      // 注册用户\r\n      this.registerUser();\r\n      \r\n      // 获取消息和在线用户\r\n      this.fetchMessages();\r\n      this.fetchOnlineUsers();\r\n      \r\n      // 设置轮询\r\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\r\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\r\n    },\r\n    \r\n    // 注册用户\r\n    async registerUser() {\r\n      try {\r\n        await axios.post(`${this.usersApiUrl}/register`, {\r\n          username: this.username,\r\n          avatar: this.userAvatar\r\n        });\r\n        console.log('用户注册成功');\r\n      } catch (error) {\r\n        console.error('用户注册失败:', error);\r\n      }\r\n    },\r\n    \r\n    // 打开个人资料编辑器\r\n    openProfileEditor() {\r\n      this.showProfileEditor = true;\r\n      this.currentUserInfo = {\r\n        username: this.username,\r\n        avatar: this.userAvatar\r\n      };\r\n    },\r\n    // 关闭个人资料编辑器\r\n    closeProfileEditor() {\r\n      this.showProfileEditor = false;\r\n    },\r\n    // 更新用户信息\r\n    updateProfile(updatedInfo) {\r\n      this.username = updatedInfo.username;\r\n      this.userAvatar = updatedInfo.avatar;\r\n      \r\n      // 保存到localStorage\r\n      localStorage.setItem('chat-username', this.username);\r\n      localStorage.setItem('chat-avatar', this.userAvatar);\r\n      \r\n      // 注册用户\r\n      this.registerUser();\r\n      \r\n      // 获取消息和在线用户\r\n      this.fetchMessages();\r\n      this.fetchOnlineUsers();\r\n      \r\n      // 设置轮询\r\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\r\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container {\r\n  flex: 1;\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: var(--chat-background); /* 使用主题变量 */\r\n  color: var(--text-color); /* 使用主题变量 */\r\n  position: relative;\r\n  z-index: 1;\r\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);\r\n  background-image: var(--background-image); /* 使用主题变量中的背景图案 */\r\n  background-repeat: repeat;\r\n  background-size: 100px 100px; /* 设置背景图案大小 */\r\n}\r\n\r\n.chat-interface {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  backdrop-filter: blur(5px); /* 添加模糊效果 */\r\n}\r\n\r\n.chat-header {\r\n  padding: 1rem 1.5rem;\r\n  background-color: var(--primary-color); /* 使用主题变量 */\r\n  color: var(--header-color); /* 使用主题变量 */\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  box-shadow: var(--header-shadow);\r\n  position: relative;\r\n  z-index: 2;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1); /* 添加边框 */\r\n  background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.05), transparent); /* 添加渐变效果 */\r\n}\r\n\r\n.chat-title {\r\n  margin: 0;\r\n  font-size: 1.25rem;\r\n  font-weight: 600;\r\n  letter-spacing: 0.5px;\r\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2); /* 添加文字阴影 */\r\n}\r\n\r\n.user-info-container {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 1rem;\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  padding: 0.5rem 0.75rem;\r\n  border-radius: 2rem;\r\n  backdrop-filter: blur(5px);\r\n  border: 1px solid rgba(255, 255, 255, 0.05); /* 添加细微边框 */\r\n  transition: all 0.2s ease; /* 添加过渡效果 */\r\n}\r\n\r\n.user-info:hover {\r\n  background-color: rgba(255, 255, 255, 0.15); /* 悬停时背景变亮 */\r\n  transform: translateY(-1px); /* 悬停时轻微上移 */\r\n}\r\n\r\n.user-avatar {\r\n  width: 32px; /* 增加头像尺寸 */\r\n  height: 32px; /* 增加头像尺寸 */\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  border: var(--avatar-border, 1px solid rgba(255, 255, 255, 0.3));\r\n  box-shadow: var(--avatar-shadow, 0 2px 4px rgba(0, 0, 0, 0.2));\r\n  transition: transform 0.2s ease; /* 添加过渡效果 */\r\n}\r\n\r\n.user-avatar:hover {\r\n  transform: scale(1.1); /* 悬停时放大 */\r\n}\r\n\r\n.current-username {\r\n  margin-left: 0.5rem;\r\n  font-weight: 500;\r\n  color: var(--text-color);\r\n  mix-blend-mode: overlay;\r\n}\r\n\r\n.chat-main {\r\n  display: flex;\r\n  flex: 1;\r\n  overflow: hidden;\r\n  position: relative;\r\n  background-image: var(--background-image); /* 使用主题变量中的背景图案 */\r\n  background-repeat: repeat;\r\n  background-size: 100px 100px; /* 设置背景图案大小 */\r\n}\r\n\r\n.messages-container {\r\n  flex: 1;\r\n  overflow: hidden;\r\n  padding: 20px;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.messages-list {\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  padding-right: 8px;\r\n}\r\n\r\n.messages-list::-webkit-scrollbar {\r\n  width: 8px;\r\n}\r\n\r\n.messages-list::-webkit-scrollbar-track {\r\n  background: transparent;\r\n}\r\n\r\n.messages-list::-webkit-scrollbar-thumb {\r\n  background-color: var(--background-tertiary);\r\n  border-radius: 4px;\r\n}\r\n\r\n.message-item {\r\n  display: flex;\r\n  margin-bottom: 16px;\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.message-item:hover {\r\n  background-color: var(--background-modifier-hover);\r\n}\r\n\r\n.message-avatar {\r\n  margin-right: 16px;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.message-avatar img {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n}\r\n\r\n.message-content {\r\n  flex: 1;\r\n  min-width: 0;\r\n}\r\n\r\n.message-header {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.message-sender {\r\n  font-weight: 500;\r\n  color: var(--header-primary);\r\n  margin-right: 8px;\r\n}\r\n\r\n.message-time {\r\n  font-size: 0.8rem;\r\n  color: var(--text-muted);\r\n}\r\n\r\n.message-text {\r\n  color: var(--text-normal);\r\n  word-wrap: break-word;\r\n  line-height: 1.4;\r\n}\r\n\r\n.input-container {\r\n  padding: 16px;\r\n  background-color: var(--background-secondary);\r\n  border-top: 1px solid var(--border-color);\r\n}\r\n\r\n.input-wrapper {\r\n  display: flex;\r\n  gap: 12px;\r\n  padding: 0 16px;\r\n  background-color: var(--background-tertiary);\r\n  border-radius: 8px;\r\n}\r\n\r\n.message-input {\r\n  flex: 1;\r\n  padding: 12px 0;\r\n  background: none;\r\n  border: none;\r\n  color: var(--text-normal);\r\n  font-size: 1rem;\r\n  outline: none;\r\n}\r\n\r\n.message-input::placeholder {\r\n  color: var(--text-muted);\r\n}\r\n\r\n.send-button {\r\n  padding: 8px 16px;\r\n  background: none;\r\n  border: none;\r\n  color: var(--text-link);\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: color 0.2s;\r\n}\r\n\r\n.send-button:hover {\r\n  color: var(--header-primary);\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .chat-container {\r\n    height: auto;\r\n    flex: 1;\r\n  }\r\n  \r\n  .messages-container {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .message-avatar img {\r\n    width: 32px;\r\n    height: 32px;\r\n  }\r\n  \r\n  .input-container {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .input-wrapper {\r\n    padding: 0 12px;\r\n  }\r\n  \r\n  .message-input {\r\n    padding: 10px 0;\r\n  }\r\n  \r\n  .send-button {\r\n    padding: 6px 12px;\r\n  }\r\n}\r\n</style> \r\n\r\n\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;EAQbA,KAAK,EAAC;AAAgB;;EACxBA,KAAK,EAAC;AAAa;;EAEpBA,KAAK,EAAC;AAAqB;;EAEzBA,KAAK,EAAC;AAAW;mBAdhC;;EAsBkBA,KAAK,EAAC;AAAkB;;EAK/BA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAoB;;EACxBA,KAAK,EAAC,eAAe;EAACC,GAAG,EAAC;;;EAEtBD,KAAK,EAAC;AAAgB;oBA/BzC;;EAsCmBA,KAAK,EAAC;AAAiB;;EACrBA,KAAK,EAAC;AAAgB;;EACnBA,KAAK,EAAC;AAAgB;;EACtBA,KAAK,EAAC;AAAc;;EAEvBA,KAAK,EAAC;AAAc;;EAM5BA,KAAK,EAAC;AAAiB;;EACrBA,KAAK,EAAC;AAAe;;;;;uBAjDlCE,mBAAA,CAwEM,OAxENC,UAwEM,GAvEJC,mBAAA,yBAA4B,E,CAEnBC,MAAA,CAAAC,QAAQ,I,cADjBC,YAAA,CAGEC,wBAAA;IANNC,GAAA;IAKOC,aAAY,EAAEC,QAAA,CAAAC;+DAIjBV,mBAAA,CAuDMW,SAAA;IAhEVJ,GAAA;EAAA,IAQIL,mBAAA,sBAAyB,EACzBU,mBAAA,CAuDM,OAvDNC,UAuDM,GAtDJD,mBAAA,CAeS,UAfTE,UAeS,G,0BAdPF,mBAAA,CAAkC;IAA9Bd,KAAK,EAAC;EAAY,GAAC,QAAM,sBAC7Bc,mBAAA,CAYM,OAZNG,UAYM,GAXJC,YAAA,CAAiBC,wBAAA,GACjBL,mBAAA,CASM,OATNM,UASM,GARJN,mBAAA,CAMC;IALEO,GAAG,EAAEhB,MAAA,CAAAiB,UAAU,IAAIjB,MAAA,CAAAkB,oBAAoB;IACxCC,GAAG,EAAC,MAAM;IACVxB,KAAK,EAAC,aAAa;IAClByB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEtB,MAAA,CAAAuB,iBAAA,IAAAvB,MAAA,CAAAuB,iBAAA,IAAAD,IAAA,CAAiB;IACxBE,OAAK,EAAAH,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEhB,QAAA,CAAAmB,iBAAA,IAAAnB,QAAA,CAAAmB,iBAAA,IAAAH,IAAA,CAAiB;2CApBvCI,UAAA,GAsBYjB,mBAAA,CAAoD,QAApDkB,UAAoD,EAAAC,gBAAA,CAAlB5B,MAAA,CAAAC,QAAQ,iB,OAKhDQ,mBAAA,CAoCM,OApCNoB,UAoCM,GAnCJpB,mBAAA,CAmBM,OAnBNqB,UAmBM,GAlBJrB,mBAAA,CAiBM,OAjBNsB,WAiBM,I,kBAhBJlC,mBAAA,CAeMW,SAAA,QA7ClBwB,WAAA,CA8BmChC,MAAA,CAAAiC,QAAQ,EAAnBC,OAAO;yBAAnBrC,mBAAA,CAeM;MAf4BO,GAAG,EAAE8B,OAAO,CAACC,EAAE;MAAExC,KAAK,EAAC;QACvDc,mBAAA,CAMM,OANN2B,WAMM,GALJ3B,mBAAA,CAIC;MAHEO,GAAG,EAAEkB,OAAO,CAACG,MAAM,IAAIrC,MAAA,CAAAkB,oBAAoB;MAC3CC,GAAG,EAAEe,OAAO,CAACI,MAAM;MACnBlB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEtB,MAAA,CAAAuB,iBAAA,IAAAvB,MAAA,CAAAuB,iBAAA,IAAAD,IAAA,CAAiB;6CAnC3CiB,WAAA,E,GAsCc9B,mBAAA,CAMM,OANN+B,WAMM,GALJ/B,mBAAA,CAGM,OAHNgC,WAGM,GAFJhC,mBAAA,CAAwD,QAAxDiC,WAAwD,EAAAd,gBAAA,CAAxBM,OAAO,CAACI,MAAM,kBAC9C7B,mBAAA,CAAqE,QAArEkC,WAAqE,EAAAf,gBAAA,CAAvC5B,MAAA,CAAA4C,UAAU,CAACV,OAAO,CAACW,SAAS,kB,GAE5DpC,mBAAA,CAAqD,OAArDqC,WAAqD,EAAAlB,gBAAA,CAAxBM,OAAO,CAACa,OAAO,iB;4DAMpDtC,mBAAA,CAaM,OAbNuC,WAaM,GAZJvC,mBAAA,CAWM,OAXNwC,WAWM,G,gBAVJxC,mBAAA,CAMC;IALCyC,IAAI,EAAC,MAAM;IApDzB,uBAAA7B,MAAA,QAAAA,MAAA,MAAA8B,MAAA,IAqDuBnD,MAAA,CAAAoD,UAAU,GAAAD,MAAA;IAClBE,OAAK,EAAAhC,MAAA,QAAAA,MAAA,MAtDpBiC,SAAA,KAAAhC,IAAA,KAsD4BtB,MAAA,CAAAuD,WAAA,IAAAvD,MAAA,CAAAuD,WAAA,IAAAjC,IAAA,CAAW;IACzBkC,WAAW,EAAC,SAAS;IACrB7D,KAAK,EAAC;iEAHGK,MAAA,CAAAoD,UAAU,E,GAKrB3C,mBAAA,CAES;IAFDd,KAAK,EAAC,aAAa;IAAE6B,OAAK,EAAAH,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEtB,MAAA,CAAAuD,WAAA,IAAAvD,MAAA,CAAAuD,WAAA,IAAAjC,IAAA,CAAW;KAAE,MAEjD,E,2DAMRvB,mBAAA,aAAgB,EAChBc,YAAA,CAKE4C,4BAAA;IAJCC,MAAM,EAAE1D,MAAA,CAAA2D,iBAAiB;IACzBC,eAAe,EAAE5D,MAAA,CAAA4D,eAAe;IAChCC,OAAK,EAAEvD,QAAA,CAAAwD,kBAAkB;IACzBC,eAAc,EAAEzD,QAAA,CAAA0D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}