{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport UserNameInput from './UserNameInput.vue';\nimport MessageList from './MessageList.vue';\nimport MessageInput from './MessageInput.vue';\nimport ThemeSelector from './ThemeSelector.vue';\nimport UserProfileEditor from './UserProfileEditor.vue';\nimport axios from 'axios';\nimport { handleAvatarError, getFallbackAvatarUrl } from '../../utils/avatarUtils';\nimport { useStore } from 'vuex';\nimport { computed, ref } from 'vue';\nexport default {\n  name: 'ChatContainer',\n  components: {\n    UserNameInput,\n    MessageList,\n    MessageInput,\n    ThemeSelector,\n    UserProfileEditor\n  },\n  props: {\n    currentUser: {\n      type: Object,\n      required: true\n    },\n    currentServer: {\n      type: Object,\n      default: () => ({\n        id: 'home',\n        name: 'general',\n        description: 'Welcome to the chat channel!'\n      })\n    },\n    currentChannel: {\n      type: Object,\n      default: null\n    }\n  },\n  emits: ['update-online-users', 'open-profile-editor'],\n  setup(props) {\n    const store = useStore();\n    const isInVoiceChannel = ref(false);\n\n    // 使用计算属性从store获取用户信息\n    const username = computed(() => store.getters['userProfile/username']);\n    const userAvatar = computed(() => store.getters['userProfile/avatar']);\n\n    // 过滤当前频道的消息\n    const filteredMessages = computed(() => {\n      if (!props.currentChannel) return [];\n      return store.getters['messages/channelMessages'](props.currentChannel.id);\n    });\n\n    // 获取输入框占位符文本\n    const getInputPlaceholder = computed(() => {\n      if (!props.currentChannel) return '选择一个频道开始聊天';\n      return `发送消息到 ${props.currentChannel.type === 'voice' ? '🔊' : '#'}${props.currentChannel.name}`;\n    });\n\n    // 判断输入框是否禁用\n    const isInputDisabled = computed(() => {\n      return !props.currentChannel || props.currentChannel.type === 'voice' && !isInVoiceChannel.value;\n    });\n    return {\n      username,\n      userAvatar,\n      filteredMessages,\n      getInputPlaceholder,\n      isInputDisabled,\n      isInVoiceChannel,\n      getFallbackAvatarUrl,\n      handleAvatarError\n    };\n  },\n  data() {\n    return {\n      messages: [],\n      // 消息列表\n      onlineUsers: [],\n      // 在线用户列表\n      apiUrl: 'http://localhost:3001/api/messages',\n      // 消息API地址\n      usersApiUrl: 'http://localhost:3001/api/users',\n      // 用户API地址\n      pollingInterval: null,\n      // 用于轮询消息的计时器\n      onlinePollingInterval: null,\n      // 用于轮询在线用户的计时器\n      currentTheme: localStorage.getItem('chat-theme') || 'discord',\n      // 当前主题\n      showProfileEditor: false,\n      // 是否显示个人资料编辑器\n      currentUserInfo: {} // 当前用户信息\n    };\n  },\n  watch: {\n    // 监听在线用户变化，向父组件发送更新事件\n    onlineUsers: {\n      handler(newValue) {\n        this.$emit('update-online-users', newValue);\n      },\n      deep: true\n    },\n    // 监听服务器变化，重新加载消息\n    'currentServer.id': {\n      handler(newServerId) {\n        if (newServerId) {\n          this.loadServerMessages(newServerId);\n        }\n      },\n      immediate: true\n    }\n  },\n  created() {\n    // 从localStorage恢复用户信息\n    const savedUsername = localStorage.getItem('chat-username');\n    const savedAvatar = localStorage.getItem('chat-avatar');\n    if (savedUsername && savedAvatar) {\n      this.$store.dispatch('userProfile/updateProfile', {\n        username: savedUsername,\n        avatar: savedAvatar\n      });\n    }\n  },\n  mounted() {\n    // 如果用户已登录，获取消息和在线用户\n    if (this.username) {\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n\n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    }\n\n    // 应用保存的主题\n    document.body.classList.add(`theme-${this.currentTheme}`);\n  },\n  beforeUnmount() {\n    // 清除轮询\n    clearInterval(this.pollingInterval);\n    clearInterval(this.onlinePollingInterval);\n  },\n  methods: {\n    // 设置用户名和头像\n    setUsername(userData) {\n      this.$store.dispatch('userProfile/updateProfile', userData);\n\n      // 保存到localStorage\n      localStorage.setItem('chat-username', userData.username);\n      localStorage.setItem('chat-avatar', userData.avatar);\n\n      // 注册用户\n      this.registerUser();\n\n      // 获取消息和在线用户\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n\n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    },\n    // 注册用户\n    async registerUser() {\n      try {\n        await axios.post(`${this.usersApiUrl}/register`, {\n          username: this.username,\n          avatar: this.userAvatar\n        });\n        console.log('用户注册成功');\n      } catch (error) {\n        console.error('用户注册失败:', error);\n      }\n    },\n    // 获取消息\n    async fetchMessages() {\n      try {\n        const response = await axios.get(this.apiUrl);\n        this.messages = response.data;\n        // 滚动到底部\n        this.$nextTick(() => {\n          if (this.$refs.messageList) {\n            this.$refs.messageList.scrollToBottom();\n          }\n        });\n      } catch (error) {\n        console.error('获取消息失败:', error);\n        // 开发阶段如果API未就绪，使用模拟数据\n        if (this.messages.length === 0) {\n          this.messages = [{\n            id: 1,\n            sender: 'System',\n            content: '欢迎来到聊天室!',\n            timestamp: new Date().toISOString(),\n            avatar: '/avatars/default.png'\n          }];\n        }\n      }\n    },\n    // 获取在线用户\n    async fetchOnlineUsers() {\n      try {\n        const response = await axios.get(`${this.usersApiUrl}/online`);\n        this.onlineUsers = response.data;\n      } catch (error) {\n        console.error('获取在线用户失败:', error);\n        // 开发阶段如果API未就绪，使用模拟数据\n        if (this.onlineUsers.length === 0) {\n          this.onlineUsers = [{\n            username: this.username,\n            avatar: this.userAvatar\n          }];\n        }\n      }\n    },\n    // 加载服务器特定的消息\n    loadServerMessages(serverId) {\n      const key = `server-messages-${serverId}`;\n      const savedMessages = localStorage.getItem(key);\n      this.messages = savedMessages ? JSON.parse(savedMessages) : [];\n    },\n    // 保存服务器消息\n    saveServerMessages() {\n      const key = `server-messages-${this.currentServer.id}`;\n      localStorage.setItem(key, JSON.stringify(this.messages));\n    },\n    // 发送消息\n    async sendMessage(content) {\n      if (!content.trim() || !this.currentChannel) return;\n      try {\n        const messageData = {\n          channelId: this.currentChannel.id,\n          content: content.trim(),\n          sender: this.username,\n          avatar: this.userAvatar,\n          timestamp: new Date().toISOString()\n        };\n\n        // 发送消息到store\n        await this.$store.dispatch('messages/sendMessage', messageData);\n\n        // 滚动到底部\n        this.$nextTick(() => {\n          if (this.$refs.messageList) {\n            this.$refs.messageList.scrollToBottom();\n          }\n        });\n      } catch (error) {\n        console.error('发送消息失败:', error);\n      }\n    },\n    // 打开个人资料编辑器\n    openProfileEditor() {\n      this.$emit('open-profile-editor');\n    },\n    // 关闭个人资料编辑器\n    closeProfileEditor() {\n      this.showProfileEditor = false;\n    },\n    // 更新用户信息\n    updateProfile(updatedInfo) {\n      // 更新store中的用户信息\n      this.$store.dispatch('userProfile/updateProfile', updatedInfo);\n\n      // 保存到localStorage\n      localStorage.setItem('chat-username', updatedInfo.username);\n      localStorage.setItem('chat-avatar', updatedInfo.avatar);\n\n      // 更新消息历史中的头像\n      this.messages = this.messages.map(message => {\n        if (message.sender === updatedInfo.username) {\n          return {\n            ...message,\n            avatar: updatedInfo.avatar\n          }; // 更新发送者头像\n        }\n        return message;\n      });\n\n      // 注册用户\n      this.registerUser();\n\n      // 获取消息和在线用户\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n\n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    },\n    // 切换语音频道状态\n    toggleVoiceChannel() {\n      if (this.currentChannel?.type !== 'voice') return;\n      this.isInVoiceChannel = !this.isInVoiceChannel;\n      // TODO: 实现语音频道的加入/退出逻辑\n    }\n  }\n};","map":{"version":3,"names":["UserNameInput","MessageList","MessageInput","ThemeSelector","UserProfileEditor","axios","handleAvatarError","getFallbackAvatarUrl","useStore","computed","ref","name","components","props","currentUser","type","Object","required","currentServer","default","id","description","currentChannel","emits","setup","store","isInVoiceChannel","username","getters","userAvatar","filteredMessages","getInputPlaceholder","isInputDisabled","value","data","messages","onlineUsers","apiUrl","usersApiUrl","pollingInterval","onlinePollingInterval","currentTheme","localStorage","getItem","showProfileEditor","currentUserInfo","watch","handler","newValue","$emit","deep","newServerId","loadServerMessages","immediate","created","savedUsername","savedAvatar","$store","dispatch","avatar","mounted","fetchMessages","fetchOnlineUsers","setInterval","document","body","classList","add","beforeUnmount","clearInterval","methods","setUsername","userData","setItem","registerUser","post","console","log","error","response","get","$nextTick","$refs","messageList","scrollToBottom","length","sender","content","timestamp","Date","toISOString","serverId","key","savedMessages","JSON","parse","saveServerMessages","stringify","sendMessage","trim","messageData","channelId","openProfileEditor","closeProfileEditor","updateProfile","updatedInfo","map","message","toggleVoiceChannel"],"sources":["C:\\Users\\Administrator\\Desktop\\who\\src\\components\\chat\\ChatContainer.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <!-- 用户名输入界面，当用户未设置昵称时显示 -->\r\n    <UserNameInput \r\n      v-if=\"!username\" \r\n      @set-username=\"setUsername\" \r\n    />\r\n    \r\n    <!-- 聊天界面，当用户已设置昵称时显示 -->\r\n    <div v-else class=\"chat-interface\">\r\n      <!-- 频道头部 -->\r\n      <header class=\"chat-header\">\r\n        <div class=\"channel-info\">\r\n          <span class=\"channel-hash\">{{ currentChannel?.type === 'voice' ? '🔊' : '#' }}</span>\r\n          <h2 class=\"channel-name\">{{ currentChannel?.name || 'general' }}</h2>\r\n          <div class=\"channel-topic\">\r\n            {{ currentChannel?.topic || '欢迎来到聊天频道！' }}\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"header-actions\">\r\n          <div class=\"action-buttons\">\r\n            <button \r\n              v-if=\"currentChannel?.type === 'voice'\"\r\n              class=\"icon-button\" \r\n              :class=\"{ active: isInVoiceChannel }\"\r\n              title=\"加入语音频道\"\r\n              @click=\"toggleVoiceChannel\"\r\n            >\r\n              <span class=\"icon\">{{ isInVoiceChannel ? '🎤' : '🔇' }}</span>\r\n            </button>\r\n            <button class=\"icon-button\" title=\"Pin Messages\">\r\n              <span class=\"icon\">📌</span>\r\n            </button>\r\n            <button class=\"icon-button\" title=\"Show Member List\">\r\n              <span class=\"icon\">👥</span>\r\n            </button>\r\n            <ThemeSelector />\r\n          </div>\r\n          \r\n          <div class=\"user-info\" @click=\"openProfileEditor\">\r\n            <div class=\"user-status-indicator\" :class=\"{ online: true }\"></div>\r\n            <img \r\n              :src=\"userAvatar || getFallbackAvatarUrl()\" \r\n              alt=\"用户头像\" \r\n              class=\"user-avatar\"\r\n              @error=\"handleAvatarError\"\r\n            >\r\n            <span class=\"current-username\">{{ username }}</span>\r\n          </div>\r\n        </div>\r\n      </header>\r\n      \r\n      <div class=\"chat-main\">\r\n        <MessageList \r\n          :messages=\"filteredMessages\" \r\n          :currentUsername=\"username\" \r\n          ref=\"messageList\"\r\n          @open-profile-editor=\"openProfileEditor\"\r\n        />\r\n      </div>\r\n      \r\n      <MessageInput \r\n        :placeholder=\"getInputPlaceholder\"\r\n        :disabled=\"isInputDisabled\"\r\n        @send-message=\"sendMessage\" \r\n      />\r\n    </div>\r\n    \r\n    <!-- 个人资料编辑器 -->\r\n    <UserProfileEditor \r\n      :isOpen=\"showProfileEditor\"\r\n      :currentUserInfo=\"currentUserInfo\"\r\n      @close=\"closeProfileEditor\"\r\n      @update-profile=\"updateProfile\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport UserNameInput from './UserNameInput.vue';\r\nimport MessageList from './MessageList.vue';\r\nimport MessageInput from './MessageInput.vue';\r\nimport ThemeSelector from './ThemeSelector.vue';\r\nimport UserProfileEditor from './UserProfileEditor.vue';\r\nimport axios from 'axios';\r\nimport { handleAvatarError, getFallbackAvatarUrl } from '../../utils/avatarUtils';\r\nimport { useStore } from 'vuex';\r\nimport { computed, ref } from 'vue';\r\n\r\nexport default {\r\n  name: 'ChatContainer',\r\n  components: {\r\n    UserNameInput,\r\n    MessageList,\r\n    MessageInput,\r\n    ThemeSelector,\r\n    UserProfileEditor\r\n  },\r\n  props: {\r\n    currentUser: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    currentServer: {\r\n      type: Object,\r\n      default: () => ({\r\n        id: 'home',\r\n        name: 'general',\r\n        description: 'Welcome to the chat channel!'\r\n      })\r\n    },\r\n    currentChannel: {\r\n      type: Object,\r\n      default: null\r\n    }\r\n  },\r\n  emits: ['update-online-users', 'open-profile-editor'],\r\n  setup(props) {\r\n    const store = useStore();\r\n    const isInVoiceChannel = ref(false);\r\n    \r\n    // 使用计算属性从store获取用户信息\r\n    const username = computed(() => store.getters['userProfile/username']);\r\n    const userAvatar = computed(() => store.getters['userProfile/avatar']);\r\n    \r\n    // 过滤当前频道的消息\r\n    const filteredMessages = computed(() => {\r\n      if (!props.currentChannel) return [];\r\n      return store.getters['messages/channelMessages'](props.currentChannel.id);\r\n    });\r\n\r\n    // 获取输入框占位符文本\r\n    const getInputPlaceholder = computed(() => {\r\n      if (!props.currentChannel) return '选择一个频道开始聊天';\r\n      return `发送消息到 ${props.currentChannel.type === 'voice' ? '🔊' : '#'}${props.currentChannel.name}`;\r\n    });\r\n\r\n    // 判断输入框是否禁用\r\n    const isInputDisabled = computed(() => {\r\n      return !props.currentChannel || \r\n             (props.currentChannel.type === 'voice' && !isInVoiceChannel.value);\r\n    });\r\n\r\n    return {\r\n      username,\r\n      userAvatar,\r\n      filteredMessages,\r\n      getInputPlaceholder,\r\n      isInputDisabled,\r\n      isInVoiceChannel,\r\n      getFallbackAvatarUrl,\r\n      handleAvatarError\r\n    };\r\n  },\r\n  data() {\r\n    return {\r\n      messages: [], // 消息列表\r\n      onlineUsers: [], // 在线用户列表\r\n      apiUrl: 'http://localhost:3001/api/messages', // 消息API地址\r\n      usersApiUrl: 'http://localhost:3001/api/users', // 用户API地址\r\n      pollingInterval: null, // 用于轮询消息的计时器\r\n      onlinePollingInterval: null, // 用于轮询在线用户的计时器\r\n      currentTheme: localStorage.getItem('chat-theme') || 'discord', // 当前主题\r\n      showProfileEditor: false, // 是否显示个人资料编辑器\r\n      currentUserInfo: {} // 当前用户信息\r\n    }\r\n  },\r\n  watch: {\r\n    // 监听在线用户变化，向父组件发送更新事件\r\n    onlineUsers: {\r\n      handler(newValue) {\r\n        this.$emit('update-online-users', newValue);\r\n      },\r\n      deep: true\r\n    },\r\n    // 监听服务器变化，重新加载消息\r\n    'currentServer.id': {\r\n      handler(newServerId) {\r\n        if (newServerId) {\r\n          this.loadServerMessages(newServerId);\r\n        }\r\n      },\r\n      immediate: true\r\n    }\r\n  },\r\n  created() {\r\n    // 从localStorage恢复用户信息\r\n    const savedUsername = localStorage.getItem('chat-username');\r\n    const savedAvatar = localStorage.getItem('chat-avatar');\r\n    \r\n    if (savedUsername && savedAvatar) {\r\n      this.$store.dispatch('userProfile/updateProfile', {\r\n        username: savedUsername,\r\n        avatar: savedAvatar\r\n      });\r\n    }\r\n  },\r\n  mounted() {\r\n    // 如果用户已登录，获取消息和在线用户\r\n    if (this.username) {\r\n      this.fetchMessages();\r\n      this.fetchOnlineUsers();\r\n      \r\n      // 设置轮询\r\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\r\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\r\n    }\r\n    \r\n    // 应用保存的主题\r\n    document.body.classList.add(`theme-${this.currentTheme}`);\r\n  },\r\n  beforeUnmount() {\r\n    // 清除轮询\r\n    clearInterval(this.pollingInterval);\r\n    clearInterval(this.onlinePollingInterval);\r\n  },\r\n  methods: {\r\n    // 设置用户名和头像\r\n    setUsername(userData) {\r\n      this.$store.dispatch('userProfile/updateProfile', userData);\r\n      \r\n      // 保存到localStorage\r\n      localStorage.setItem('chat-username', userData.username);\r\n      localStorage.setItem('chat-avatar', userData.avatar);\r\n      \r\n      // 注册用户\r\n      this.registerUser();\r\n      \r\n      // 获取消息和在线用户\r\n      this.fetchMessages();\r\n      this.fetchOnlineUsers();\r\n      \r\n      // 设置轮询\r\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\r\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\r\n    },\r\n    \r\n    // 注册用户\r\n    async registerUser() {\r\n      try {\r\n        await axios.post(`${this.usersApiUrl}/register`, {\r\n          username: this.username,\r\n          avatar: this.userAvatar\r\n        });\r\n        console.log('用户注册成功');\r\n      } catch (error) {\r\n        console.error('用户注册失败:', error);\r\n      }\r\n    },\r\n    \r\n    // 获取消息\r\n    async fetchMessages() {\r\n      try {\r\n        const response = await axios.get(this.apiUrl);\r\n        this.messages = response.data;\r\n        // 滚动到底部\r\n        this.$nextTick(() => {\r\n          if (this.$refs.messageList) {\r\n            this.$refs.messageList.scrollToBottom();\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error('获取消息失败:', error);\r\n        // 开发阶段如果API未就绪，使用模拟数据\r\n        if (this.messages.length === 0) {\r\n          this.messages = [\r\n            { \r\n              id: 1, \r\n              sender: 'System', \r\n              content: '欢迎来到聊天室!', \r\n              timestamp: new Date().toISOString(),\r\n              avatar: '/avatars/default.png'\r\n            }\r\n          ];\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 获取在线用户\r\n    async fetchOnlineUsers() {\r\n      try {\r\n        const response = await axios.get(`${this.usersApiUrl}/online`);\r\n        this.onlineUsers = response.data;\r\n      } catch (error) {\r\n        console.error('获取在线用户失败:', error);\r\n        // 开发阶段如果API未就绪，使用模拟数据\r\n        if (this.onlineUsers.length === 0) {\r\n          this.onlineUsers = [\r\n            { username: this.username, avatar: this.userAvatar }\r\n          ];\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 加载服务器特定的消息\r\n    loadServerMessages(serverId) {\r\n      const key = `server-messages-${serverId}`;\r\n      const savedMessages = localStorage.getItem(key);\r\n      this.messages = savedMessages ? JSON.parse(savedMessages) : [];\r\n    },\r\n\r\n    // 保存服务器消息\r\n    saveServerMessages() {\r\n      const key = `server-messages-${this.currentServer.id}`;\r\n      localStorage.setItem(key, JSON.stringify(this.messages));\r\n    },\r\n\r\n    // 发送消息\r\n    async sendMessage(content) {\r\n      if (!content.trim() || !this.currentChannel) return;\r\n      \r\n      try {\r\n        const messageData = {\r\n          channelId: this.currentChannel.id,\r\n          content: content.trim(),\r\n          sender: this.username,\r\n          avatar: this.userAvatar,\r\n          timestamp: new Date().toISOString()\r\n        };\r\n\r\n        // 发送消息到store\r\n        await this.$store.dispatch('messages/sendMessage', messageData);\r\n        \r\n        // 滚动到底部\r\n        this.$nextTick(() => {\r\n          if (this.$refs.messageList) {\r\n            this.$refs.messageList.scrollToBottom();\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error('发送消息失败:', error);\r\n      }\r\n    },\r\n    // 打开个人资料编辑器\r\n    openProfileEditor() {\r\n      this.$emit('open-profile-editor');\r\n    },\r\n    // 关闭个人资料编辑器\r\n    closeProfileEditor() {\r\n      this.showProfileEditor = false;\r\n    },\r\n    // 更新用户信息\r\n    updateProfile(updatedInfo) {\r\n      // 更新store中的用户信息\r\n      this.$store.dispatch('userProfile/updateProfile', updatedInfo);\r\n      \r\n      // 保存到localStorage\r\n      localStorage.setItem('chat-username', updatedInfo.username);\r\n      localStorage.setItem('chat-avatar', updatedInfo.avatar);\r\n      \r\n      // 更新消息历史中的头像\r\n      this.messages = this.messages.map(message => {\r\n        if (message.sender === updatedInfo.username) {\r\n          return { ...message, avatar: updatedInfo.avatar }; // 更新发送者头像\r\n        }\r\n        return message;\r\n      });\r\n      \r\n      // 注册用户\r\n      this.registerUser();\r\n      \r\n      // 获取消息和在线用户\r\n      this.fetchMessages();\r\n      this.fetchOnlineUsers();\r\n      \r\n      // 设置轮询\r\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\r\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\r\n    },\r\n    // 切换语音频道状态\r\n    toggleVoiceChannel() {\r\n      if (this.currentChannel?.type !== 'voice') return;\r\n      this.isInVoiceChannel = !this.isInVoiceChannel;\r\n      // TODO: 实现语音频道的加入/退出逻辑\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  background-color: var(--background-primary);\r\n}\r\n\r\n.chat-interface {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n}\r\n\r\n.chat-header {\r\n  height: 48px;\r\n  padding: 0 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  background-color: var(--background-primary);\r\n  border-bottom: 1px solid var(--background-tertiary);\r\n  flex-shrink: 0;\r\n}\r\n\r\n.channel-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.channel-hash {\r\n  color: var(--text-muted);\r\n  font-size: 24px;\r\n  font-weight: 300;\r\n}\r\n\r\n.channel-name {\r\n  color: var(--header-primary);\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n}\r\n\r\n.channel-topic {\r\n  color: var(--text-muted);\r\n  font-size: 14px;\r\n  margin-left: 12px;\r\n  padding-left: 12px;\r\n  border-left: 1px solid var(--background-accent);\r\n}\r\n\r\n.header-actions {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n}\r\n\r\n.action-buttons {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.icon-button {\r\n  width: 32px;\r\n  height: 32px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: none;\r\n  border: none;\r\n  color: var(--text-muted);\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  border-radius: 4px;\r\n}\r\n\r\n.icon-button:hover {\r\n  color: var(--text-normal);\r\n  background-color: var(--background-modifier-hover);\r\n}\r\n\r\n.icon-button.active {\r\n  color: var(--text-normal);\r\n  background-color: var(--background-modifier-selected);\r\n}\r\n\r\n.chat-main {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n}\r\n\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s ease;\r\n}\r\n\r\n.user-info:hover {\r\n  background-color: var(--background-modifier-hover);\r\n}\r\n\r\n.user-status-indicator {\r\n  width: 8px;\r\n  height: 8px;\r\n  border-radius: 50%;\r\n  background-color: var(--online-indicator);\r\n}\r\n\r\n.user-avatar {\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n}\r\n\r\n.current-username {\r\n  color: var(--header-primary);\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n}\r\n\r\n/* 响应式样式 */\r\n@media (max-width: 768px) {\r\n  .channel-topic {\r\n    display: none;\r\n  }\r\n  \r\n  .action-buttons {\r\n    display: none;\r\n  }\r\n  \r\n  .chat-header {\r\n    padding: 0 8px;\r\n  }\r\n  \r\n  .user-info {\r\n    padding: 4px;\r\n  }\r\n  \r\n  .current-username {\r\n    display: none;\r\n  }\r\n}\r\n</style> \r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}