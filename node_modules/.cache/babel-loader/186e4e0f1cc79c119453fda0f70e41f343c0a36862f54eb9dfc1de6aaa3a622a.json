{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, toDisplayString as _toDisplayString, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"app-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"login-container\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"discord-layout\"\n};\nconst _hoisted_4 = {\n  class: \"server-content\"\n};\nconst _hoisted_5 = {\n  class: \"user-info\"\n};\nconst _hoisted_6 = {\n  class: \"avatar-container\"\n};\nconst _hoisted_7 = [\"src\", \"alt\"];\nconst _hoisted_8 = {\n  class: \"user-details\"\n};\nconst _hoisted_9 = {\n  class: \"username\"\n};\nconst _hoisted_10 = {\n  class: \"user-tag\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_LoginForm = _resolveComponent(\"LoginForm\");\n  const _component_ServerList = _resolveComponent(\"ServerList\");\n  const _component_ChatContainer = _resolveComponent(\"ChatContainer\");\n  const _component_OnlineUsersSidebar = _resolveComponent(\"OnlineUsersSidebar\");\n  const _component_UserProfileEditor = _resolveComponent(\"UserProfileEditor\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [!$data.username ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(_component_LoginForm, {\n    onLogin: $options.setUsername\n  }, null, 8 /* PROPS */, [\"onLogin\"])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createCommentVNode(\" 服务器列表 \"), _createVNode(_component_ServerList, {\n    \"external-servers\": [],\n    \"current-server-id\": $data.currentServerId,\n    onChangeServer: $options.changeServer,\n    onAddServer: $options.showAddServerDialog,\n    onExploreServers: $options.showExploreServers\n  }, null, 8 /* PROPS */, [\"current-server-id\", \"onChangeServer\", \"onAddServer\", \"onExploreServers\"]), _createCommentVNode(\" 服务器内容区域 \"), _createElementVNode(\"div\", _hoisted_4, [_createCommentVNode(\" 聊天容器 \"), _createVNode(_component_ChatContainer, {\n    currentUser: {\n      username: $data.username,\n      avatar: $data.avatar\n    },\n    \"current-server\": $data.currentServer,\n    onUpdateOnlineUsers: $options.updateOnlineUsers,\n    onOpenProfileEditor: $options.openProfileEditor\n  }, null, 8 /* PROPS */, [\"currentUser\", \"current-server\", \"onUpdateOnlineUsers\", \"onOpenProfileEditor\"]), _createCommentVNode(\" 用户面板 \"), _createElementVNode(\"div\", {\n    class: \"user-panel\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.openProfileEditor && $options.openProfileEditor(...args))\n  }, [_createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"img\", {\n    src: $data.avatar || 'default-avatar.png',\n    alt: $data.username,\n    class: \"user-avatar\"\n  }, null, 8 /* PROPS */, _hoisted_7), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"status-indicator\", $setup.userStatus])\n  }, null, 2 /* CLASS */)]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"span\", _hoisted_9, _toDisplayString($data.username), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_10, \"#\" + _toDisplayString($setup.userTag), 1 /* TEXT */)])]), _cache[1] || (_cache[1] = _createElementVNode(\"div\", {\n    class: \"user-controls\"\n  }, [_createElementVNode(\"button\", {\n    class: \"control-button\",\n    title: \"麦克风\"\n  }, \"🎤\"), _createElementVNode(\"button\", {\n    class: \"control-button\",\n    title: \"耳机\"\n  }, \"🎧\"), _createElementVNode(\"button\", {\n    class: \"control-button\",\n    title: \"设置\"\n  }, \"⚙️\")], -1 /* HOISTED */))])]), _createCommentVNode(\" 在线用户列表 \"), _createVNode(_component_OnlineUsersSidebar, {\n    onlineUsers: $data.onlineUsers,\n    currentUsername: $data.username,\n    onOpenProfileEditor: $options.openProfileEditor\n  }, null, 8 /* PROPS */, [\"onlineUsers\", \"currentUsername\", \"onOpenProfileEditor\"]), _createCommentVNode(\" 个人资料编辑器 \"), $data.showProfileEditor ? (_openBlock(), _createBlock(_component_UserProfileEditor, {\n    key: 0,\n    isOpen: $data.showProfileEditor,\n    onClose: $options.closeProfileEditor,\n    onUpdateProfile: $options.updateProfile\n  }, null, 8 /* PROPS */, [\"isOpen\", \"onClose\", \"onUpdateProfile\"])) : _createCommentVNode(\"v-if\", true)]))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","$data","username","_hoisted_2","_createVNode","_component_LoginForm","onLogin","$options","setUsername","_hoisted_3","_createCommentVNode","_component_ServerList","currentServerId","onChangeServer","changeServer","onAddServer","showAddServerDialog","onExploreServers","showExploreServers","_createElementVNode","_hoisted_4","_component_ChatContainer","currentUser","avatar","currentServer","onUpdateOnlineUsers","updateOnlineUsers","onOpenProfileEditor","openProfileEditor","onClick","_cache","args","_hoisted_5","_hoisted_6","src","alt","_hoisted_7","_normalizeClass","$setup","userStatus","_hoisted_8","_hoisted_9","_toDisplayString","_hoisted_10","userTag","title","_component_OnlineUsersSidebar","onlineUsers","currentUsername","showProfileEditor","_createBlock","_component_UserProfileEditor","isOpen","onClose","closeProfileEditor","onUpdateProfile","updateProfile"],"sources":["C:\\Users\\Administrator\\Desktop\\who\\src\\App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div v-if=\"!username\" class=\"login-container\">\n      <LoginForm @login=\"setUsername\" />\n    </div>\n    <div v-else class=\"discord-layout\">\n      <!-- 服务器列表 -->\n      <ServerList \n        :external-servers=\"[]\"\n        :current-server-id=\"currentServerId\"\n        @change-server=\"changeServer\"\n        @add-server=\"showAddServerDialog\"\n        @explore-servers=\"showExploreServers\"\n      />\n      \n      <!-- 服务器内容区域 -->\n      <div class=\"server-content\">\n        <!-- 聊天容器 -->\n        <ChatContainer \n          :currentUser=\"{ username, avatar }\" \n          :current-server=\"currentServer\"\n          @update-online-users=\"updateOnlineUsers\"\n          @open-profile-editor=\"openProfileEditor\"\n        />\n        \n        <!-- 用户面板 -->\n        <div class=\"user-panel\" @click=\"openProfileEditor\">\n          <div class=\"user-info\">\n            <div class=\"avatar-container\">\n              <img \n                :src=\"avatar || 'default-avatar.png'\" \n                :alt=\"username\" \n                class=\"user-avatar\"\n              />\n              <div class=\"status-indicator\" :class=\"userStatus\"></div>\n            </div>\n            <div class=\"user-details\">\n              <span class=\"username\">{{ username }}</span>\n              <span class=\"user-tag\">#{{ userTag }}</span>\n            </div>\n          </div>\n          <div class=\"user-controls\">\n            <button class=\"control-button\" title=\"麦克风\">🎤</button>\n            <button class=\"control-button\" title=\"耳机\">🎧</button>\n            <button class=\"control-button\" title=\"设置\">⚙️</button>\n          </div>\n        </div>\n      </div>\n      \n      <!-- 在线用户列表 -->\n      <OnlineUsersSidebar \n        :onlineUsers=\"onlineUsers\" \n        :currentUsername=\"username\"\n        @open-profile-editor=\"openProfileEditor\"\n      />\n\n      <!-- 个人资料编辑器 -->\n      <UserProfileEditor\n        v-if=\"showProfileEditor\"\n        :isOpen=\"showProfileEditor\"\n        @close=\"closeProfileEditor\"\n        @update-profile=\"updateProfile\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport LoginForm from './components/auth/LoginForm.vue'\nimport ChatContainer from './components/chat/ChatContainer.vue'\nimport ServerList from './components/chat/ServerList.vue'\nimport OnlineUsersSidebar from './components/chat/OnlineUsersSidebar.vue'\nimport UserProfileEditor from './components/chat/UserProfileEditor.vue'\nimport { useStore } from 'vuex'\nimport { computed } from 'vue'\n\nexport default {\n  name: 'App',\n  components: {\n    LoginForm,\n    ChatContainer,\n    ServerList,\n    OnlineUsersSidebar,\n    UserProfileEditor\n  },\n  setup() {\n    const store = useStore()\n    \n    // 从store获取用户状态\n    const userStatus = computed(() => store.getters['userProfile/status'])\n    const userTag = computed(() => Math.floor(Math.random() * 9000 + 1000)) // 模拟用户标签\n    \n    return {\n      userStatus,\n      userTag\n    }\n  },\n  data() {\n    return {\n      username: localStorage.getItem('chat-username') || '',  // 用户名\n      avatar: localStorage.getItem('chat-avatar') || '',      // 头像\n      currentServerId: localStorage.getItem('current-server-id') || 'home',  // 当前服务器ID\n      currentServer: {  // 当前服务器信息\n        id: 'home',\n        name: 'general',\n        description: 'Welcome to the chat channel!'\n      },\n      onlineUsers: [],  // 在线用户列表\n      showProfileEditor: false,  // 是否显示个人资料编辑器\n      // 服务器模板\n      serverTemplate: {\n        name: 'general',\n        description: 'Welcome to the chat channel!',\n        channels: [\n          {\n            id: 'general',\n            name: 'general',\n            type: 'text',\n            description: 'General chat channel for everyone'\n          }\n        ],\n        roles: [\n          {\n            id: 'admin',\n            name: '管理员',\n            permissions: ['manage_server', 'manage_channels', 'manage_roles']\n          },\n          {\n            id: 'member',\n            name: '成员',\n            permissions: ['send_messages', 'read_messages']\n          }\n        ],\n        categories: [\n          {\n            id: 'text-channels',\n            name: '文字频道',\n            type: 'category',\n            channels: ['general']\n          }\n        ]\n      }\n    }\n  },\n  created() {\n    // 从localStorage获取用户信息\n    const savedUsername = localStorage.getItem('chat-username')\n    const savedAvatar = localStorage.getItem('chat-avatar')\n    \n    if (savedUsername) {\n      this.username = savedUsername\n      this.avatar = savedAvatar || ''\n    }\n    \n    // 应用保存的主题\n    const savedTheme = localStorage.getItem('chat-theme') || 'discord'\n    document.body.classList.add(`theme-${savedTheme}`)\n\n    // 恢复上次选择的服务器\n    const savedServerId = localStorage.getItem('current-server-id')\n    if (savedServerId) {\n      this.currentServerId = savedServerId\n    }\n\n    // 初始化默认服务器\n    const servers = this.getServers()\n    if (servers.length === 0) {\n      const defaultServer = this.createNewServer('测试服务器')\n      this.currentServerId = defaultServer.id\n      this.currentServer = defaultServer\n    } else if (this.currentServerId === 'home') {\n      // 如果当前是主页，切换到第一个服务器\n      this.currentServerId = servers[0].id\n      this.currentServer = servers[0]\n    }\n  },\n  methods: {\n    setUsername(userData) {\n      this.username = userData.username\n      this.avatar = userData.avatar || ''\n      \n      // 保存用户信息到localStorage\n      localStorage.setItem('chat-username', this.username)\n      if (this.avatar) {\n        localStorage.setItem('chat-avatar', this.avatar)\n      }\n    },\n    \n    // 更新在线用户列表\n    updateOnlineUsers(users) {\n      this.onlineUsers = users;\n    },\n    \n    // 打开个人资料编辑器\n    openProfileEditor() {\n      this.showProfileEditor = true\n    },\n    \n    // 关闭个人资料编辑器\n    closeProfileEditor() {\n      this.showProfileEditor = false\n    },\n    \n    // 更新个人资料\n    updateProfile(updatedProfile) {\n      this.username = updatedProfile.username\n      this.avatar = updatedProfile.avatar\n      this.showProfileEditor = false\n      \n      // 保存到localStorage\n      localStorage.setItem('chat-username', this.username)\n      localStorage.setItem('chat-avatar', this.avatar)\n    },\n\n    // 切换服务器\n    changeServer(server) {\n      this.currentServerId = server.id\n      this.currentServer = server\n      \n      // 保存当前服务器ID到localStorage\n      localStorage.setItem('current-server-id', server.id)\n    },\n\n    // 显示添加服务器对话框\n    showAddServerDialog() {\n      // 创建一个新的服务器\n      const newServer = this.createNewServer('新服务器')\n      this.changeServer(newServer)\n    },\n\n    // 创建新服务器\n    createNewServer(serverName) {\n      const serverId = 'server-' + Date.now()\n      const newServer = {\n        id: serverId,\n        name: serverName,\n        icon: null,\n        description: this.serverTemplate.description,\n        channels: [...this.serverTemplate.channels],\n        roles: [...this.serverTemplate.roles],\n        categories: [...this.serverTemplate.categories],\n        members: [],\n        createdAt: new Date().toISOString(),\n        ownerId: this.username\n      }\n\n      // 保存服务器信息到 localStorage\n      const servers = JSON.parse(localStorage.getItem('chat-servers') || '[]')\n      servers.push(newServer)\n      localStorage.setItem('chat-servers', JSON.stringify(servers))\n\n      return newServer\n    },\n\n    // 获取所有服务器\n    getServers() {\n      return JSON.parse(localStorage.getItem('chat-servers') || '[]')\n    },\n\n    // 更新服务器信息\n    updateServer(server) {\n      const servers = this.getServers()\n      const index = servers.findIndex(s => s.id === server.id)\n      if (index !== -1) {\n        servers[index] = server\n        localStorage.setItem('chat-servers', JSON.stringify(servers))\n      }\n    },\n\n    // 显示服务器浏览器\n    showExploreServers() {\n      // TODO: 实现服务器浏览功能\n      console.log('显示服务器浏览器')\n    }\n  }\n}\n</script>\n\n<style>\n/* 全局样式重置 */\n:root {\n  /* Discord's color palette */\n  --background-primary: #36393f;         /* Main chat background */\n  --background-secondary: #2f3136;       /* Sidebar background */\n  --background-tertiary: #202225;        /* Server list background */\n  --background-accent: #4f545c;          /* Hover states */\n  --text-normal: #dcddde;               /* Normal text color */\n  --text-muted: #72767d;                /* Muted text color */\n  --text-link: #00b0f4;                 /* Link color */\n  --header-primary: #fff;               /* Header text color */\n  --interactive-normal: #b9bbbe;        /* Interactive elements */\n  --interactive-hover: #dcddde;         /* Interactive elements on hover */\n  --interactive-active: #fff;           /* Interactive elements when active */\n  --primary-color: #5865f2;             /* Brand color */\n  --online-color: #3ba55d;              /* Online status */\n  --idle-color: #faa81a;                /* Idle status */\n  --dnd-color: #ed4245;                 /* Do not disturb status */\n  --offline-color: #747f8d;             /* Offline status */\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody, html {\n  height: 100%;\n  width: 100%;\n  font-family: 'gg sans', 'Noto Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;  /* Discord's font stack */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: var(--text-normal);\n  background-color: var(--background-tertiary);\n}\n\n#app {\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.app-container {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.login-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  padding: 1rem;\n  background-color: var(--background-tertiary);\n}\n\n/* Discord布局 */\n.discord-layout {\n  display: flex;\n  width: 100%;\n  height: 100vh;\n  overflow: hidden;\n  background-color: var(--background-primary);\n}\n\n/* 滚动条样式 */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background-color: transparent;\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: var(--background-accent);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background-color: var(--interactive-normal);\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .chat-main {\n    flex-direction: column;\n  }\n  \n  .discord-layout {\n    flex-direction: column;\n  }\n  \n  .server-list {\n    width: 100% !important;\n    height: auto !important;\n    flex-direction: row !important;\n    padding: 8px !important;\n  }\n  \n  .server-items {\n    flex-direction: row !important;\n    padding: 0 8px !important;\n  }\n  \n  .server-item {\n    margin-right: 8px !important;\n    margin-bottom: 0 !important;\n  }\n}\n\n/* 动画过渡 */\n.fade-enter-active, .fade-leave-active {\n  transition: opacity 0.2s ease;\n}\n\n.fade-enter-from, .fade-leave-to {\n  opacity: 0;\n}\n\n/* 按钮基础样式 */\nbutton {\n  border: none;\n  background: none;\n  cursor: pointer;\n  font-family: inherit;\n  padding: 8px 16px;\n  border-radius: 4px;\n  font-size: 14px;\n  font-weight: 500;\n  transition: background-color 0.2s ease;\n}\n\nbutton:hover {\n  background-color: var(--background-accent);\n}\n\n/* 输入框基础样式 */\ninput, textarea {\n  background-color: var(--background-tertiary);\n  border: none;\n  border-radius: 4px;\n  padding: 10px;\n  color: var(--text-normal);\n  font-size: 14px;\n  outline: none;\n  transition: border-color 0.2s ease;\n}\n\ninput:focus, textarea:focus {\n  box-shadow: 0 0 0 2px var(--primary-color);\n}\n\n.server-content {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  background-color: var(--background-primary);\n}\n\n.user-panel {\n  height: 52px;\n  padding: 0 8px;\n  background-color: var(--background-secondary-alt);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  cursor: pointer;\n  border-top: 1px solid var(--background-tertiary);\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 4px 8px;\n  border-radius: 4px;\n  flex: 1;\n}\n\n.user-info:hover {\n  background-color: var(--background-modifier-hover);\n}\n\n.avatar-container {\n  position: relative;\n  width: 32px;\n  height: 32px;\n}\n\n.user-avatar {\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.status-indicator {\n  position: absolute;\n  bottom: -2px;\n  right: -2px;\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  border: 2px solid var(--background-secondary-alt);\n  background-color: var(--offline-color);\n}\n\n.status-indicator.online { background-color: #43b581; }\n.status-indicator.away { background-color: #faa61a; }\n.status-indicator.busy { background-color: #f04747; }\n.status-indicator.invisible { background-color: #747f8d; }\n\n.user-details {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  min-width: 0;\n}\n\n.username {\n  color: var(--header-primary);\n  font-size: 14px;\n  font-weight: 500;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.user-tag {\n  color: var(--text-muted);\n  font-size: 12px;\n}\n\n.user-controls {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.control-button {\n  width: 32px;\n  height: 32px;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: transparent;\n  border: none;\n  color: var(--interactive-normal);\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.control-button:hover {\n  color: var(--interactive-hover);\n  background-color: var(--background-modifier-hover);\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAe;;EAD5BC,GAAA;EAE0BD,KAAK,EAAC;;;EAFhCC,GAAA;EAKgBD,KAAK,EAAC;;;EAWXA,KAAK,EAAC;AAAgB;;EAWlBA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAkB;mBA5BzC;;EAoCiBA,KAAK,EAAC;AAAc;;EACjBA,KAAK,EAAC;AAAU;;EAChBA,KAAK,EAAC;AAAU;;;;;;;uBArClCE,mBAAA,CA+DM,OA/DNC,UA+DM,G,CA9DQC,KAAA,CAAAC,QAAQ,I,cAApBH,mBAAA,CAEM,OAFNI,UAEM,GADJC,YAAA,CAAkCC,oBAAA;IAAtBC,OAAK,EAAEC,QAAA,CAAAC;EAAW,qC,oBAEhCT,mBAAA,CA0DM,OA1DNU,UA0DM,GAzDJC,mBAAA,WAAc,EACdN,YAAA,CAMEO,qBAAA;IALC,kBAAgB,EAAE,EAAE;IACpB,mBAAiB,EAAEV,KAAA,CAAAW,eAAe;IAClCC,cAAa,EAAEN,QAAA,CAAAO,YAAY;IAC3BC,WAAU,EAAER,QAAA,CAAAS,mBAAmB;IAC/BC,gBAAe,EAAEV,QAAA,CAAAW;uGAGpBR,mBAAA,aAAgB,EAChBS,mBAAA,CA+BM,OA/BNC,UA+BM,GA9BJV,mBAAA,UAAa,EACbN,YAAA,CAKEiB,wBAAA;IAJCC,WAAW;MAAApB,QAAA,EAAID,KAAA,CAAAC,QAAQ;MAAAqB,MAAA,EAAEtB,KAAA,CAAAsB;IAAM;IAC/B,gBAAc,EAAEtB,KAAA,CAAAuB,aAAa;IAC7BC,mBAAmB,EAAElB,QAAA,CAAAmB,iBAAiB;IACtCC,mBAAmB,EAAEpB,QAAA,CAAAqB;4GAGxBlB,mBAAA,UAAa,EACbS,mBAAA,CAoBM;IApBDtB,KAAK,EAAC,YAAY;IAAEgC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAExB,QAAA,CAAAqB,iBAAA,IAAArB,QAAA,CAAAqB,iBAAA,IAAAG,IAAA,CAAiB;MAC/CZ,mBAAA,CAaM,OAbNa,UAaM,GAZJb,mBAAA,CAOM,OAPNc,UAOM,GANJd,mBAAA,CAIE;IAHCe,GAAG,EAAEjC,KAAA,CAAAsB,MAAM;IACXY,GAAG,EAAElC,KAAA,CAAAC,QAAQ;IACdL,KAAK,EAAC;0BAhCtBuC,UAAA,GAkCcjB,mBAAA,CAAwD;IAAnDtB,KAAK,EAlCxBwC,eAAA,EAkCyB,kBAAkB,EAASC,MAAA,CAAAC,UAAU;6BAElDpB,mBAAA,CAGM,OAHNqB,UAGM,GAFJrB,mBAAA,CAA4C,QAA5CsB,UAA4C,EAAAC,gBAAA,CAAlBzC,KAAA,CAAAC,QAAQ,kBAClCiB,mBAAA,CAA4C,QAA5CwB,WAA4C,EAArB,GAAC,GAAAD,gBAAA,CAAGJ,MAAA,CAAAM,OAAO,iB,+BAGtCzB,mBAAA,CAIM;IAJDtB,KAAK,EAAC;EAAe,IACxBsB,mBAAA,CAAsD;IAA9CtB,KAAK,EAAC,gBAAgB;IAACgD,KAAK,EAAC;KAAM,IAAE,GAC7C1B,mBAAA,CAAqD;IAA7CtB,KAAK,EAAC,gBAAgB;IAACgD,KAAK,EAAC;KAAK,IAAE,GAC5C1B,mBAAA,CAAqD;IAA7CtB,KAAK,EAAC,gBAAgB;IAACgD,KAAK,EAAC;KAAK,IAAE,E,0BAKlDnC,mBAAA,YAAe,EACfN,YAAA,CAIE0C,6BAAA;IAHCC,WAAW,EAAE9C,KAAA,CAAA8C,WAAW;IACxBC,eAAe,EAAE/C,KAAA,CAAAC,QAAQ;IACzByB,mBAAmB,EAAEpB,QAAA,CAAAqB;sFAGxBlB,mBAAA,aAAgB,EAERT,KAAA,CAAAgD,iBAAiB,I,cADzBC,YAAA,CAKEC,4BAAA;IA9DRrD,GAAA;IA2DSsD,MAAM,EAAEnD,KAAA,CAAAgD,iBAAiB;IACzBI,OAAK,EAAE9C,QAAA,CAAA+C,kBAAkB;IACzBC,eAAc,EAAEhD,QAAA,CAAAiD;uEA7DzB9C,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}