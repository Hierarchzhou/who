{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"username-container\"\n};\nconst _hoisted_2 = {\n  class: \"username-card\"\n};\nconst _hoisted_3 = {\n  class: \"avatar-section\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"error-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AvatarSelector = _resolveComponent(\"AvatarSelector\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[4] || (_cache[4] = _createElementVNode(\"h2\", {\n    class: \"title\"\n  }, \"欢迎来到聊天室\", -1 /* HOISTED */)), _cache[5] || (_cache[5] = _createElementVNode(\"p\", {\n    class: \"subtitle\"\n  }, \"请设置您的个人信息\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_AvatarSelector, {\n    username: $data.username,\n    onAvatarSelected: $options.setAvatar\n  }, null, 8 /* PROPS */, [\"username\", \"onAvatarSelected\"]), _cache[3] || (_cache[3] = _createElementVNode(\"p\", {\n    class: \"avatar-hint\"\n  }, \"点击头像进行更换\", -1 /* HOISTED */))]), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.username = $event),\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.setUsername && $options.setUsername(...args), [\"enter\"])),\n    type: \"text\",\n    placeholder: \"输入昵称...\",\n    class: \"username-input\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.username]]), $data.error ? (_openBlock(), _createElementBlock(\"p\", _hoisted_4, _toDisplayString($data.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.setUsername && $options.setUsername(...args)),\n    class: \"enter-button\"\n  }, \"进入聊天室\")])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_createVNode","_component_AvatarSelector","username","$data","onAvatarSelected","$options","setAvatar","_cache","$event","onKeyup","_withKeys","args","setUsername","type","placeholder","error","_hoisted_4","_toDisplayString","_createCommentVNode","onClick"],"sources":["C:\\Users\\Administrator\\Desktop\\discord-chat-app\\just-do-it\\src\\components\\chat\\UserNameInput.vue"],"sourcesContent":["<template>\r\n  <div class=\"username-container\">\r\n    <div class=\"username-card\">\r\n      <h2 class=\"title\">欢迎来到聊天室</h2>\r\n      <p class=\"subtitle\">请设置您的个人信息</p>\r\n      \r\n      <div class=\"avatar-section\">\r\n        <AvatarSelector \r\n          :username=\"username\" \r\n          @avatar-selected=\"setAvatar\" \r\n        />\r\n        <p class=\"avatar-hint\">点击头像进行更换</p>\r\n      </div>\r\n      \r\n      <input \r\n        v-model=\"username\" \r\n        @keyup.enter=\"setUsername\"\r\n        type=\"text\" \r\n        placeholder=\"输入昵称...\" \r\n        class=\"username-input\"\r\n      />\r\n      \r\n      <p v-if=\"error\" class=\"error-message\">{{ error }}</p>\r\n      \r\n      <button @click=\"setUsername\" class=\"enter-button\">进入聊天室</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport AvatarSelector from './AvatarSelector.vue'; // 导入头像选择器组件\r\n\r\nexport default {\r\n  name: 'UserNameInput',\r\n  components: {\r\n    AvatarSelector // 注册头像选择器组件\r\n  },\r\n  data() {\r\n    return {\r\n      username: '', // 存储用户输入的昵称\r\n      avatar: '', // 存储用户选择的头像\r\n      error: null // 存储错误信息\r\n    }\r\n  },\r\n  methods: {\r\n    // 设置头像\r\n    setAvatar(avatarUrl) {\r\n      this.avatar = avatarUrl; // 更新头像URL\r\n    },\r\n    \r\n    // 设置用户名\r\n    setUsername() {\r\n      // 验证用户名是否为空\r\n      if (!this.username.trim()) {\r\n        this.error = '昵称不能为空';\r\n        return;\r\n      }\r\n      \r\n      // 验证用户名长度\r\n      if (this.username.length > 20) {\r\n        this.error = '昵称不能超过20个字符';\r\n        return;\r\n      }\r\n      \r\n      // 清除错误信息\r\n      this.error = null;\r\n      \r\n      // 发送用户名和头像到父组件\r\n      this.$emit('set-username', {\r\n        username: this.username,\r\n        avatar: this.avatar\r\n      });\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.username-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  background-color: var(--background-color); /* 使用主题变量 */\r\n}\r\n\r\n.username-card {\r\n  background-color: var(--message-background); /* 使用主题变量 */\r\n  border-radius: 0.5rem;\r\n  padding: 2rem;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  width: 100%;\r\n  max-width: 400px;\r\n  text-align: center;\r\n}\r\n\r\n.title {\r\n  color: var(--primary-color); /* 使用主题变量 */\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.subtitle {\r\n  color: var(--timestamp-color); /* 使用主题变量 */\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.avatar-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.avatar-hint {\r\n  margin-top: 0.5rem;\r\n  font-size: 0.75rem;\r\n  color: var(--timestamp-color);\r\n}\r\n\r\n.username-input {\r\n  width: 100%;\r\n  padding: 0.75rem;\r\n  border: 1px solid var(--input-border-color); /* 使用主题变量 */\r\n  border-radius: 0.25rem;\r\n  font-size: 1rem;\r\n  margin-bottom: 1rem;\r\n  outline: none;\r\n  background-color: var(--input-background); /* 使用主题变量 */\r\n  color: var(--input-text-color); /* 使用主题变量 */\r\n}\r\n\r\n.username-input:focus {\r\n  border-color: var(--primary-color); /* 使用主题变量 */\r\n  box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 88, 101, 242), 0.2);\r\n}\r\n\r\n.error-message {\r\n  color: #e74c3c; /* 错误信息保持红色 */\r\n  margin-bottom: 1rem;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.enter-button {\r\n  width: 100%;\r\n  padding: 0.75rem;\r\n  background-color: var(--primary-color); /* 使用主题变量 */\r\n  color: white;\r\n  border: none;\r\n  border-radius: 0.25rem;\r\n  cursor: pointer;\r\n  font-size: 1rem;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.enter-button:hover {\r\n  background-color: var(--secondary-color); /* 使用主题变量 */\r\n}\r\n\r\n.enter-button:active {\r\n  filter: brightness(0.9);\r\n}\r\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAoB;;EACxBA,KAAK,EAAC;AAAe;;EAInBA,KAAK,EAAC;AAAgB;;EANjCC,GAAA;EAsBsBD,KAAK,EAAC;;;;uBArB1BE,mBAAA,CAyBM,OAzBNC,UAyBM,GAxBJC,mBAAA,CAuBM,OAvBNC,UAuBM,G,0BAtBJD,mBAAA,CAA8B;IAA1BJ,KAAK,EAAC;EAAO,GAAC,SAAO,sB,0BACzBI,mBAAA,CAAiC;IAA9BJ,KAAK,EAAC;EAAU,GAAC,WAAS,sBAE7BI,mBAAA,CAMM,OANNE,UAMM,GALJC,YAAA,CAGEC,yBAAA;IAFCC,QAAQ,EAAEC,KAAA,CAAAD,QAAQ;IAClBE,gBAAe,EAAEC,QAAA,CAAAC;uFAEpBT,mBAAA,CAAmC;IAAhCJ,KAAK,EAAC;EAAa,GAAC,UAAQ,qB,mBAGjCI,mBAAA,CAME;IApBR,uBAAAU,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAeiBL,KAAA,CAAAD,QAAQ,GAAAM,MAAA;IAChBC,OAAK,EAAAF,MAAA,QAAAA,MAAA,MAhBdG,SAAA,KAAAC,IAAA,KAgBsBN,QAAA,CAAAO,WAAA,IAAAP,QAAA,CAAAO,WAAA,IAAAD,IAAA,CAAW;IACzBE,IAAI,EAAC,MAAM;IACXC,WAAW,EAAC,SAAS;IACrBrB,KAAK,EAAC;iEAJGU,KAAA,CAAAD,QAAQ,E,GAOVC,KAAA,CAAAY,KAAK,I,cAAdpB,mBAAA,CAAqD,KAArDqB,UAAqD,EAAAC,gBAAA,CAAZd,KAAA,CAAAY,KAAK,oBAtBpDG,mBAAA,gBAwBMrB,mBAAA,CAAgE;IAAvDsB,OAAK,EAAAZ,MAAA,QAAAA,MAAA,UAAAI,IAAA,KAAEN,QAAA,CAAAO,WAAA,IAAAP,QAAA,CAAAO,WAAA,IAAAD,IAAA,CAAW;IAAElB,KAAK,EAAC;KAAe,OAAK,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}