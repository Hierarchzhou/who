{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport UserNameInput from './UserNameInput.vue';\nimport ThemeSelector from './ThemeSelector.vue';\nimport UserProfileEditor from './UserProfileEditor.vue';\nimport axios from 'axios';\nimport { handleAvatarError, getFallbackAvatarUrl } from '../../utils/avatarUtils';\nimport { ref, onMounted, onUnmounted, nextTick, watch } from 'vue';\nexport default {\n  name: 'ChatContainer',\n  components: {\n    UserNameInput,\n    ThemeSelector,\n    UserProfileEditor\n  },\n  props: {\n    currentUser: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props, {\n    emit\n  }) {\n    const messages = ref([]);\n    const newMessage = ref('');\n    const messagesList = ref(null);\n    const apiUrl = 'http://localhost:3001/api/messages';\n    const usersApiUrl = 'http://localhost:3001/api/users';\n    const username = ref(props.currentUser.username || '');\n    const userAvatar = ref(props.currentUser.avatar || '');\n    const onlineUsers = ref([]);\n    const pollingInterval = ref(null);\n    const onlinePollingInterval = ref(null);\n    const currentTheme = ref(localStorage.getItem('chat-theme') || 'discord');\n    const showProfileEditor = ref(false);\n    const currentUserInfo = ref({});\n\n    // 从localStorage获取用户信息\n    const initUserInfo = () => {\n      const savedUsername = localStorage.getItem('chat-username');\n      const savedAvatar = localStorage.getItem('chat-avatar');\n      if (savedUsername && !username.value) {\n        username.value = savedUsername;\n      }\n      if (savedAvatar && !userAvatar.value) {\n        userAvatar.value = savedAvatar;\n      } else if (!userAvatar.value) {\n        // 设置默认头像\n        userAvatar.value = '/avatars/default.png';\n        localStorage.setItem('chat-avatar', userAvatar.value);\n      }\n\n      // 如果用户已登录，注册用户\n      if (username.value) {\n        registerUser();\n      }\n    };\n\n    // 注册用户\n    const registerUser = async () => {\n      try {\n        await axios.post(`${usersApiUrl}/register`, {\n          username: username.value,\n          avatar: userAvatar.value\n        });\n        console.log('用户注册成功');\n      } catch (error) {\n        console.error('用户注册失败:', error);\n      }\n    };\n\n    // 获取消息\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get(apiUrl);\n        messages.value = response.data;\n        nextTick(() => {\n          scrollToBottom();\n        });\n      } catch (error) {\n        console.error('获取消息失败:', error);\n      }\n    };\n\n    // 获取在线用户\n    const fetchOnlineUsers = async () => {\n      try {\n        const response = await axios.get(`${usersApiUrl}/online`);\n        onlineUsers.value = response.data;\n        // 向父组件发送在线用户更新\n        emit('update-online-users', onlineUsers.value);\n      } catch (error) {\n        console.error('获取在线用户失败:', error);\n        if (onlineUsers.value.length === 0) {\n          onlineUsers.value = [{\n            username: username.value,\n            avatar: userAvatar.value\n          }];\n          emit('update-online-users', onlineUsers.value);\n        }\n      }\n    };\n\n    // 发送消息\n    const sendMessage = async () => {\n      if (!newMessage.value.trim()) return;\n      try {\n        const response = await axios.post(apiUrl, {\n          sender: username.value,\n          content: newMessage.value,\n          avatar: userAvatar.value\n        });\n        messages.value.push(response.data);\n        newMessage.value = '';\n        nextTick(() => {\n          scrollToBottom();\n        });\n      } catch (error) {\n        console.error('发送消息失败:', error);\n      }\n    };\n\n    // 滚动到底部\n    const scrollToBottom = () => {\n      nextTick(() => {\n        const messagesListEl = messagesList.value;\n        if (messagesListEl) {\n          messagesListEl.scrollTop = messagesListEl.scrollHeight;\n        }\n      });\n    };\n\n    // 格式化时间\n    const formatTime = timestamp => {\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString('zh-CN', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    };\n\n    // 设置用户名和头像\n    const setUsername = userData => {\n      username.value = userData.username;\n      userAvatar.value = userData.avatar;\n\n      // 保存到localStorage\n      localStorage.setItem('chat-username', username.value);\n      localStorage.setItem('chat-avatar', userAvatar.value);\n\n      // 注册用户\n      registerUser();\n\n      // 获取消息和在线用户\n      fetchMessages();\n      fetchOnlineUsers();\n\n      // 设置轮询\n      startPolling();\n    };\n\n    // 开始轮询\n    const startPolling = () => {\n      pollingInterval.value = setInterval(fetchMessages, 3000);\n      onlinePollingInterval.value = setInterval(fetchOnlineUsers, 5000);\n    };\n\n    // 停止轮询\n    const stopPolling = () => {\n      if (pollingInterval.value) {\n        clearInterval(pollingInterval.value);\n      }\n      if (onlinePollingInterval.value) {\n        clearInterval(onlinePollingInterval.value);\n      }\n    };\n\n    // 打开个人资料编辑器\n    const openProfileEditor = () => {\n      showProfileEditor.value = true;\n      currentUserInfo.value = {\n        username: username.value,\n        avatar: userAvatar.value\n      };\n    };\n\n    // 关闭个人资料编辑器\n    const closeProfileEditor = () => {\n      showProfileEditor.value = false;\n    };\n\n    // 更新用户信息\n    const updateProfile = updatedInfo => {\n      username.value = updatedInfo.username;\n      userAvatar.value = updatedInfo.avatar;\n\n      // 保存到localStorage\n      localStorage.setItem('chat-username', username.value);\n      localStorage.setItem('chat-avatar', userAvatar.value);\n\n      // 注册用户\n      registerUser();\n\n      // 获取消息和在线用户\n      fetchMessages();\n      fetchOnlineUsers();\n\n      // 设置轮询\n      startPolling();\n    };\n\n    // 监听消息列表变化\n    watch(messages, () => {\n      nextTick(() => {\n        scrollToBottom();\n      });\n    }, {\n      deep: true\n    });\n\n    // 组件挂载时\n    onMounted(() => {\n      initUserInfo();\n      document.body.classList.add(`theme-${currentTheme.value}`);\n      if (username.value) {\n        fetchMessages();\n        fetchOnlineUsers();\n        startPolling();\n      }\n    });\n\n    // 组件卸载时\n    onUnmounted(() => {\n      stopPolling();\n    });\n    return {\n      messages,\n      newMessage,\n      messagesList,\n      sendMessage,\n      formatTime,\n      handleAvatarError,\n      getFallbackAvatarUrl,\n      username,\n      userAvatar,\n      onlineUsers,\n      showProfileEditor,\n      currentUserInfo,\n      openProfileEditor,\n      closeProfileEditor,\n      updateProfile,\n      setUsername\n    };\n  }\n};","map":{"version":3,"names":["UserNameInput","ThemeSelector","UserProfileEditor","axios","handleAvatarError","getFallbackAvatarUrl","ref","onMounted","onUnmounted","nextTick","watch","name","components","props","currentUser","type","Object","required","setup","emit","messages","newMessage","messagesList","apiUrl","usersApiUrl","username","userAvatar","avatar","onlineUsers","pollingInterval","onlinePollingInterval","currentTheme","localStorage","getItem","showProfileEditor","currentUserInfo","initUserInfo","savedUsername","savedAvatar","value","setItem","registerUser","post","console","log","error","fetchMessages","response","get","data","scrollToBottom","fetchOnlineUsers","length","sendMessage","trim","sender","content","push","messagesListEl","scrollTop","scrollHeight","formatTime","timestamp","date","Date","toLocaleTimeString","hour","minute","setUsername","userData","startPolling","setInterval","stopPolling","clearInterval","openProfileEditor","closeProfileEditor","updateProfile","updatedInfo","deep","document","body","classList","add"],"sources":["C:\\Users\\Administrator\\Desktop\\discord-chat-app\\fack\\just-do-it\\src\\components\\chat\\ChatContainer.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <!-- 用户名输入界面，当用户未设置昵称时显示 -->\r\n    <UserNameInput \r\n      v-if=\"!username\" \r\n      @set-username=\"setUsername\" \r\n    />\r\n    \r\n    <!-- 聊天界面，当用户已设置昵称时显示 -->\r\n    <div v-else class=\"chat-interface\">\r\n      <header class=\"chat-header\">\r\n        <h2 class=\"chat-title\">Vue聊天室</h2>\r\n        <div class=\"user-info-container\">\r\n          <ThemeSelector />\r\n          <div class=\"user-info\">\r\n            <img \r\n              :src=\"userAvatar || getFallbackAvatarUrl()\" \r\n              alt=\"用户头像\" \r\n              class=\"user-avatar\"\r\n              @error=\"handleAvatarError\"\r\n              @click=\"openProfileEditor\" \r\n            >\r\n            <span class=\"current-username\">{{ username }}</span>\r\n          </div>\r\n        </div>\r\n      </header>\r\n      \r\n      <div class=\"chat-main\">\r\n        <div class=\"messages-container\">\r\n          <div class=\"messages-list\" ref=\"messagesList\">\r\n            <div v-for=\"message in messages\" :key=\"message.id\" class=\"message-item\">\r\n              <div class=\"message-avatar\">\r\n                <img \r\n                  :src=\"message.avatar || getFallbackAvatarUrl()\" \r\n                  :alt=\"message.sender\"\r\n                  @error=\"handleAvatarError\"\r\n                >\r\n              </div>\r\n              <div class=\"message-content\">\r\n                <div class=\"message-header\">\r\n                  <span class=\"message-sender\">{{ message.sender }}</span>\r\n                  <span class=\"message-time\">{{ formatTime(message.timestamp) }}</span>\r\n                </div>\r\n                <div class=\"message-text\">{{ message.content }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"input-container\">\r\n          <div class=\"input-wrapper\">\r\n            <input \r\n              type=\"text\" \r\n              v-model=\"newMessage\" \r\n              @keyup.enter=\"sendMessage\"\r\n              placeholder=\"发送消息...\"\r\n              class=\"message-input\"\r\n            >\r\n            <button class=\"send-button\" @click=\"sendMessage\">\r\n              发送\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 个人资料编辑器 -->\r\n    <UserProfileEditor \r\n      :isOpen=\"showProfileEditor\"\r\n      :currentUserInfo=\"currentUserInfo\"\r\n      @close=\"closeProfileEditor\"\r\n      @update-profile=\"updateProfile\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport UserNameInput from './UserNameInput.vue';\r\nimport ThemeSelector from './ThemeSelector.vue';\r\nimport UserProfileEditor from './UserProfileEditor.vue';\r\nimport axios from 'axios';\r\nimport { handleAvatarError, getFallbackAvatarUrl } from '../../utils/avatarUtils';\r\nimport { ref, onMounted, onUnmounted, nextTick, watch } from 'vue';\r\n\r\nexport default {\r\n  name: 'ChatContainer',\r\n  components: {\r\n    UserNameInput,\r\n    ThemeSelector,\r\n    UserProfileEditor\r\n  },\r\n  props: {\r\n    currentUser: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  setup(props, { emit }) {\r\n    const messages = ref([]);\r\n    const newMessage = ref('');\r\n    const messagesList = ref(null);\r\n    const apiUrl = 'http://localhost:3001/api/messages';\r\n    const usersApiUrl = 'http://localhost:3001/api/users';\r\n    const username = ref(props.currentUser.username || '');\r\n    const userAvatar = ref(props.currentUser.avatar || '');\r\n    const onlineUsers = ref([]);\r\n    const pollingInterval = ref(null);\r\n    const onlinePollingInterval = ref(null);\r\n    const currentTheme = ref(localStorage.getItem('chat-theme') || 'discord');\r\n    const showProfileEditor = ref(false);\r\n    const currentUserInfo = ref({});\r\n\r\n    // 从localStorage获取用户信息\r\n    const initUserInfo = () => {\r\n      const savedUsername = localStorage.getItem('chat-username');\r\n      const savedAvatar = localStorage.getItem('chat-avatar');\r\n      \r\n      if (savedUsername && !username.value) {\r\n        username.value = savedUsername;\r\n      }\r\n      \r\n      if (savedAvatar && !userAvatar.value) {\r\n        userAvatar.value = savedAvatar;\r\n      } else if (!userAvatar.value) {\r\n        // 设置默认头像\r\n        userAvatar.value = '/avatars/default.png';\r\n        localStorage.setItem('chat-avatar', userAvatar.value);\r\n      }\r\n      \r\n      // 如果用户已登录，注册用户\r\n      if (username.value) {\r\n        registerUser();\r\n      }\r\n    };\r\n\r\n    // 注册用户\r\n    const registerUser = async () => {\r\n      try {\r\n        await axios.post(`${usersApiUrl}/register`, {\r\n          username: username.value,\r\n          avatar: userAvatar.value\r\n        });\r\n        console.log('用户注册成功');\r\n      } catch (error) {\r\n        console.error('用户注册失败:', error);\r\n      }\r\n    };\r\n\r\n    // 获取消息\r\n    const fetchMessages = async () => {\r\n      try {\r\n        const response = await axios.get(apiUrl);\r\n        messages.value = response.data;\r\n        nextTick(() => {\r\n          scrollToBottom();\r\n        });\r\n      } catch (error) {\r\n        console.error('获取消息失败:', error);\r\n      }\r\n    };\r\n\r\n    // 获取在线用户\r\n    const fetchOnlineUsers = async () => {\r\n      try {\r\n        const response = await axios.get(`${usersApiUrl}/online`);\r\n        onlineUsers.value = response.data;\r\n        // 向父组件发送在线用户更新\r\n        emit('update-online-users', onlineUsers.value);\r\n      } catch (error) {\r\n        console.error('获取在线用户失败:', error);\r\n        if (onlineUsers.value.length === 0) {\r\n          onlineUsers.value = [\r\n            { username: username.value, avatar: userAvatar.value }\r\n          ];\r\n          emit('update-online-users', onlineUsers.value);\r\n        }\r\n      }\r\n    };\r\n\r\n    // 发送消息\r\n    const sendMessage = async () => {\r\n      if (!newMessage.value.trim()) return;\r\n      \r\n      try {\r\n        const response = await axios.post(apiUrl, {\r\n          sender: username.value,\r\n          content: newMessage.value,\r\n          avatar: userAvatar.value\r\n        });\r\n        \r\n        messages.value.push(response.data);\r\n        newMessage.value = '';\r\n        nextTick(() => {\r\n          scrollToBottom();\r\n        });\r\n      } catch (error) {\r\n        console.error('发送消息失败:', error);\r\n      }\r\n    };\r\n\r\n    // 滚动到底部\r\n    const scrollToBottom = () => {\r\n      nextTick(() => {\r\n        const messagesListEl = messagesList.value;\r\n        if (messagesListEl) {\r\n          messagesListEl.scrollTop = messagesListEl.scrollHeight;\r\n        }\r\n      });\r\n    };\r\n\r\n    // 格式化时间\r\n    const formatTime = (timestamp) => {\r\n      const date = new Date(timestamp);\r\n      return date.toLocaleTimeString('zh-CN', {\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      });\r\n    };\r\n\r\n    // 设置用户名和头像\r\n    const setUsername = (userData) => {\r\n      username.value = userData.username;\r\n      userAvatar.value = userData.avatar;\r\n      \r\n      // 保存到localStorage\r\n      localStorage.setItem('chat-username', username.value);\r\n      localStorage.setItem('chat-avatar', userAvatar.value);\r\n      \r\n      // 注册用户\r\n      registerUser();\r\n      \r\n      // 获取消息和在线用户\r\n      fetchMessages();\r\n      fetchOnlineUsers();\r\n      \r\n      // 设置轮询\r\n      startPolling();\r\n    };\r\n\r\n    // 开始轮询\r\n    const startPolling = () => {\r\n      pollingInterval.value = setInterval(fetchMessages, 3000);\r\n      onlinePollingInterval.value = setInterval(fetchOnlineUsers, 5000);\r\n    };\r\n\r\n    // 停止轮询\r\n    const stopPolling = () => {\r\n      if (pollingInterval.value) {\r\n        clearInterval(pollingInterval.value);\r\n      }\r\n      if (onlinePollingInterval.value) {\r\n        clearInterval(onlinePollingInterval.value);\r\n      }\r\n    };\r\n\r\n    // 打开个人资料编辑器\r\n    const openProfileEditor = () => {\r\n      showProfileEditor.value = true;\r\n      currentUserInfo.value = {\r\n        username: username.value,\r\n        avatar: userAvatar.value\r\n      };\r\n    };\r\n\r\n    // 关闭个人资料编辑器\r\n    const closeProfileEditor = () => {\r\n      showProfileEditor.value = false;\r\n    };\r\n\r\n    // 更新用户信息\r\n    const updateProfile = (updatedInfo) => {\r\n      username.value = updatedInfo.username;\r\n      userAvatar.value = updatedInfo.avatar;\r\n      \r\n      // 保存到localStorage\r\n      localStorage.setItem('chat-username', username.value);\r\n      localStorage.setItem('chat-avatar', userAvatar.value);\r\n      \r\n      // 注册用户\r\n      registerUser();\r\n      \r\n      // 获取消息和在线用户\r\n      fetchMessages();\r\n      fetchOnlineUsers();\r\n      \r\n      // 设置轮询\r\n      startPolling();\r\n    };\r\n\r\n    // 监听消息列表变化\r\n    watch(messages, () => {\r\n      nextTick(() => {\r\n        scrollToBottom();\r\n      });\r\n    }, { deep: true });\r\n\r\n    // 组件挂载时\r\n    onMounted(() => {\r\n      initUserInfo();\r\n      document.body.classList.add(`theme-${currentTheme.value}`);\r\n      \r\n      if (username.value) {\r\n        fetchMessages();\r\n        fetchOnlineUsers();\r\n        startPolling();\r\n      }\r\n    });\r\n\r\n    // 组件卸载时\r\n    onUnmounted(() => {\r\n      stopPolling();\r\n    });\r\n\r\n    return {\r\n      messages,\r\n      newMessage,\r\n      messagesList,\r\n      sendMessage,\r\n      formatTime,\r\n      handleAvatarError,\r\n      getFallbackAvatarUrl,\r\n      username,\r\n      userAvatar,\r\n      onlineUsers,\r\n      showProfileEditor,\r\n      currentUserInfo,\r\n      openProfileEditor,\r\n      closeProfileEditor,\r\n      updateProfile,\r\n      setUsername\r\n    };\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container {\r\n  flex: 1;\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: var(--chat-background); /* 使用主题变量 */\r\n  color: var(--text-color); /* 使用主题变量 */\r\n  position: relative;\r\n  z-index: 1;\r\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);\r\n  background-image: var(--background-image); /* 使用主题变量中的背景图案 */\r\n  background-repeat: repeat;\r\n  background-size: 100px 100px; /* 设置背景图案大小 */\r\n}\r\n\r\n.chat-interface {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  backdrop-filter: blur(5px); /* 添加模糊效果 */\r\n}\r\n\r\n.chat-header {\r\n  padding: 1rem 1.5rem;\r\n  background-color: var(--primary-color); /* 使用主题变量 */\r\n  color: var(--header-color); /* 使用主题变量 */\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  box-shadow: var(--header-shadow);\r\n  position: relative;\r\n  z-index: 2;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1); /* 添加边框 */\r\n  background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.05), transparent); /* 添加渐变效果 */\r\n}\r\n\r\n.chat-title {\r\n  margin: 0;\r\n  font-size: 1.25rem;\r\n  font-weight: 600;\r\n  letter-spacing: 0.5px;\r\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2); /* 添加文字阴影 */\r\n}\r\n\r\n.user-info-container {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 1rem;\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  padding: 0.5rem 0.75rem;\r\n  border-radius: 2rem;\r\n  backdrop-filter: blur(5px);\r\n  border: 1px solid rgba(255, 255, 255, 0.05); /* 添加细微边框 */\r\n  transition: all 0.2s ease; /* 添加过渡效果 */\r\n}\r\n\r\n.user-info:hover {\r\n  background-color: rgba(255, 255, 255, 0.15); /* 悬停时背景变亮 */\r\n  transform: translateY(-1px); /* 悬停时轻微上移 */\r\n}\r\n\r\n.user-avatar {\r\n  width: 32px; /* 增加头像尺寸 */\r\n  height: 32px; /* 增加头像尺寸 */\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  border: var(--avatar-border, 1px solid rgba(255, 255, 255, 0.3));\r\n  box-shadow: var(--avatar-shadow, 0 2px 4px rgba(0, 0, 0, 0.2));\r\n  transition: transform 0.2s ease; /* 添加过渡效果 */\r\n}\r\n\r\n.user-avatar:hover {\r\n  transform: scale(1.1); /* 悬停时放大 */\r\n}\r\n\r\n.current-username {\r\n  margin-left: 0.5rem;\r\n  font-weight: 500;\r\n  color: var(--text-color);\r\n  mix-blend-mode: overlay;\r\n}\r\n\r\n.chat-main {\r\n  display: flex;\r\n  flex: 1;\r\n  overflow: hidden;\r\n  position: relative;\r\n  background-image: var(--background-image); /* 使用主题变量中的背景图案 */\r\n  background-repeat: repeat;\r\n  background-size: 100px 100px; /* 设置背景图案大小 */\r\n}\r\n\r\n.messages-container {\r\n  flex: 1;\r\n  overflow: hidden;\r\n  padding: 20px;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.messages-list {\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  padding-right: 8px;\r\n}\r\n\r\n.messages-list::-webkit-scrollbar {\r\n  width: 8px;\r\n}\r\n\r\n.messages-list::-webkit-scrollbar-track {\r\n  background: transparent;\r\n}\r\n\r\n.messages-list::-webkit-scrollbar-thumb {\r\n  background-color: var(--background-tertiary);\r\n  border-radius: 4px;\r\n}\r\n\r\n.message-item {\r\n  display: flex;\r\n  margin-bottom: 16px;\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.message-item:hover {\r\n  background-color: var(--background-modifier-hover);\r\n}\r\n\r\n.message-avatar {\r\n  margin-right: 16px;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.message-avatar img {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n}\r\n\r\n.message-content {\r\n  flex: 1;\r\n  min-width: 0;\r\n}\r\n\r\n.message-header {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.message-sender {\r\n  font-weight: 500;\r\n  color: var(--header-primary);\r\n  margin-right: 8px;\r\n}\r\n\r\n.message-time {\r\n  font-size: 0.8rem;\r\n  color: var(--text-muted);\r\n}\r\n\r\n.message-text {\r\n  color: var(--text-normal);\r\n  word-wrap: break-word;\r\n  line-height: 1.4;\r\n}\r\n\r\n.input-container {\r\n  padding: 16px;\r\n  background-color: var(--background-secondary);\r\n  border-top: 1px solid var(--border-color);\r\n}\r\n\r\n.input-wrapper {\r\n  display: flex;\r\n  gap: 12px;\r\n  padding: 0 16px;\r\n  background-color: var(--background-tertiary);\r\n  border-radius: 8px;\r\n}\r\n\r\n.message-input {\r\n  flex: 1;\r\n  padding: 12px 0;\r\n  background: none;\r\n  border: none;\r\n  color: var(--text-normal);\r\n  font-size: 1rem;\r\n  outline: none;\r\n}\r\n\r\n.message-input::placeholder {\r\n  color: var(--text-muted);\r\n}\r\n\r\n.send-button {\r\n  padding: 8px 16px;\r\n  background: none;\r\n  border: none;\r\n  color: var(--text-link);\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: color 0.2s;\r\n}\r\n\r\n.send-button:hover {\r\n  color: var(--header-primary);\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .chat-container {\r\n    height: auto;\r\n    flex: 1;\r\n  }\r\n  \r\n  .messages-container {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .message-avatar img {\r\n    width: 32px;\r\n    height: 32px;\r\n  }\r\n  \r\n  .input-container {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .input-wrapper {\r\n    padding: 0 12px;\r\n  }\r\n  \r\n  .message-input {\r\n    padding: 10px 0;\r\n  }\r\n  \r\n  .send-button {\r\n    padding: 6px 12px;\r\n  }\r\n}\r\n</style> \r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}