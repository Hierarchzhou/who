{"ast":null,"code":"import { defineComponent, computed, ref } from 'vue';\nimport { useStore } from 'vuex';\nimport StickerMessage from './StickerMessage.vue';\nimport { formatTimestamp } from '@/utils/time';\nexport default defineComponent({\n  name: 'MessageList',\n  components: {\n    StickerMessage\n  },\n  props: {\n    messages: {\n      type: Array,\n      default: () => []\n    },\n    currentUsername: {\n      type: String,\n      default: ''\n    }\n  },\n  emits: ['open-profile-editor'],\n  setup(props, {\n    emit\n  }) {\n    const store = useStore();\n    const defaultAvatar = 'https://api.dicebear.com/7.x/bottts/svg';\n    const messageList = ref(null);\n\n    // 获取当前状态，使用userProfile store\n    const userStatus = computed(() => store.getters['userProfile/status']);\n    const handleAvatarError = event => {\n      event.target.src = defaultAvatar;\n    };\n    const handleAvatarClick = sender => {\n      if (sender === props.currentUsername) {\n        emit('open-profile-editor');\n      }\n    };\n    const isSticker = content => {\n      return typeof content === 'string' && content.startsWith('[sticker:') && content.endsWith(']');\n    };\n    const extractStickerId = content => {\n      if (!content) return null;\n      const match = content.match(/\\[sticker:(.+?)\\]/);\n      return match ? match[1] : null;\n    };\n    const scrollToBottom = () => {\n      if (messageList.value) {\n        messageList.value.scrollTop = messageList.value.scrollHeight;\n      }\n    };\n\n    // 生成一致的用户名颜色\n    const getUsernameColor = username => {\n      const colors = ['#1abc9c', '#2ecc71', '#3498db', '#9b59b6', '#e91e63', '#f1c40f', '#e67e22', '#e74c3c', '#95a5a6', '#607d8b'];\n      let hash = 0;\n      for (let i = 0; i < username.length; i++) {\n        hash = username.charCodeAt(i) + ((hash << 5) - hash);\n      }\n      return colors[Math.abs(hash) % colors.length];\n    };\n\n    // 检查是否是新的一天\n    const shouldShowDateDivider = (message, index) => {\n      if (index === 0) return true;\n      const prevMessage = props.messages[index - 1];\n      const prevDate = new Date(prevMessage.timestamp).toLocaleDateString();\n      const currentDate = new Date(message.timestamp).toLocaleDateString();\n      return prevDate !== currentDate;\n    };\n\n    // 格式化日期\n    const formatDate = timestamp => {\n      return new Date(timestamp).toLocaleDateString('zh-CN', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    };\n\n    // 格式化消息时间\n    const formatMessageTime = timestamp => {\n      return new Date(timestamp).toLocaleTimeString('zh-CN', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    };\n\n    // 检查是否是组中的第一条消息\n    const isFirstInGroup = (message, index) => {\n      if (index === 0) return true;\n      const prevMessage = props.messages[index - 1];\n      const timeDiff = new Date(message.timestamp) - new Date(prevMessage.timestamp);\n      return prevMessage.sender !== message.sender || timeDiff > 5 * 60 * 1000; // 5分钟间隔\n    };\n\n    // 检查是否是新的消息组\n    const isFirstMessage = (message, index) => {\n      return index === 0 || shouldShowDateDivider(message, index);\n    };\n    return {\n      defaultAvatar,\n      userStatus,\n      handleAvatarError,\n      handleAvatarClick,\n      formatTime: formatTimestamp,\n      isSticker,\n      extractStickerId,\n      scrollToBottom,\n      messageList,\n      getUsernameColor,\n      shouldShowDateDivider,\n      formatDate,\n      formatMessageTime,\n      isFirstInGroup,\n      isFirstMessage\n    };\n  },\n  watch: {\n    messages: {\n      handler() {\n        this.scrollToBottom();\n      },\n      deep: true\n    }\n  },\n  mounted() {\n    this.scrollToBottom();\n  }\n});","map":{"version":3,"names":["defineComponent","computed","ref","useStore","StickerMessage","formatTimestamp","name","components","props","messages","type","Array","default","currentUsername","String","emits","setup","emit","store","defaultAvatar","messageList","userStatus","getters","handleAvatarError","event","target","src","handleAvatarClick","sender","isSticker","content","startsWith","endsWith","extractStickerId","match","scrollToBottom","value","scrollTop","scrollHeight","getUsernameColor","username","colors","hash","i","length","charCodeAt","Math","abs","shouldShowDateDivider","message","index","prevMessage","prevDate","Date","timestamp","toLocaleDateString","currentDate","formatDate","year","month","day","formatMessageTime","toLocaleTimeString","hour","minute","isFirstInGroup","timeDiff","isFirstMessage","formatTime","watch","handler","deep","mounted"],"sources":["C:\\Users\\Administrator\\Desktop\\who\\src\\components\\chat\\MessageList.vue"],"sourcesContent":["<template>\r\n  <div class=\"message-list\" ref=\"messageList\">\r\n    <div v-if=\"messages.length === 0\" class=\"welcome-message\">\r\n      <div class=\"welcome-header\">\r\n        <h2>欢迎来到 #general</h2>\r\n        <p>这是聊天室的开始。</p>\r\n      </div>\r\n    </div>\r\n    <div v-else class=\"messages-container\">\r\n      <div \r\n        v-for=\"(message, index) in messages\" \r\n        :key=\"message.id || message.timestamp\" \r\n        class=\"message-group\"\r\n        :class=\"{ 'first-message': isFirstMessage(message, index) }\"\r\n      >\r\n        <!-- 日期分隔线 -->\r\n        <div v-if=\"shouldShowDateDivider(message, index)\" class=\"date-divider\">\r\n          <span class=\"date-text\">{{ formatDate(message.timestamp) }}</span>\r\n        </div>\r\n        \r\n        <!-- 消息内容 -->\r\n        <div class=\"message-item\" :class=\"{ 'compact': !isFirstInGroup(message, index) }\">\r\n          <div class=\"message-avatar\" v-if=\"isFirstInGroup(message, index)\">\r\n            <img \r\n              :src=\"message.avatar || defaultAvatar\" \r\n              :alt=\"message.sender\" \r\n              class=\"avatar-img\" \r\n              @error=\"handleAvatarError\"\r\n              @click=\"handleAvatarClick(message.sender)\"\r\n              :class=\"{ 'clickable': message.sender === currentUsername }\"\r\n            />\r\n          </div>\r\n          <div class=\"message-content\">\r\n            <div class=\"message-header\" v-if=\"isFirstInGroup(message, index)\">\r\n              <span \r\n                class=\"username\"\r\n                :style=\"{ color: getUsernameColor(message.sender) }\"\r\n              >{{ message.sender }}</span>\r\n              <span class=\"timestamp\">{{ formatMessageTime(message.timestamp) }}</span>\r\n            </div>\r\n            <div class=\"message-body\" :class=\"{ 'with-timestamp': !isFirstInGroup(message, index) }\">\r\n              <span v-if=\"!isFirstInGroup(message, index)\" class=\"inline-timestamp\">\r\n                {{ formatMessageTime(message.timestamp) }}\r\n              </span>\r\n              <template v-if=\"isSticker(message.content)\">\r\n                <StickerMessage :sticker-id=\"extractStickerId(message.content)\" />\r\n              </template>\r\n              <template v-else>\r\n                <div class=\"message-text\">{{ message.content }}</div>\r\n              </template>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent, computed, ref } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport StickerMessage from './StickerMessage.vue'\r\nimport { formatTimestamp } from '@/utils/time'\r\n\r\nexport default defineComponent({\r\n  name: 'MessageList',\r\n  components: {\r\n    StickerMessage\r\n  },\r\n  props: {\r\n    messages: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    currentUsername: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  emits: ['open-profile-editor'],\r\n  setup(props, { emit }) {\r\n    const store = useStore()\r\n    const defaultAvatar = 'https://api.dicebear.com/7.x/bottts/svg'\r\n    const messageList = ref(null)\r\n    \r\n    // 获取当前状态，使用userProfile store\r\n    const userStatus = computed(() => store.getters['userProfile/status'])\r\n\r\n    const handleAvatarError = (event) => {\r\n      event.target.src = defaultAvatar\r\n    }\r\n\r\n    const handleAvatarClick = (sender) => {\r\n      if (sender === props.currentUsername) {\r\n        emit('open-profile-editor')\r\n      }\r\n    }\r\n\r\n    const isSticker = (content) => {\r\n      return typeof content === 'string' && content.startsWith('[sticker:') && content.endsWith(']')\r\n    }\r\n\r\n    const extractStickerId = (content) => {\r\n      if (!content) return null\r\n      const match = content.match(/\\[sticker:(.+?)\\]/)\r\n      return match ? match[1] : null\r\n    }\r\n\r\n    const scrollToBottom = () => {\r\n      if (messageList.value) {\r\n        messageList.value.scrollTop = messageList.value.scrollHeight\r\n      }\r\n    }\r\n\r\n    // 生成一致的用户名颜色\r\n    const getUsernameColor = (username) => {\r\n      const colors = [\r\n        '#1abc9c', '#2ecc71', '#3498db', '#9b59b6', '#e91e63',\r\n        '#f1c40f', '#e67e22', '#e74c3c', '#95a5a6', '#607d8b'\r\n      ]\r\n      let hash = 0\r\n      for (let i = 0; i < username.length; i++) {\r\n        hash = username.charCodeAt(i) + ((hash << 5) - hash)\r\n      }\r\n      return colors[Math.abs(hash) % colors.length]\r\n    }\r\n\r\n    // 检查是否是新的一天\r\n    const shouldShowDateDivider = (message, index) => {\r\n      if (index === 0) return true\r\n      const prevMessage = props.messages[index - 1]\r\n      const prevDate = new Date(prevMessage.timestamp).toLocaleDateString()\r\n      const currentDate = new Date(message.timestamp).toLocaleDateString()\r\n      return prevDate !== currentDate\r\n    }\r\n\r\n    // 格式化日期\r\n    const formatDate = (timestamp) => {\r\n      return new Date(timestamp).toLocaleDateString('zh-CN', {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric'\r\n      })\r\n    }\r\n\r\n    // 格式化消息时间\r\n    const formatMessageTime = (timestamp) => {\r\n      return new Date(timestamp).toLocaleTimeString('zh-CN', {\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      })\r\n    }\r\n\r\n    // 检查是否是组中的第一条消息\r\n    const isFirstInGroup = (message, index) => {\r\n      if (index === 0) return true\r\n      const prevMessage = props.messages[index - 1]\r\n      const timeDiff = new Date(message.timestamp) - new Date(prevMessage.timestamp)\r\n      return prevMessage.sender !== message.sender || timeDiff > 5 * 60 * 1000 // 5分钟间隔\r\n    }\r\n\r\n    // 检查是否是新的消息组\r\n    const isFirstMessage = (message, index) => {\r\n      return index === 0 || shouldShowDateDivider(message, index)\r\n    }\r\n\r\n    return {\r\n      defaultAvatar,\r\n      userStatus,\r\n      handleAvatarError,\r\n      handleAvatarClick,\r\n      formatTime: formatTimestamp,\r\n      isSticker,\r\n      extractStickerId,\r\n      scrollToBottom,\r\n      messageList,\r\n      getUsernameColor,\r\n      shouldShowDateDivider,\r\n      formatDate,\r\n      formatMessageTime,\r\n      isFirstInGroup,\r\n      isFirstMessage\r\n    }\r\n  },\r\n  watch: {\r\n    messages: {\r\n      handler() {\r\n        this.scrollToBottom()\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n  mounted() {\r\n    this.scrollToBottom()\r\n  }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.message-list {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 1rem 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: var(--background-primary);\r\n}\r\n\r\n.welcome-message {\r\n  padding: 48px 16px;\r\n  text-align: center;\r\n}\r\n\r\n.welcome-header {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.welcome-header h2 {\r\n  color: var(--header-primary);\r\n  font-size: 32px;\r\n  font-weight: 700;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.welcome-header p {\r\n  color: var(--text-normal);\r\n  font-size: 16px;\r\n}\r\n\r\n.messages-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n  padding: 0 16px;\r\n}\r\n\r\n.message-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 2px;\r\n}\r\n\r\n.date-divider {\r\n  margin: 24px 0 8px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.date-divider::before,\r\n.date-divider::after {\r\n  content: '';\r\n  height: 1px;\r\n  flex: 1;\r\n  background-color: var(--background-accent);\r\n}\r\n\r\n.date-text {\r\n  color: var(--text-muted);\r\n  font-size: 12px;\r\n  font-weight: 600;\r\n  text-transform: uppercase;\r\n  padding: 0 8px;\r\n}\r\n\r\n.message-item {\r\n  display: flex;\r\n  gap: 16px;\r\n  padding: 2px 0;\r\n  position: relative;\r\n}\r\n\r\n.message-item:hover {\r\n  background-color: var(--background-secondary);\r\n}\r\n\r\n.message-item.compact {\r\n  margin-left: 56px;\r\n}\r\n\r\n.message-avatar {\r\n  width: 40px;\r\n  height: 40px;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.avatar-img {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n  transition: opacity 0.2s ease;\r\n}\r\n\r\n.avatar-img:hover {\r\n  opacity: 0.8;\r\n}\r\n\r\n.message-content {\r\n  flex: 1;\r\n  min-width: 0;\r\n}\r\n\r\n.message-header {\r\n  display: flex;\r\n  align-items: baseline;\r\n  gap: 8px;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.username {\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n}\r\n\r\n.username:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n.timestamp {\r\n  color: var(--text-muted);\r\n  font-size: 12px;\r\n}\r\n\r\n.message-body {\r\n  color: var(--text-normal);\r\n  font-size: 16px;\r\n  line-height: 1.375;\r\n  white-space: pre-wrap;\r\n  word-wrap: break-word;\r\n}\r\n\r\n.message-body.with-timestamp {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n.inline-timestamp {\r\n  color: var(--text-muted);\r\n  font-size: 12px;\r\n  margin-top: 3px;\r\n  opacity: 0;\r\n}\r\n\r\n.message-item:hover .inline-timestamp {\r\n  opacity: 1;\r\n}\r\n\r\n.message-text {\r\n  flex: 1;\r\n}\r\n\r\n/* 响应式样式 */\r\n@media (max-width: 768px) {\r\n  .message-list {\r\n    padding: 8px 0;\r\n  }\r\n\r\n  .messages-container {\r\n    padding: 0 8px;\r\n  }\r\n\r\n  .message-item.compact {\r\n    margin-left: 40px;\r\n  }\r\n\r\n  .message-avatar {\r\n    width: 32px;\r\n    height: 32px;\r\n  }\r\n\r\n  .avatar-img {\r\n    width: 32px;\r\n    height: 32px;\r\n  }\r\n\r\n  .username {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .message-body {\r\n    font-size: 14px;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}