{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createElementVNode as _createElementVNode, createVNode as _createVNode, toDisplayString as _toDisplayString, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat-interface\"\n};\nconst _hoisted_3 = {\n  class: \"chat-header\"\n};\nconst _hoisted_4 = {\n  class: \"user-info-container\"\n};\nconst _hoisted_5 = {\n  class: \"user-info\"\n};\nconst _hoisted_6 = [\"src\"];\nconst _hoisted_7 = {\n  class: \"current-username\"\n};\nconst _hoisted_8 = {\n  class: \"chat-main\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UserNameInput = _resolveComponent(\"UserNameInput\");\n  const _component_ThemeSelector = _resolveComponent(\"ThemeSelector\");\n  const _component_MessageList = _resolveComponent(\"MessageList\");\n  const _component_MessageInput = _resolveComponent(\"MessageInput\");\n  const _component_UserProfileEditor = _resolveComponent(\"UserProfileEditor\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 用户名输入界面，当用户未设置昵称时显示 \"), !$setup.username ? (_openBlock(), _createBlock(_component_UserNameInput, {\n    key: 0,\n    onSetUsername: $options.setUsername\n  }, null, 8 /* PROPS */, [\"onSetUsername\"])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 聊天界面，当用户已设置昵称时显示 \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"header\", _hoisted_3, [_cache[2] || (_cache[2] = _createElementVNode(\"h2\", {\n    class: \"chat-title\"\n  }, \"Vue聊天室\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_ThemeSelector), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"img\", {\n    src: $setup.userAvatar || $setup.getFallbackAvatarUrl(),\n    alt: \"用户头像\",\n    class: \"user-avatar\",\n    onError: _cache[0] || (_cache[0] = (...args) => $setup.handleAvatarError && $setup.handleAvatarError(...args)),\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.openProfileEditor && $options.openProfileEditor(...args))\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_6), _createElementVNode(\"span\", _hoisted_7, _toDisplayString($setup.username), 1 /* TEXT */)])])]), _createElementVNode(\"div\", _hoisted_8, [_createVNode(_component_MessageList, {\n    messages: $data.messages,\n    currentUsername: $setup.username,\n    ref: \"messageList\",\n    onOpenProfileEditor: $options.openProfileEditor\n  }, null, 8 /* PROPS */, [\"messages\", \"currentUsername\", \"onOpenProfileEditor\"])]), _createVNode(_component_MessageInput, {\n    onSendMessage: $options.sendMessage\n  }, null, 8 /* PROPS */, [\"onSendMessage\"])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createCommentVNode(\" 个人资料编辑器 \"), _createVNode(_component_UserProfileEditor, {\n    isOpen: $data.showProfileEditor,\n    currentUserInfo: $data.currentUserInfo,\n    onClose: $options.closeProfileEditor,\n    onUpdateProfile: $options.updateProfile\n  }, null, 8 /* PROPS */, [\"isOpen\", \"currentUserInfo\", \"onClose\", \"onUpdateProfile\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","$setup","username","_createBlock","_component_UserNameInput","key","onSetUsername","$options","setUsername","_Fragment","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_createVNode","_component_ThemeSelector","_hoisted_5","src","userAvatar","getFallbackAvatarUrl","alt","onError","_cache","args","handleAvatarError","onClick","openProfileEditor","_hoisted_6","_hoisted_7","_toDisplayString","_hoisted_8","_component_MessageList","messages","$data","currentUsername","ref","onOpenProfileEditor","_component_MessageInput","onSendMessage","sendMessage","_component_UserProfileEditor","isOpen","showProfileEditor","currentUserInfo","onClose","closeProfileEditor","onUpdateProfile","updateProfile"],"sources":["C:\\Users\\Administrator\\Desktop\\discord-chat-app\\fack\\just-do-it\\src\\components\\chat\\ChatContainer.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <!-- 用户名输入界面，当用户未设置昵称时显示 -->\n    <UserNameInput \n      v-if=\"!username\" \n      @set-username=\"setUsername\" \n    />\n    \n    <!-- 聊天界面，当用户已设置昵称时显示 -->\n    <div v-else class=\"chat-interface\">\n      <header class=\"chat-header\">\n        <h2 class=\"chat-title\">Vue聊天室</h2>\n        <div class=\"user-info-container\">\n          <ThemeSelector />\n          <div class=\"user-info\">\n            <img \n              :src=\"userAvatar || getFallbackAvatarUrl()\" \n              alt=\"用户头像\" \n              class=\"user-avatar\"\n              @error=\"handleAvatarError\"\n              @click=\"openProfileEditor\" \n            >\n            <span class=\"current-username\">{{ username }}</span>\n          </div>\n        </div>\n      </header>\n      \n      <div class=\"chat-main\">\n        <MessageList \n          :messages=\"messages\" \n          :currentUsername=\"username\" \n          ref=\"messageList\"\n          @open-profile-editor=\"openProfileEditor\"\n        />\n      </div>\n      \n      <MessageInput @send-message=\"sendMessage\" />\n    </div>\n    \n    <!-- 个人资料编辑器 -->\n    <UserProfileEditor \n      :isOpen=\"showProfileEditor\"\n      :currentUserInfo=\"currentUserInfo\"\n      @close=\"closeProfileEditor\"\n      @update-profile=\"updateProfile\"\n    />\n  </div>\n</template>\n\n<script>\nimport UserNameInput from './UserNameInput.vue';\nimport MessageList from './MessageList.vue';\nimport MessageInput from './MessageInput.vue';\nimport ThemeSelector from './ThemeSelector.vue';\nimport UserProfileEditor from './UserProfileEditor.vue';\nimport axios from 'axios';\nimport { handleAvatarError, getFallbackAvatarUrl } from '../../utils/avatarUtils';\nimport { useStore } from 'vuex';\nimport { computed } from 'vue';\n\nexport default {\n  name: 'ChatContainer',\n  components: {\n    UserNameInput,\n    MessageList,\n    MessageInput,\n    ThemeSelector,\n    UserProfileEditor\n  },\n  emits: ['update-online-users', 'open-profile-editor'],\n  setup() {\n    const store = useStore();\n    \n    // 使用计算属性从store获取用户信息\n    const username = computed(() => store.getters['userProfile/username']);\n    const userAvatar = computed(() => store.getters['userProfile/avatar']);\n    \n    return {\n      username,\n      userAvatar,\n      getFallbackAvatarUrl,\n      handleAvatarError\n    };\n  },\n  data() {\n    return {\n      messages: [], // 消息列表\n      onlineUsers: [], // 在线用户列表\n      apiUrl: 'http://localhost:3001/api/messages', // 消息API地址\n      usersApiUrl: 'http://localhost:3001/api/users', // 用户API地址\n      pollingInterval: null, // 用于轮询消息的计时器\n      onlinePollingInterval: null, // 用于轮询在线用户的计时器\n      currentTheme: localStorage.getItem('chat-theme') || 'discord', // 当前主题\n      showProfileEditor: false, // 是否显示个人资料编辑器\n      currentUserInfo: {} // 当前用户信息\n    }\n  },\n  watch: {\n    // 监听在线用户变化，向父组件发送更新事件\n    onlineUsers: {\n      handler(newValue) {\n        this.$emit('update-online-users', newValue);\n      },\n      deep: true\n    }\n  },\n  created() {\n    // 从localStorage恢复用户信息\n    const savedUsername = localStorage.getItem('chat-username');\n    const savedAvatar = localStorage.getItem('chat-avatar');\n    \n    if (savedUsername && savedAvatar) {\n      this.$store.dispatch('userProfile/updateProfile', {\n        username: savedUsername,\n        avatar: savedAvatar\n      });\n    }\n  },\n  mounted() {\n    // 如果用户已登录，获取消息和在线用户\n    if (this.username) {\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n      \n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    }\n    \n    // 应用保存的主题\n    document.body.classList.add(`theme-${this.currentTheme}`);\n  },\n  beforeUnmount() {\n    // 清除轮询\n    clearInterval(this.pollingInterval);\n    clearInterval(this.onlinePollingInterval);\n  },\n  methods: {\n    // 设置用户名和头像\n    setUsername(userData) {\n      this.$store.dispatch('userProfile/updateProfile', userData);\n      \n      // 保存到localStorage\n      localStorage.setItem('chat-username', userData.username);\n      localStorage.setItem('chat-avatar', userData.avatar);\n      \n      // 注册用户\n      this.registerUser();\n      \n      // 获取消息和在线用户\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n      \n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    },\n    \n    // 注册用户\n    async registerUser() {\n      try {\n        await axios.post(`${this.usersApiUrl}/register`, {\n          username: this.username,\n          avatar: this.userAvatar\n        });\n        console.log('用户注册成功');\n      } catch (error) {\n        console.error('用户注册失败:', error);\n      }\n    },\n    \n    // 获取消息\n    async fetchMessages() {\n      try {\n        const response = await axios.get(this.apiUrl);\n        this.messages = response.data;\n        // 滚动到底部\n        this.$nextTick(() => {\n          if (this.$refs.messageList) {\n            this.$refs.messageList.scrollToBottom();\n          }\n        });\n      } catch (error) {\n        console.error('获取消息失败:', error);\n        // 开发阶段如果API未就绪，使用模拟数据\n        if (this.messages.length === 0) {\n          this.messages = [\n            { \n              id: 1, \n              sender: 'System', \n              content: '欢迎来到聊天室!', \n              timestamp: new Date().toISOString(),\n              avatar: '/avatars/default.png'\n            }\n          ];\n        }\n      }\n    },\n    \n    // 获取在线用户\n    async fetchOnlineUsers() {\n      try {\n        const response = await axios.get(`${this.usersApiUrl}/online`);\n        this.onlineUsers = response.data;\n      } catch (error) {\n        console.error('获取在线用户失败:', error);\n        // 开发阶段如果API未就绪，使用模拟数据\n        if (this.onlineUsers.length === 0) {\n          this.onlineUsers = [\n            { username: this.username, avatar: this.userAvatar }\n          ];\n        }\n      }\n    },\n    \n    // 发送消息\n    async sendMessage(content) {\n      if (!content.trim()) return;\n      \n      try {\n        const response = await axios.post(this.apiUrl, {\n          sender: this.username,\n          content: content,\n          avatar: this.userAvatar\n        });\n        \n        // 将新消息添加到消息列表\n        this.messages.push(response.data);\n        \n        // 滚动到底部\n        this.$nextTick(() => {\n          if (this.$refs.messageList) {\n            this.$refs.messageList.scrollToBottom();\n          }\n        });\n      } catch (error) {\n        console.error('发送消息失败:', error);\n        \n        // 开发阶段如果API未就绪，使用模拟数据\n        const mockMessage = {\n          id: Date.now(),\n          sender: this.username,\n          content: content,\n          timestamp: new Date().toISOString(),\n          avatar: this.userAvatar\n        };\n        \n        this.messages.push(mockMessage);\n        \n        // 滚动到底部\n        this.$nextTick(() => {\n          if (this.$refs.messageList) {\n            this.$refs.messageList.scrollToBottom();\n          }\n        });\n      }\n    },\n    // 打开个人资料编辑器\n    openProfileEditor() {\n      this.$emit('open-profile-editor');\n    },\n    // 关闭个人资料编辑器\n    closeProfileEditor() {\n      this.showProfileEditor = false;\n    },\n    // 更新用户信息\n    updateProfile(updatedInfo) {\n      // 更新store中的用户信息\n      this.$store.dispatch('userProfile/updateProfile', updatedInfo);\n      \n      // 保存到localStorage\n      localStorage.setItem('chat-username', updatedInfo.username);\n      localStorage.setItem('chat-avatar', updatedInfo.avatar);\n      \n      // 更新消息历史中的头像\n      this.messages = this.messages.map(message => {\n        if (message.sender === updatedInfo.username) {\n          return { ...message, avatar: updatedInfo.avatar }; // 更新发送者头像\n        }\n        return message;\n      });\n      \n      // 注册用户\n      this.registerUser();\n      \n      // 获取消息和在线用户\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n      \n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat-container {\n  flex: 1;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background-color: var(--chat-background); /* 使用主题变量 */\n  color: var(--text-color); /* 使用主题变量 */\n  position: relative;\n  z-index: 1;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);\n  background-image: var(--background-image); /* 使用主题变量中的背景图案 */\n  background-repeat: repeat;\n  background-size: 100px 100px; /* 设置背景图案大小 */\n}\n\n.chat-interface {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  backdrop-filter: blur(5px); /* 添加模糊效果 */\n}\n\n.chat-header {\n  padding: 1rem 1.5rem;\n  background-color: var(--primary-color); /* 使用主题变量 */\n  color: var(--header-color); /* 使用主题变量 */\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  box-shadow: var(--header-shadow);\n  position: relative;\n  z-index: 2;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1); /* 添加边框 */\n  background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.05), transparent); /* 添加渐变效果 */\n}\n\n.chat-title {\n  margin: 0;\n  font-size: 1.25rem;\n  font-weight: 600;\n  letter-spacing: 0.5px;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2); /* 添加文字阴影 */\n}\n\n.user-info-container {\n  display: flex;\n  align-items: center;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  margin-left: 1rem;\n  background-color: rgba(255, 255, 255, 0.1);\n  padding: 0.5rem 0.75rem;\n  border-radius: 2rem;\n  backdrop-filter: blur(5px);\n  border: 1px solid rgba(255, 255, 255, 0.05); /* 添加细微边框 */\n  transition: all 0.2s ease; /* 添加过渡效果 */\n}\n\n.user-info:hover {\n  background-color: rgba(255, 255, 255, 0.15); /* 悬停时背景变亮 */\n  transform: translateY(-1px); /* 悬停时轻微上移 */\n}\n\n.user-avatar {\n  width: 32px; /* 增加头像尺寸 */\n  height: 32px; /* 增加头像尺寸 */\n  border-radius: 50%;\n  object-fit: cover;\n  border: var(--avatar-border, 1px solid rgba(255, 255, 255, 0.3));\n  box-shadow: var(--avatar-shadow, 0 2px 4px rgba(0, 0, 0, 0.2));\n  transition: transform 0.2s ease; /* 添加过渡效果 */\n}\n\n.user-avatar:hover {\n  transform: scale(1.1); /* 悬停时放大 */\n}\n\n.current-username {\n  margin-left: 0.5rem;\n  font-weight: 500;\n  color: var(--text-color);\n  mix-blend-mode: overlay;\n}\n\n.chat-main {\n  display: flex;\n  flex: 1;\n  overflow: hidden;\n  position: relative;\n  background-image: var(--background-image); /* 使用主题变量中的背景图案 */\n  background-repeat: repeat;\n  background-size: 100px 100px; /* 设置背景图案大小 */\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .chat-container {\n    height: auto;\n    flex: 1;\n  }\n}\n</style> \n\n\n"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;EAQbA,KAAK,EAAC;AAAgB;;EACxBA,KAAK,EAAC;AAAa;;EAEpBA,KAAK,EAAC;AAAqB;;EAEzBA,KAAK,EAAC;AAAW;mBAdhC;;EAsBkBA,KAAK,EAAC;AAAkB;;EAK/BA,KAAK,EAAC;AAAW;;;;;;;uBA1B1BC,mBAAA,CA6CM,OA7CNC,UA6CM,GA5CJC,mBAAA,yBAA4B,E,CAEnBC,MAAA,CAAAC,QAAQ,I,cADjBC,YAAA,CAGEC,wBAAA;IANNC,GAAA;IAKOC,aAAY,EAAEC,QAAA,CAAAC;+DAIjBV,mBAAA,CA4BMW,SAAA;IArCVJ,GAAA;EAAA,IAQIL,mBAAA,sBAAyB,EACzBU,mBAAA,CA4BM,OA5BNC,UA4BM,GA3BJD,mBAAA,CAeS,UAfTE,UAeS,G,0BAdPF,mBAAA,CAAkC;IAA9Bb,KAAK,EAAC;EAAY,GAAC,QAAM,sBAC7Ba,mBAAA,CAYM,OAZNG,UAYM,GAXJC,YAAA,CAAiBC,wBAAA,GACjBL,mBAAA,CASM,OATNM,UASM,GARJN,mBAAA,CAMC;IALEO,GAAG,EAAEhB,MAAA,CAAAiB,UAAU,IAAIjB,MAAA,CAAAkB,oBAAoB;IACxCC,GAAG,EAAC,MAAM;IACVvB,KAAK,EAAC,aAAa;IAClBwB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEtB,MAAA,CAAAuB,iBAAA,IAAAvB,MAAA,CAAAuB,iBAAA,IAAAD,IAAA,CAAiB;IACxBE,OAAK,EAAAH,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEhB,QAAA,CAAAmB,iBAAA,IAAAnB,QAAA,CAAAmB,iBAAA,IAAAH,IAAA,CAAiB;2CApBvCI,UAAA,GAsBYjB,mBAAA,CAAoD,QAApDkB,UAAoD,EAAAC,gBAAA,CAAlB5B,MAAA,CAAAC,QAAQ,iB,OAKhDQ,mBAAA,CAOM,OAPNoB,UAOM,GANJhB,YAAA,CAKEiB,sBAAA;IAJCC,QAAQ,EAAEC,KAAA,CAAAD,QAAQ;IAClBE,eAAe,EAAEjC,MAAA,CAAAC,QAAQ;IAC1BiC,GAAG,EAAC,aAAa;IAChBC,mBAAmB,EAAE7B,QAAA,CAAAmB;qFAI1BZ,YAAA,CAA4CuB,uBAAA;IAA7BC,aAAY,EAAE/B,QAAA,CAAAgC;EAAW,2C,qDAG1CvC,mBAAA,aAAgB,EAChBc,YAAA,CAKE0B,4BAAA;IAJCC,MAAM,EAAER,KAAA,CAAAS,iBAAiB;IACzBC,eAAe,EAAEV,KAAA,CAAAU,eAAe;IAChCC,OAAK,EAAErC,QAAA,CAAAsC,kBAAkB;IACzBC,eAAc,EAAEvC,QAAA,CAAAwC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}