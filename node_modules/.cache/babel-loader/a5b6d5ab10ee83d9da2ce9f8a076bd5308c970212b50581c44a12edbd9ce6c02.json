{"ast":null,"code":"/**\r\n * 头像工具函数\r\n * 这个文件包含与用户头像相关的工具函数\r\n */\n\n// 默认头像颜色数组 - Discord风格的颜色\nconst avatarColors = ['7289da',\n// Discord蓝\n'43b581',\n// Discord绿\n'faa61a',\n// Discord黄\n'f04747',\n// Discord红\n'593695',\n// Discord紫\n'747f8d' // Discord灰\n];\n\n/**\r\n * 获取基于用户名的随机头像URL\r\n * @param {string} username - 用户名\r\n * @param {number} size - 头像尺寸（像素）\r\n * @returns {string} - 头像URL\r\n */\nexport function getRandomAvatarUrl(username, size = 200) {\n  // 基于用户名生成一个一致的随机数，这样同一用户名总是得到相同的头像\n  const randomIndex = Math.abs(hashCode(username)) % avatarColors.length;\n  const color = avatarColors[randomIndex];\n\n  // 使用UI Avatars服务生成基于文字的头像\n  // 这个服务会根据用户名生成一个包含用户名首字母的头像\n  return `https://ui-avatars.com/api/?name=${encodeURIComponent(username)}&background=${color}&color=fff&size=${size}`;\n}\n\n/**\r\n * 获取随机的默认头像URL\r\n * @returns {string} - 随机默认头像URL\r\n */\nexport function getRandomDefaultAvatarUrl() {\n  // 随机选择一个颜色\n  const randomIndex = Math.floor(Math.random() * avatarColors.length);\n  const color = avatarColors[randomIndex];\n\n  // 生成一个随机的两个字母组合\n  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const letter1 = letters.charAt(Math.floor(Math.random() * letters.length));\n  const letter2 = letters.charAt(Math.floor(Math.random() * letters.length));\n\n  // 使用UI Avatars服务生成头像\n  return `https://ui-avatars.com/api/?name=${letter1}${letter2}&background=${color}&color=fff&size=200`;\n}\n\n/**\r\n * 简单的字符串哈希函数\r\n * @param {string} str - 要哈希的字符串\r\n * @returns {number} - 哈希值\r\n */\nfunction hashCode(str) {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = (hash << 5) - hash + str.charCodeAt(i);\n    hash |= 0; // 转换为32位整数\n  }\n  return hash;\n}\n\n/**\r\n * 检查URL是否是有效的图片URL\r\n * @param {string} url - 要检查的URL\r\n * @returns {boolean} - 是否是有效的图片URL\r\n */\nexport function isValidImageUrl(url) {\n  if (!url) return false;\n  return /\\.(jpeg|jpg|gif|png|svg)$/i.test(url) || url.startsWith('https://ui-avatars.com/');\n}","map":{"version":3,"names":["avatarColors","getRandomAvatarUrl","username","size","randomIndex","Math","abs","hashCode","length","color","encodeURIComponent","getRandomDefaultAvatarUrl","floor","random","letters","letter1","charAt","letter2","str","hash","i","charCodeAt","isValidImageUrl","url","test","startsWith"],"sources":["C:/Users/Administrator/Desktop/discord-chat-app/just-do-it/src/utils/avatarUtils.js"],"sourcesContent":["/**\r\n * 头像工具函数\r\n * 这个文件包含与用户头像相关的工具函数\r\n */\r\n\r\n// 默认头像颜色数组 - Discord风格的颜色\r\nconst avatarColors = [\r\n  '7289da', // Discord蓝\r\n  '43b581', // Discord绿\r\n  'faa61a', // Discord黄\r\n  'f04747', // Discord红\r\n  '593695', // Discord紫\r\n  '747f8d'  // Discord灰\r\n];\r\n\r\n/**\r\n * 获取基于用户名的随机头像URL\r\n * @param {string} username - 用户名\r\n * @param {number} size - 头像尺寸（像素）\r\n * @returns {string} - 头像URL\r\n */\r\nexport function getRandomAvatarUrl(username, size = 200) {\r\n  // 基于用户名生成一个一致的随机数，这样同一用户名总是得到相同的头像\r\n  const randomIndex = Math.abs(hashCode(username)) % avatarColors.length;\r\n  const color = avatarColors[randomIndex];\r\n  \r\n  // 使用UI Avatars服务生成基于文字的头像\r\n  // 这个服务会根据用户名生成一个包含用户名首字母的头像\r\n  return `https://ui-avatars.com/api/?name=${encodeURIComponent(username)}&background=${color}&color=fff&size=${size}`;\r\n}\r\n\r\n/**\r\n * 获取随机的默认头像URL\r\n * @returns {string} - 随机默认头像URL\r\n */\r\nexport function getRandomDefaultAvatarUrl() {\r\n  // 随机选择一个颜色\r\n  const randomIndex = Math.floor(Math.random() * avatarColors.length);\r\n  const color = avatarColors[randomIndex];\r\n  \r\n  // 生成一个随机的两个字母组合\r\n  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n  const letter1 = letters.charAt(Math.floor(Math.random() * letters.length));\r\n  const letter2 = letters.charAt(Math.floor(Math.random() * letters.length));\r\n  \r\n  // 使用UI Avatars服务生成头像\r\n  return `https://ui-avatars.com/api/?name=${letter1}${letter2}&background=${color}&color=fff&size=200`;\r\n}\r\n\r\n/**\r\n * 简单的字符串哈希函数\r\n * @param {string} str - 要哈希的字符串\r\n * @returns {number} - 哈希值\r\n */\r\nfunction hashCode(str) {\r\n  let hash = 0;\r\n  for (let i = 0; i < str.length; i++) {\r\n    hash = ((hash << 5) - hash) + str.charCodeAt(i);\r\n    hash |= 0; // 转换为32位整数\r\n  }\r\n  return hash;\r\n}\r\n\r\n/**\r\n * 检查URL是否是有效的图片URL\r\n * @param {string} url - 要检查的URL\r\n * @returns {boolean} - 是否是有效的图片URL\r\n */\r\nexport function isValidImageUrl(url) {\r\n  if (!url) return false;\r\n  return /\\.(jpeg|jpg|gif|png|svg)$/i.test(url) || url.startsWith('https://ui-avatars.com/');\r\n} "],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,YAAY,GAAG,CACnB,QAAQ;AAAE;AACV,QAAQ;AAAE;AACV,QAAQ;AAAE;AACV,QAAQ;AAAE;AACV,QAAQ;AAAE;AACV,QAAQ,CAAE;AAAA,CACX;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACC,QAAQ,EAAEC,IAAI,GAAG,GAAG,EAAE;EACvD;EACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAACC,QAAQ,CAACL,QAAQ,CAAC,CAAC,GAAGF,YAAY,CAACQ,MAAM;EACtE,MAAMC,KAAK,GAAGT,YAAY,CAACI,WAAW,CAAC;;EAEvC;EACA;EACA,OAAO,oCAAoCM,kBAAkB,CAACR,QAAQ,CAAC,eAAeO,KAAK,mBAAmBN,IAAI,EAAE;AACtH;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASQ,yBAAyBA,CAAA,EAAG;EAC1C;EACA,MAAMP,WAAW,GAAGC,IAAI,CAACO,KAAK,CAACP,IAAI,CAACQ,MAAM,CAAC,CAAC,GAAGb,YAAY,CAACQ,MAAM,CAAC;EACnE,MAAMC,KAAK,GAAGT,YAAY,CAACI,WAAW,CAAC;;EAEvC;EACA,MAAMU,OAAO,GAAG,4BAA4B;EAC5C,MAAMC,OAAO,GAAGD,OAAO,CAACE,MAAM,CAACX,IAAI,CAACO,KAAK,CAACP,IAAI,CAACQ,MAAM,CAAC,CAAC,GAAGC,OAAO,CAACN,MAAM,CAAC,CAAC;EAC1E,MAAMS,OAAO,GAAGH,OAAO,CAACE,MAAM,CAACX,IAAI,CAACO,KAAK,CAACP,IAAI,CAACQ,MAAM,CAAC,CAAC,GAAGC,OAAO,CAACN,MAAM,CAAC,CAAC;;EAE1E;EACA,OAAO,oCAAoCO,OAAO,GAAGE,OAAO,eAAeR,KAAK,qBAAqB;AACvG;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASF,QAAQA,CAACW,GAAG,EAAE;EACrB,IAAIC,IAAI,GAAG,CAAC;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAACV,MAAM,EAAEY,CAAC,EAAE,EAAE;IACnCD,IAAI,GAAI,CAACA,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAID,GAAG,CAACG,UAAU,CAACD,CAAC,CAAC;IAC/CD,IAAI,IAAI,CAAC,CAAC,CAAC;EACb;EACA,OAAOA,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,eAAeA,CAACC,GAAG,EAAE;EACnC,IAAI,CAACA,GAAG,EAAE,OAAO,KAAK;EACtB,OAAO,4BAA4B,CAACC,IAAI,CAACD,GAAG,CAAC,IAAIA,GAAG,CAACE,UAAU,CAAC,yBAAyB,CAAC;AAC5F","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}