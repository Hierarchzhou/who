{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport UserNameInput from './UserNameInput.vue';\nimport MessageList from './MessageList.vue';\nimport MessageInput from './MessageInput.vue';\nimport ThemeSelector from './ThemeSelector.vue';\nimport UserProfileEditor from './UserProfileEditor.vue';\nimport axios from 'axios';\nimport { handleAvatarError, getFallbackAvatarUrl } from '../../utils/avatarUtils';\nimport { useStore } from 'vuex';\nimport { computed } from 'vue';\nexport default {\n  name: 'ChatContainer',\n  components: {\n    UserNameInput,\n    MessageList,\n    MessageInput,\n    ThemeSelector,\n    UserProfileEditor\n  },\n  props: {\n    currentUser: {\n      type: Object,\n      required: true\n    },\n    currentServer: {\n      type: Object,\n      default: () => ({\n        id: 'home',\n        name: 'general',\n        description: 'Welcome to the chat channel!'\n      })\n    }\n  },\n  emits: ['update-online-users', 'open-profile-editor'],\n  setup() {\n    const store = useStore();\n\n    // 使用计算属性从store获取用户信息\n    const username = computed(() => store.getters['userProfile/username']);\n    const userAvatar = computed(() => store.getters['userProfile/avatar']);\n    return {\n      username,\n      userAvatar,\n      getFallbackAvatarUrl,\n      handleAvatarError\n    };\n  },\n  data() {\n    return {\n      messages: [],\n      // 消息列表\n      onlineUsers: [],\n      // 在线用户列表\n      apiUrl: 'http://localhost:3001/api/messages',\n      // 消息API地址\n      usersApiUrl: 'http://localhost:3001/api/users',\n      // 用户API地址\n      pollingInterval: null,\n      // 用于轮询消息的计时器\n      onlinePollingInterval: null,\n      // 用于轮询在线用户的计时器\n      currentTheme: localStorage.getItem('chat-theme') || 'discord',\n      // 当前主题\n      showProfileEditor: false,\n      // 是否显示个人资料编辑器\n      currentUserInfo: {} // 当前用户信息\n    };\n  },\n  watch: {\n    // 监听在线用户变化，向父组件发送更新事件\n    onlineUsers: {\n      handler(newValue) {\n        this.$emit('update-online-users', newValue);\n      },\n      deep: true\n    }\n  },\n  created() {\n    // 从localStorage恢复用户信息\n    const savedUsername = localStorage.getItem('chat-username');\n    const savedAvatar = localStorage.getItem('chat-avatar');\n    if (savedUsername && savedAvatar) {\n      this.$store.dispatch('userProfile/updateProfile', {\n        username: savedUsername,\n        avatar: savedAvatar\n      });\n    }\n  },\n  mounted() {\n    // 如果用户已登录，获取消息和在线用户\n    if (this.username) {\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n\n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    }\n\n    // 应用保存的主题\n    document.body.classList.add(`theme-${this.currentTheme}`);\n  },\n  beforeUnmount() {\n    // 清除轮询\n    clearInterval(this.pollingInterval);\n    clearInterval(this.onlinePollingInterval);\n  },\n  methods: {\n    // 设置用户名和头像\n    setUsername(userData) {\n      this.$store.dispatch('userProfile/updateProfile', userData);\n\n      // 保存到localStorage\n      localStorage.setItem('chat-username', userData.username);\n      localStorage.setItem('chat-avatar', userData.avatar);\n\n      // 注册用户\n      this.registerUser();\n\n      // 获取消息和在线用户\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n\n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    },\n    // 注册用户\n    async registerUser() {\n      try {\n        await axios.post(`${this.usersApiUrl}/register`, {\n          username: this.username,\n          avatar: this.userAvatar\n        });\n        console.log('用户注册成功');\n      } catch (error) {\n        console.error('用户注册失败:', error);\n      }\n    },\n    // 获取消息\n    async fetchMessages() {\n      try {\n        const response = await axios.get(this.apiUrl);\n        this.messages = response.data;\n        // 滚动到底部\n        this.$nextTick(() => {\n          if (this.$refs.messageList) {\n            this.$refs.messageList.scrollToBottom();\n          }\n        });\n      } catch (error) {\n        console.error('获取消息失败:', error);\n        // 开发阶段如果API未就绪，使用模拟数据\n        if (this.messages.length === 0) {\n          this.messages = [{\n            id: 1,\n            sender: 'System',\n            content: '欢迎来到聊天室!',\n            timestamp: new Date().toISOString(),\n            avatar: '/avatars/default.png'\n          }];\n        }\n      }\n    },\n    // 获取在线用户\n    async fetchOnlineUsers() {\n      try {\n        const response = await axios.get(`${this.usersApiUrl}/online`);\n        this.onlineUsers = response.data;\n      } catch (error) {\n        console.error('获取在线用户失败:', error);\n        // 开发阶段如果API未就绪，使用模拟数据\n        if (this.onlineUsers.length === 0) {\n          this.onlineUsers = [{\n            username: this.username,\n            avatar: this.userAvatar\n          }];\n        }\n      }\n    },\n    // 发送消息\n    async sendMessage(content) {\n      if (!content.trim()) return;\n      try {\n        const response = await axios.post(this.apiUrl, {\n          sender: this.username,\n          content: content,\n          avatar: this.userAvatar\n        });\n\n        // 将新消息添加到消息列表\n        this.messages.push(response.data);\n\n        // 滚动到底部\n        this.$nextTick(() => {\n          if (this.$refs.messageList) {\n            this.$refs.messageList.scrollToBottom();\n          }\n        });\n      } catch (error) {\n        console.error('发送消息失败:', error);\n\n        // 开发阶段如果API未就绪，使用模拟数据\n        const mockMessage = {\n          id: Date.now(),\n          sender: this.username,\n          content: content,\n          timestamp: new Date().toISOString(),\n          avatar: this.userAvatar\n        };\n        this.messages.push(mockMessage);\n\n        // 滚动到底部\n        this.$nextTick(() => {\n          if (this.$refs.messageList) {\n            this.$refs.messageList.scrollToBottom();\n          }\n        });\n      }\n    },\n    // 打开个人资料编辑器\n    openProfileEditor() {\n      this.$emit('open-profile-editor');\n    },\n    // 关闭个人资料编辑器\n    closeProfileEditor() {\n      this.showProfileEditor = false;\n    },\n    // 更新用户信息\n    updateProfile(updatedInfo) {\n      // 更新store中的用户信息\n      this.$store.dispatch('userProfile/updateProfile', updatedInfo);\n\n      // 保存到localStorage\n      localStorage.setItem('chat-username', updatedInfo.username);\n      localStorage.setItem('chat-avatar', updatedInfo.avatar);\n\n      // 更新消息历史中的头像\n      this.messages = this.messages.map(message => {\n        if (message.sender === updatedInfo.username) {\n          return {\n            ...message,\n            avatar: updatedInfo.avatar\n          }; // 更新发送者头像\n        }\n        return message;\n      });\n\n      // 注册用户\n      this.registerUser();\n\n      // 获取消息和在线用户\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n\n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    }\n  }\n};","map":{"version":3,"names":["UserNameInput","MessageList","MessageInput","ThemeSelector","UserProfileEditor","axios","handleAvatarError","getFallbackAvatarUrl","useStore","computed","name","components","props","currentUser","type","Object","required","currentServer","default","id","description","emits","setup","store","username","getters","userAvatar","data","messages","onlineUsers","apiUrl","usersApiUrl","pollingInterval","onlinePollingInterval","currentTheme","localStorage","getItem","showProfileEditor","currentUserInfo","watch","handler","newValue","$emit","deep","created","savedUsername","savedAvatar","$store","dispatch","avatar","mounted","fetchMessages","fetchOnlineUsers","setInterval","document","body","classList","add","beforeUnmount","clearInterval","methods","setUsername","userData","setItem","registerUser","post","console","log","error","response","get","$nextTick","$refs","messageList","scrollToBottom","length","sender","content","timestamp","Date","toISOString","sendMessage","trim","push","mockMessage","now","openProfileEditor","closeProfileEditor","updateProfile","updatedInfo","map","message"],"sources":["C:\\Users\\Administrator\\Desktop\\who\\src\\components\\chat\\ChatContainer.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <!-- 用户名输入界面，当用户未设置昵称时显示 -->\n    <UserNameInput \n      v-if=\"!username\" \n      @set-username=\"setUsername\" \n    />\n    \n    <!-- 聊天界面，当用户已设置昵称时显示 -->\n    <div v-else class=\"chat-interface\">\n      <!-- 频道头部 -->\n      <header class=\"chat-header\">\n        <div class=\"channel-info\">\n          <span class=\"channel-hash\">#</span>\n          <h2 class=\"channel-name\">{{ currentServer.name || 'general' }}</h2>\n          <div class=\"channel-topic\">\n            {{ currentServer.description || 'Welcome to the chat channel!' }}\n          </div>\n        </div>\n        \n        <div class=\"header-actions\">\n          <div class=\"action-buttons\">\n            <button class=\"icon-button\" title=\"Pin Messages\">\n              <span class=\"icon\">📌</span>\n            </button>\n            <button class=\"icon-button\" title=\"Show Member List\">\n              <span class=\"icon\">👥</span>\n            </button>\n            <ThemeSelector />\n          </div>\n          \n          <div class=\"user-info\" @click=\"openProfileEditor\">\n            <div class=\"user-status-indicator\" :class=\"{ online: true }\"></div>\n            <img \n              :src=\"userAvatar || getFallbackAvatarUrl()\" \n              alt=\"用户头像\" \n              class=\"user-avatar\"\n              @error=\"handleAvatarError\"\n            >\n            <span class=\"current-username\">{{ username }}</span>\n          </div>\n        </div>\n      </header>\n      \n      <div class=\"chat-main\">\n        <MessageList \n          :messages=\"messages\" \n          :currentUsername=\"username\" \n          ref=\"messageList\"\n          @open-profile-editor=\"openProfileEditor\"\n        />\n      </div>\n      \n      <MessageInput \n        :placeholder=\"`发送消息到 #${currentServer.name || 'general'}`\"\n        @send-message=\"sendMessage\" \n      />\n    </div>\n    \n    <!-- 个人资料编辑器 -->\n    <UserProfileEditor \n      :isOpen=\"showProfileEditor\"\n      :currentUserInfo=\"currentUserInfo\"\n      @close=\"closeProfileEditor\"\n      @update-profile=\"updateProfile\"\n    />\n  </div>\n</template>\n\n<script>\nimport UserNameInput from './UserNameInput.vue';\nimport MessageList from './MessageList.vue';\nimport MessageInput from './MessageInput.vue';\nimport ThemeSelector from './ThemeSelector.vue';\nimport UserProfileEditor from './UserProfileEditor.vue';\nimport axios from 'axios';\nimport { handleAvatarError, getFallbackAvatarUrl } from '../../utils/avatarUtils';\nimport { useStore } from 'vuex';\nimport { computed } from 'vue';\n\nexport default {\n  name: 'ChatContainer',\n  components: {\n    UserNameInput,\n    MessageList,\n    MessageInput,\n    ThemeSelector,\n    UserProfileEditor\n  },\n  props: {\n    currentUser: {\n      type: Object,\n      required: true\n    },\n    currentServer: {\n      type: Object,\n      default: () => ({\n        id: 'home',\n        name: 'general',\n        description: 'Welcome to the chat channel!'\n      })\n    }\n  },\n  emits: ['update-online-users', 'open-profile-editor'],\n  setup() {\n    const store = useStore();\n    \n    // 使用计算属性从store获取用户信息\n    const username = computed(() => store.getters['userProfile/username']);\n    const userAvatar = computed(() => store.getters['userProfile/avatar']);\n    \n    return {\n      username,\n      userAvatar,\n      getFallbackAvatarUrl,\n      handleAvatarError\n    };\n  },\n  data() {\n    return {\n      messages: [], // 消息列表\n      onlineUsers: [], // 在线用户列表\n      apiUrl: 'http://localhost:3001/api/messages', // 消息API地址\n      usersApiUrl: 'http://localhost:3001/api/users', // 用户API地址\n      pollingInterval: null, // 用于轮询消息的计时器\n      onlinePollingInterval: null, // 用于轮询在线用户的计时器\n      currentTheme: localStorage.getItem('chat-theme') || 'discord', // 当前主题\n      showProfileEditor: false, // 是否显示个人资料编辑器\n      currentUserInfo: {} // 当前用户信息\n    }\n  },\n  watch: {\n    // 监听在线用户变化，向父组件发送更新事件\n    onlineUsers: {\n      handler(newValue) {\n        this.$emit('update-online-users', newValue);\n      },\n      deep: true\n    }\n  },\n  created() {\n    // 从localStorage恢复用户信息\n    const savedUsername = localStorage.getItem('chat-username');\n    const savedAvatar = localStorage.getItem('chat-avatar');\n    \n    if (savedUsername && savedAvatar) {\n      this.$store.dispatch('userProfile/updateProfile', {\n        username: savedUsername,\n        avatar: savedAvatar\n      });\n    }\n  },\n  mounted() {\n    // 如果用户已登录，获取消息和在线用户\n    if (this.username) {\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n      \n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    }\n    \n    // 应用保存的主题\n    document.body.classList.add(`theme-${this.currentTheme}`);\n  },\n  beforeUnmount() {\n    // 清除轮询\n    clearInterval(this.pollingInterval);\n    clearInterval(this.onlinePollingInterval);\n  },\n  methods: {\n    // 设置用户名和头像\n    setUsername(userData) {\n      this.$store.dispatch('userProfile/updateProfile', userData);\n      \n      // 保存到localStorage\n      localStorage.setItem('chat-username', userData.username);\n      localStorage.setItem('chat-avatar', userData.avatar);\n      \n      // 注册用户\n      this.registerUser();\n      \n      // 获取消息和在线用户\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n      \n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    },\n    \n    // 注册用户\n    async registerUser() {\n      try {\n        await axios.post(`${this.usersApiUrl}/register`, {\n          username: this.username,\n          avatar: this.userAvatar\n        });\n        console.log('用户注册成功');\n      } catch (error) {\n        console.error('用户注册失败:', error);\n      }\n    },\n    \n    // 获取消息\n    async fetchMessages() {\n      try {\n        const response = await axios.get(this.apiUrl);\n        this.messages = response.data;\n        // 滚动到底部\n        this.$nextTick(() => {\n          if (this.$refs.messageList) {\n            this.$refs.messageList.scrollToBottom();\n          }\n        });\n      } catch (error) {\n        console.error('获取消息失败:', error);\n        // 开发阶段如果API未就绪，使用模拟数据\n        if (this.messages.length === 0) {\n          this.messages = [\n            { \n              id: 1, \n              sender: 'System', \n              content: '欢迎来到聊天室!', \n              timestamp: new Date().toISOString(),\n              avatar: '/avatars/default.png'\n            }\n          ];\n        }\n      }\n    },\n    \n    // 获取在线用户\n    async fetchOnlineUsers() {\n      try {\n        const response = await axios.get(`${this.usersApiUrl}/online`);\n        this.onlineUsers = response.data;\n      } catch (error) {\n        console.error('获取在线用户失败:', error);\n        // 开发阶段如果API未就绪，使用模拟数据\n        if (this.onlineUsers.length === 0) {\n          this.onlineUsers = [\n            { username: this.username, avatar: this.userAvatar }\n          ];\n        }\n      }\n    },\n    \n    // 发送消息\n    async sendMessage(content) {\n      if (!content.trim()) return;\n      \n      try {\n        const response = await axios.post(this.apiUrl, {\n          sender: this.username,\n          content: content,\n          avatar: this.userAvatar\n        });\n        \n        // 将新消息添加到消息列表\n        this.messages.push(response.data);\n        \n        // 滚动到底部\n        this.$nextTick(() => {\n          if (this.$refs.messageList) {\n            this.$refs.messageList.scrollToBottom();\n          }\n        });\n      } catch (error) {\n        console.error('发送消息失败:', error);\n        \n        // 开发阶段如果API未就绪，使用模拟数据\n        const mockMessage = {\n          id: Date.now(),\n          sender: this.username,\n          content: content,\n          timestamp: new Date().toISOString(),\n          avatar: this.userAvatar\n        };\n        \n        this.messages.push(mockMessage);\n        \n        // 滚动到底部\n        this.$nextTick(() => {\n          if (this.$refs.messageList) {\n            this.$refs.messageList.scrollToBottom();\n          }\n        });\n      }\n    },\n    // 打开个人资料编辑器\n    openProfileEditor() {\n      this.$emit('open-profile-editor');\n    },\n    // 关闭个人资料编辑器\n    closeProfileEditor() {\n      this.showProfileEditor = false;\n    },\n    // 更新用户信息\n    updateProfile(updatedInfo) {\n      // 更新store中的用户信息\n      this.$store.dispatch('userProfile/updateProfile', updatedInfo);\n      \n      // 保存到localStorage\n      localStorage.setItem('chat-username', updatedInfo.username);\n      localStorage.setItem('chat-avatar', updatedInfo.avatar);\n      \n      // 更新消息历史中的头像\n      this.messages = this.messages.map(message => {\n        if (message.sender === updatedInfo.username) {\n          return { ...message, avatar: updatedInfo.avatar }; // 更新发送者头像\n        }\n        return message;\n      });\n      \n      // 注册用户\n      this.registerUser();\n      \n      // 获取消息和在线用户\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n      \n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat-container {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background-color: var(--background-primary);\n}\n\n.chat-interface {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n.chat-header {\n  height: 48px;\n  padding: 0 16px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  background-color: var(--background-primary);\n  border-bottom: 1px solid var(--background-tertiary);\n  flex-shrink: 0;\n}\n\n.channel-info {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.channel-hash {\n  color: var(--text-muted);\n  font-size: 24px;\n  font-weight: 300;\n}\n\n.channel-name {\n  color: var(--header-primary);\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.channel-topic {\n  color: var(--text-muted);\n  font-size: 14px;\n  margin-left: 12px;\n  padding-left: 12px;\n  border-left: 1px solid var(--background-accent);\n}\n\n.header-actions {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n}\n\n.action-buttons {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.icon-button {\n  width: 32px;\n  height: 32px;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: var(--interactive-normal);\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.icon-button:hover {\n  color: var(--interactive-hover);\n  background-color: var(--background-accent);\n}\n\n.icon {\n  font-size: 20px;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 4px 8px;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n}\n\n.user-info:hover {\n  background-color: var(--background-accent);\n}\n\n.user-status-indicator {\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  border: 2px solid var(--background-primary);\n  position: absolute;\n  bottom: -2px;\n  right: -2px;\n}\n\n.user-status-indicator.online {\n  background-color: var(--online-color);\n}\n\n.user-avatar {\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  position: relative;\n}\n\n.current-username {\n  color: var(--header-primary);\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.chat-main {\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n}\n\n/* 响应式样式 */\n@media (max-width: 768px) {\n  .channel-topic {\n    display: none;\n  }\n  \n  .action-buttons {\n    display: none;\n  }\n  \n  .chat-header {\n    padding: 0 8px;\n  }\n  \n  .user-info {\n    padding: 4px;\n  }\n  \n  .current-username {\n    display: none;\n  }\n}\n</style> \n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}