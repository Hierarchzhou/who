{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createElementVNode as _createElementVNode, createVNode as _createVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat-interface\"\n};\nconst _hoisted_3 = {\n  class: \"chat-header\"\n};\nconst _hoisted_4 = {\n  class: \"user-info-container\"\n};\nconst _hoisted_5 = {\n  class: \"user-info\"\n};\nconst _hoisted_6 = [\"src\"];\nconst _hoisted_7 = {\n  class: \"current-username\"\n};\nconst _hoisted_8 = {\n  class: \"chat-main\"\n};\nconst _hoisted_9 = {\n  class: \"messages-container\"\n};\nconst _hoisted_10 = {\n  class: \"messages-list\",\n  ref: \"messagesList\"\n};\nconst _hoisted_11 = {\n  class: \"message-avatar\"\n};\nconst _hoisted_12 = [\"src\", \"alt\"];\nconst _hoisted_13 = {\n  class: \"message-content\"\n};\nconst _hoisted_14 = {\n  class: \"message-header\"\n};\nconst _hoisted_15 = {\n  class: \"message-sender\"\n};\nconst _hoisted_16 = {\n  class: \"message-time\"\n};\nconst _hoisted_17 = {\n  class: \"message-text\"\n};\nconst _hoisted_18 = {\n  class: \"input-container\"\n};\nconst _hoisted_19 = {\n  class: \"input-wrapper\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UserNameInput = _resolveComponent(\"UserNameInput\");\n  const _component_ThemeSelector = _resolveComponent(\"ThemeSelector\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 用户名输入界面，当用户未设置昵称时显示 \"), !$setup.username ? (_openBlock(), _createBlock(_component_UserNameInput, {\n    key: 0,\n    onSetUsername: $setup.setUsername\n  }, null, 8 /* PROPS */, [\"onSetUsername\"])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 聊天界面，当用户已设置昵称时显示 \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"header\", _hoisted_3, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", {\n    class: \"chat-title\"\n  }, \"Vue聊天室\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_ThemeSelector), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"img\", {\n    src: $setup.userAvatar || $setup.getFallbackAvatarUrl(),\n    alt: \"用户头像\",\n    class: \"user-avatar\",\n    onError: _cache[0] || (_cache[0] = (...args) => $setup.handleAvatarError && $setup.handleAvatarError(...args))\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_6), _createElementVNode(\"span\", _hoisted_7, _toDisplayString($setup.username), 1 /* TEXT */)])])]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"div\", _hoisted_10, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.messages, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id,\n      class: \"message-item\"\n    }, [_createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"img\", {\n      src: message.avatar || $setup.getFallbackAvatarUrl(),\n      alt: message.sender,\n      onError: _cache[1] || (_cache[1] = (...args) => $setup.handleAvatarError && $setup.handleAvatarError(...args))\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_12)]), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"span\", _hoisted_15, _toDisplayString(message.sender), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_16, _toDisplayString($setup.formatTime(message.timestamp)), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_17, _toDisplayString(message.content), 1 /* TEXT */)])]);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */)]), _createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"div\", _hoisted_19, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.newMessage = $event),\n    onKeyup: _cache[3] || (_cache[3] = _withKeys((...args) => $setup.sendMessage && $setup.sendMessage(...args), [\"enter\"])),\n    placeholder: \"发送消息...\",\n    class: \"message-input\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.newMessage]]), _createElementVNode(\"button\", {\n    class: \"send-button\",\n    onClick: _cache[4] || (_cache[4] = (...args) => $setup.sendMessage && $setup.sendMessage(...args))\n  }, \" 发送 \")])])])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createCommentVNode","$setup","username","_createBlock","_component_UserNameInput","key","onSetUsername","setUsername","_Fragment","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_createVNode","_component_ThemeSelector","_hoisted_5","src","userAvatar","getFallbackAvatarUrl","alt","onError","_cache","args","handleAvatarError","_hoisted_6","_hoisted_7","_toDisplayString","_hoisted_8","_hoisted_9","_hoisted_10","_renderList","messages","message","id","_hoisted_11","avatar","sender","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","formatTime","timestamp","_hoisted_17","content","_hoisted_18","_hoisted_19","type","$event","newMessage","onKeyup","_withKeys","sendMessage","placeholder","onClick"],"sources":["C:\\Users\\Administrator\\Desktop\\discord-chat-app\\fack\\just-do-it\\src\\components\\chat\\ChatContainer.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <!-- 用户名输入界面，当用户未设置昵称时显示 -->\n    <UserNameInput \n      v-if=\"!username\" \n      @set-username=\"setUsername\" \n    />\n    \n    <!-- 聊天界面，当用户已设置昵称时显示 -->\n    <div v-else class=\"chat-interface\">\n      <header class=\"chat-header\">\n        <h2 class=\"chat-title\">Vue聊天室</h2>\n        <div class=\"user-info-container\">\n          <ThemeSelector />\n          <div class=\"user-info\">\n            <img \n              :src=\"userAvatar || getFallbackAvatarUrl()\" \n              alt=\"用户头像\" \n              class=\"user-avatar\"\n              @error=\"handleAvatarError\"\n            >\n            <span class=\"current-username\">{{ username }}</span>\n          </div>\n        </div>\n      </header>\n      \n      <div class=\"chat-main\">\n        <div class=\"messages-container\">\n          <div class=\"messages-list\" ref=\"messagesList\">\n            <div v-for=\"message in messages\" :key=\"message.id\" class=\"message-item\">\n              <div class=\"message-avatar\">\n                <img \n                  :src=\"message.avatar || getFallbackAvatarUrl()\" \n                  :alt=\"message.sender\"\n                  @error=\"handleAvatarError\"\n                >\n              </div>\n              <div class=\"message-content\">\n                <div class=\"message-header\">\n                  <span class=\"message-sender\">{{ message.sender }}</span>\n                  <span class=\"message-time\">{{ formatTime(message.timestamp) }}</span>\n                </div>\n                <div class=\"message-text\">{{ message.content }}</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"input-container\">\n          <div class=\"input-wrapper\">\n            <input \n              type=\"text\" \n              v-model=\"newMessage\" \n              @keyup.enter=\"sendMessage\"\n              placeholder=\"发送消息...\"\n              class=\"message-input\"\n            >\n            <button class=\"send-button\" @click=\"sendMessage\">\n              发送\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport UserNameInput from './UserNameInput.vue';\nimport ThemeSelector from './ThemeSelector.vue';\nimport axios from 'axios';\nimport { handleAvatarError, getFallbackAvatarUrl } from '../../utils/avatarUtils';\nimport { ref, onMounted, onUnmounted, nextTick } from 'vue';\n\nexport default {\n  name: 'ChatContainer',\n  components: {\n    UserNameInput,\n    ThemeSelector\n  },\n  props: {\n    currentUser: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props, { emit }) {\n    const messages = ref([]);\n    const newMessage = ref('');\n    const messagesList = ref(null);\n    const apiUrl = 'http://localhost:3001/api/messages';\n    const usersApiUrl = 'http://localhost:3001/api/users';\n    const username = ref(props.currentUser.username || '');\n    const userAvatar = ref(props.currentUser.avatar || '');\n    const onlineUsers = ref([]);\n    const pollingInterval = ref(null);\n    const onlinePollingInterval = ref(null);\n    const currentTheme = ref(localStorage.getItem('chat-theme') || 'discord');\n\n    // 从localStorage获取用户信息\n    const initUserInfo = () => {\n      const savedUsername = localStorage.getItem('chat-username');\n      const savedAvatar = localStorage.getItem('chat-avatar');\n      \n      if (savedUsername && !username.value) {\n        username.value = savedUsername;\n      }\n      \n      if (savedAvatar && !userAvatar.value) {\n        userAvatar.value = savedAvatar;\n      } else if (!userAvatar.value) {\n        // 设置默认头像\n        userAvatar.value = '/avatars/default.png';\n        localStorage.setItem('chat-avatar', userAvatar.value);\n      }\n      \n      // 如果用户已登录，注册用户\n      if (username.value) {\n        registerUser();\n      }\n    };\n\n    // 注册用户\n    const registerUser = async () => {\n      try {\n        await axios.post(`${usersApiUrl}/register`, {\n          username: username.value,\n          avatar: userAvatar.value\n        });\n        console.log('用户注册成功');\n      } catch (error) {\n        console.error('用户注册失败:', error);\n      }\n    };\n\n    // 获取消息\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get(apiUrl);\n        messages.value = response.data;\n        nextTick(() => {\n          scrollToBottom();\n        });\n      } catch (error) {\n        console.error('获取消息失败:', error);\n      }\n    };\n\n    // 获取在线用户\n    const fetchOnlineUsers = async () => {\n      try {\n        const response = await axios.get(`${usersApiUrl}/online`);\n        onlineUsers.value = response.data;\n        // 向父组件发送在线用户更新\n        emit('update-online-users', onlineUsers.value);\n      } catch (error) {\n        console.error('获取在线用户失败:', error);\n        if (onlineUsers.value.length === 0) {\n          onlineUsers.value = [\n            { username: username.value, avatar: userAvatar.value }\n          ];\n          emit('update-online-users', onlineUsers.value);\n        }\n      }\n    };\n\n    // 发送消息\n    const sendMessage = async () => {\n      if (!newMessage.value.trim()) return;\n      \n      try {\n        const response = await axios.post(apiUrl, {\n          sender: username.value,\n          content: newMessage.value,\n          avatar: userAvatar.value\n        });\n        \n        messages.value.push(response.data);\n        newMessage.value = '';\n        nextTick(() => {\n          scrollToBottom();\n        });\n      } catch (error) {\n        console.error('发送消息失败:', error);\n      }\n    };\n\n    // 滚动到底部\n    const scrollToBottom = () => {\n      nextTick(() => {\n        const messagesListEl = messagesList.value;\n        if (messagesListEl) {\n          messagesListEl.scrollTop = messagesListEl.scrollHeight;\n        }\n      });\n    };\n\n    // 格式化时间\n    const formatTime = (timestamp) => {\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString('zh-CN', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    };\n\n    // 设置用户名和头像\n    const setUsername = (userData) => {\n      username.value = userData.username;\n      userAvatar.value = userData.avatar;\n      \n      // 保存到localStorage\n      localStorage.setItem('chat-username', username.value);\n      localStorage.setItem('chat-avatar', userAvatar.value);\n      \n      // 注册用户\n      registerUser();\n      \n      // 获取消息和在线用户\n      fetchMessages();\n      fetchOnlineUsers();\n      \n      // 设置轮询\n      startPolling();\n    };\n\n    // 开始轮询\n    const startPolling = () => {\n      pollingInterval.value = setInterval(fetchMessages, 3000);\n      onlinePollingInterval.value = setInterval(fetchOnlineUsers, 5000);\n    };\n\n    // 停止轮询\n    const stopPolling = () => {\n      if (pollingInterval.value) {\n        clearInterval(pollingInterval.value);\n      }\n      if (onlinePollingInterval.value) {\n        clearInterval(onlinePollingInterval.value);\n      }\n    };\n\n    // 组件挂载时\n    onMounted(() => {\n      initUserInfo();\n      document.body.classList.add(`theme-${currentTheme.value}`);\n      \n      if (username.value) {\n        fetchMessages();\n        fetchOnlineUsers();\n        startPolling();\n      }\n    });\n\n    // 组件卸载时\n    onUnmounted(() => {\n      stopPolling();\n    });\n\n    return {\n      messages,\n      newMessage,\n      messagesList,\n      sendMessage,\n      formatTime,\n      handleAvatarError,\n      getFallbackAvatarUrl,\n      username,\n      userAvatar,\n      onlineUsers,\n      setUsername\n    };\n  }\n}\n</script>\n\n<style scoped>\n.chat-container {\n  flex: 1;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background-color: var(--chat-background); /* 使用主题变量 */\n  color: var(--text-color); /* 使用主题变量 */\n  position: relative;\n  z-index: 1;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);\n  background-image: var(--background-image); /* 使用主题变量中的背景图案 */\n  background-repeat: repeat;\n  background-size: 100px 100px; /* 设置背景图案大小 */\n}\n\n.chat-interface {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  backdrop-filter: blur(5px); /* 添加模糊效果 */\n}\n\n.chat-header {\n  padding: 1rem 1.5rem;\n  background-color: var(--primary-color); /* 使用主题变量 */\n  color: var(--header-color); /* 使用主题变量 */\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  box-shadow: var(--header-shadow);\n  position: relative;\n  z-index: 2;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1); /* 添加边框 */\n  background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.05), transparent); /* 添加渐变效果 */\n}\n\n.chat-title {\n  margin: 0;\n  font-size: 1.25rem;\n  font-weight: 600;\n  letter-spacing: 0.5px;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2); /* 添加文字阴影 */\n}\n\n.user-info-container {\n  display: flex;\n  align-items: center;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  margin-left: 1rem;\n  background-color: rgba(255, 255, 255, 0.1);\n  padding: 0.5rem 0.75rem;\n  border-radius: 2rem;\n  backdrop-filter: blur(5px);\n  border: 1px solid rgba(255, 255, 255, 0.05); /* 添加细微边框 */\n  transition: all 0.2s ease; /* 添加过渡效果 */\n}\n\n.user-info:hover {\n  background-color: rgba(255, 255, 255, 0.15); /* 悬停时背景变亮 */\n  transform: translateY(-1px); /* 悬停时轻微上移 */\n}\n\n.user-avatar {\n  width: 32px; /* 增加头像尺寸 */\n  height: 32px; /* 增加头像尺寸 */\n  border-radius: 50%;\n  object-fit: cover;\n  border: var(--avatar-border, 1px solid rgba(255, 255, 255, 0.3));\n  box-shadow: var(--avatar-shadow, 0 2px 4px rgba(0, 0, 0, 0.2));\n  transition: transform 0.2s ease; /* 添加过渡效果 */\n}\n\n.user-avatar:hover {\n  transform: scale(1.1); /* 悬停时放大 */\n}\n\n.current-username {\n  margin-left: 0.5rem;\n  font-weight: 500;\n  color: var(--text-color);\n  mix-blend-mode: overlay;\n}\n\n.chat-main {\n  display: flex;\n  flex: 1;\n  overflow: hidden;\n  position: relative;\n  background-image: var(--background-image); /* 使用主题变量中的背景图案 */\n  background-repeat: repeat;\n  background-size: 100px 100px; /* 设置背景图案大小 */\n}\n\n.messages-container {\n  flex: 1;\n  overflow: hidden;\n  padding: 20px;\n  margin-bottom: 16px;\n}\n\n.messages-list {\n  height: 100%;\n  overflow-y: auto;\n  padding-right: 8px;\n}\n\n.messages-list::-webkit-scrollbar {\n  width: 8px;\n}\n\n.messages-list::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.messages-list::-webkit-scrollbar-thumb {\n  background-color: var(--background-tertiary);\n  border-radius: 4px;\n}\n\n.message-item {\n  display: flex;\n  margin-bottom: 16px;\n  padding: 4px 8px;\n  border-radius: 4px;\n  transition: background-color 0.2s;\n}\n\n.message-item:hover {\n  background-color: var(--background-modifier-hover);\n}\n\n.message-avatar {\n  margin-right: 16px;\n  flex-shrink: 0;\n}\n\n.message-avatar img {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.message-content {\n  flex: 1;\n  min-width: 0;\n}\n\n.message-header {\n  display: flex;\n  align-items: center;\n  margin-bottom: 4px;\n}\n\n.message-sender {\n  font-weight: 500;\n  color: var(--header-primary);\n  margin-right: 8px;\n}\n\n.message-time {\n  font-size: 0.8rem;\n  color: var(--text-muted);\n}\n\n.message-text {\n  color: var(--text-normal);\n  word-wrap: break-word;\n  line-height: 1.4;\n}\n\n.input-container {\n  padding: 16px;\n  background-color: var(--background-secondary);\n  border-top: 1px solid var(--border-color);\n}\n\n.input-wrapper {\n  display: flex;\n  gap: 12px;\n  padding: 0 16px;\n  background-color: var(--background-tertiary);\n  border-radius: 8px;\n}\n\n.message-input {\n  flex: 1;\n  padding: 12px 0;\n  background: none;\n  border: none;\n  color: var(--text-normal);\n  font-size: 1rem;\n  outline: none;\n}\n\n.message-input::placeholder {\n  color: var(--text-muted);\n}\n\n.send-button {\n  padding: 8px 16px;\n  background: none;\n  border: none;\n  color: var(--text-link);\n  font-weight: 500;\n  cursor: pointer;\n  transition: color 0.2s;\n}\n\n.send-button:hover {\n  color: var(--header-primary);\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .chat-container {\n    height: auto;\n    flex: 1;\n  }\n  \n  .messages-container {\n    padding: 12px;\n  }\n  \n  .message-avatar img {\n    width: 32px;\n    height: 32px;\n  }\n  \n  .input-container {\n    padding: 12px;\n  }\n  \n  .input-wrapper {\n    padding: 0 12px;\n  }\n  \n  .message-input {\n    padding: 10px 0;\n  }\n  \n  .send-button {\n    padding: 6px 12px;\n  }\n}\n</style> \n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}