{"ast":null,"code":"export default {\n  name: 'MessageList',\n  props: {\n    messages: {\n      type: Array,\n      default: () => []\n    }\n  },\n  watch: {\n    // 监听消息数组变化，当有新消息时自动滚动到底部\n    messages: {\n      handler() {\n        this.$nextTick(() => {\n          this.scrollToBottom(); // 在DOM更新后滚动到底部\n        });\n      },\n      deep: true // 深度监听数组变化\n    }\n  },\n  mounted() {\n    // 组件挂载后滚动到底部\n    this.scrollToBottom();\n  },\n  methods: {\n    // 格式化时间戳为友好的时间格式\n    formatTime(timestamp) {\n      const date = new Date(timestamp);\n      const now = new Date();\n      const isToday = date.toDateString() === now.toDateString();\n\n      // 如果是今天的消息，只显示时间；否则显示日期和时间\n      if (isToday) {\n        return `${date.getHours()}:${String(date.getMinutes()).padStart(2, '0')}`;\n      } else {\n        return `${date.getMonth() + 1}/${date.getDate()} ${date.getHours()}:${String(date.getMinutes()).padStart(2, '0')}`;\n      }\n    },\n    // 滚动到消息列表底部\n    scrollToBottom() {\n      if (this.$refs.messageList) {\n        const container = this.$refs.messageList;\n        container.scrollTop = container.scrollHeight;\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","props","messages","type","Array","default","watch","handler","$nextTick","scrollToBottom","deep","mounted","methods","formatTime","timestamp","date","Date","now","isToday","toDateString","getHours","String","getMinutes","padStart","getMonth","getDate","$refs","messageList","container","scrollTop","scrollHeight"],"sources":["C:\\Users\\Administrator\\Desktop\\discord-chat-app\\just-do-it\\src\\components\\chat\\MessageList.vue"],"sourcesContent":["<template>\r\n  <div class=\"message-list\" ref=\"messageList\">\r\n    <div v-if=\"messages.length === 0\" class=\"no-messages\">\r\n      暂无消息，开始聊天吧！\r\n    </div>\r\n    <div v-else>\r\n      <div v-for=\"message in messages\" :key=\"message.id\" class=\"message-item\">\r\n        <div class=\"message-header\">\r\n          <span class=\"user-name\">{{ message.user }}</span>\r\n          <span class=\"timestamp\">{{ formatTime(message.timestamp) }}</span>\r\n        </div>\r\n        <div class=\"message-content\">\r\n          {{ message.content }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'MessageList',\r\n  props: {\r\n    messages: {\r\n      type: Array,\r\n      default: () => []\r\n    }\r\n  },\r\n  watch: {\r\n    // 监听消息数组变化，当有新消息时自动滚动到底部\r\n    messages: {\r\n      handler() {\r\n        this.$nextTick(() => {\r\n          this.scrollToBottom(); // 在DOM更新后滚动到底部\r\n        });\r\n      },\r\n      deep: true // 深度监听数组变化\r\n    }\r\n  },\r\n  mounted() {\r\n    // 组件挂载后滚动到底部\r\n    this.scrollToBottom();\r\n  },\r\n  methods: {\r\n    // 格式化时间戳为友好的时间格式\r\n    formatTime(timestamp) {\r\n      const date = new Date(timestamp);\r\n      const now = new Date();\r\n      const isToday = date.toDateString() === now.toDateString();\r\n      \r\n      // 如果是今天的消息，只显示时间；否则显示日期和时间\r\n      if (isToday) {\r\n        return `${date.getHours()}:${String(date.getMinutes()).padStart(2, '0')}`;\r\n      } else {\r\n        return `${date.getMonth() + 1}/${date.getDate()} ${date.getHours()}:${String(date.getMinutes()).padStart(2, '0')}`;\r\n      }\r\n    },\r\n    \r\n    // 滚动到消息列表底部\r\n    scrollToBottom() {\r\n      if (this.$refs.messageList) {\r\n        const container = this.$refs.messageList;\r\n        container.scrollTop = container.scrollHeight;\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.message-list {\r\n  padding: 1rem;\r\n  height: 70vh; /* 设置固定高度 */\r\n  overflow-y: auto; /* 允许垂直滚动 */\r\n  display: flex;\r\n  flex-direction: column;\r\n  scroll-behavior: smooth; /* 平滑滚动效果 */\r\n  background-color: var(--chat-background); /* 使用主题变量 */\r\n}\r\n\r\n.no-messages {\r\n  text-align: center;\r\n  color: var(--timestamp-color); /* 使用主题变量 */\r\n  margin-top: 2rem;\r\n}\r\n\r\n.message-item {\r\n  margin-bottom: 1rem;\r\n  padding: 0.5rem;\r\n  border-radius: 0.5rem;\r\n  background-color: var(--message-background); /* 使用主题变量 */\r\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.message-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 0.25rem;\r\n}\r\n\r\n.user-name {\r\n  font-weight: bold;\r\n  color: var(--username-color); /* 使用主题变量 */\r\n}\r\n\r\n.timestamp {\r\n  font-size: 0.8rem;\r\n  color: var(--timestamp-color); /* 使用主题变量 */\r\n}\r\n\r\n.message-content {\r\n  word-break: break-word;\r\n  color: var(--text-color); /* 使用主题变量 */\r\n}\r\n</style> "],"mappings":"AAoBA,eAAe;EACbA,IAAI,EAAE,aAAa;EACnBC,KAAK,EAAE;IACLC,QAAQ,EAAE;MACRC,IAAI,EAAEC,KAAK;MACXC,OAAO,EAAEA,CAAA,KAAM;IACjB;EACF,CAAC;EACDC,KAAK,EAAE;IACL;IACAJ,QAAQ,EAAE;MACRK,OAAOA,CAAA,EAAG;QACR,IAAI,CAACC,SAAS,CAAC,MAAM;UACnB,IAAI,CAACC,cAAc,CAAC,CAAC,EAAE;QACzB,CAAC,CAAC;MACJ,CAAC;MACDC,IAAI,EAAE,IAAG,CAAE;IACb;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACF,cAAc,CAAC,CAAC;EACvB,CAAC;EACDG,OAAO,EAAE;IACP;IACAC,UAAUA,CAACC,SAAS,EAAE;MACpB,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAACF,SAAS,CAAC;MAChC,MAAMG,GAAE,GAAI,IAAID,IAAI,CAAC,CAAC;MACtB,MAAME,OAAM,GAAIH,IAAI,CAACI,YAAY,CAAC,MAAMF,GAAG,CAACE,YAAY,CAAC,CAAC;;MAE1D;MACA,IAAID,OAAO,EAAE;QACX,OAAO,GAAGH,IAAI,CAACK,QAAQ,CAAC,CAAC,IAAIC,MAAM,CAACN,IAAI,CAACO,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;MAC3E,OAAO;QACL,OAAO,GAAGR,IAAI,CAACS,QAAQ,CAAC,IAAI,CAAC,IAAIT,IAAI,CAACU,OAAO,CAAC,CAAC,IAAIV,IAAI,CAACK,QAAQ,CAAC,CAAC,IAAIC,MAAM,CAACN,IAAI,CAACO,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;MACpH;IACF,CAAC;IAED;IACAd,cAAcA,CAAA,EAAG;MACf,IAAI,IAAI,CAACiB,KAAK,CAACC,WAAW,EAAE;QAC1B,MAAMC,SAAQ,GAAI,IAAI,CAACF,KAAK,CAACC,WAAW;QACxCC,SAAS,CAACC,SAAQ,GAAID,SAAS,CAACE,YAAY;MAC9C;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}