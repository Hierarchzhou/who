{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\n// 消息管理模块\nexport const messagesStore = {\n  namespaced: true,\n  state: {\n    // 按频道ID存储消息\n    channelMessages: {},\n    // 消息加载状态\n    loading: false,\n    // 错误信息\n    error: null\n  },\n  mutations: {\n    // 设置频道消息\n    SET_CHANNEL_MESSAGES(state, {\n      channelId,\n      messages\n    }) {\n      state.channelMessages = {\n        ...state.channelMessages,\n        [channelId]: messages\n      };\n    },\n    // 添加消息到频道\n    ADD_MESSAGE(state, {\n      channelId,\n      message\n    }) {\n      if (!state.channelMessages[channelId]) {\n        state.channelMessages[channelId] = [];\n      }\n      state.channelMessages[channelId].push(message);\n    },\n    // 更新消息\n    UPDATE_MESSAGE(state, {\n      channelId,\n      messageId,\n      updates\n    }) {\n      const messages = state.channelMessages[channelId];\n      if (!messages) return;\n      const index = messages.findIndex(msg => msg.id === messageId);\n      if (index !== -1) {\n        messages[index] = {\n          ...messages[index],\n          ...updates\n        };\n      }\n    },\n    // 删除消息\n    DELETE_MESSAGE(state, {\n      channelId,\n      messageId\n    }) {\n      const messages = state.channelMessages[channelId];\n      if (!messages) return;\n      const index = messages.findIndex(msg => msg.id === messageId);\n      if (index !== -1) {\n        messages.splice(index, 1);\n      }\n    },\n    // 设置加载状态\n    SET_LOADING(state, loading) {\n      state.loading = loading;\n    },\n    // 设置错误信息\n    SET_ERROR(state, error) {\n      state.error = error;\n    },\n    // 清除频道消息\n    CLEAR_CHANNEL_MESSAGES(state, channelId) {\n      delete state.channelMessages[channelId];\n    }\n  },\n  actions: {\n    // 获取频道消息\n    async fetchChannelMessages({\n      commit\n    }, channelId) {\n      commit('SET_LOADING', true);\n      commit('SET_ERROR', null);\n      try {\n        // TODO: 调用API获取频道消息\n        const messages = []; // 这里应该是API返回的消息\n        commit('SET_CHANNEL_MESSAGES', {\n          channelId,\n          messages\n        });\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        console.error('获取频道消息失败:', error);\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    // 发送消息\n    async sendMessage({\n      commit\n    }, messageData) {\n      try {\n        // TODO: 调用API发送消息\n        const message = {\n          id: Date.now().toString(),\n          ...messageData,\n          status: 'sent'\n        };\n        commit('ADD_MESSAGE', {\n          channelId: messageData.channelId,\n          message\n        });\n        return message;\n      } catch (error) {\n        console.error('发送消息失败:', error);\n        throw error;\n      }\n    },\n    // 更新消息\n    async updateMessage({\n      commit\n    }, {\n      channelId,\n      messageId,\n      updates\n    }) {\n      try {\n        // TODO: 调用API更新消息\n        commit('UPDATE_MESSAGE', {\n          channelId,\n          messageId,\n          updates\n        });\n      } catch (error) {\n        console.error('更新消息失败:', error);\n        throw error;\n      }\n    },\n    // 删除消息\n    async deleteMessage({\n      commit\n    }, {\n      channelId,\n      messageId\n    }) {\n      try {\n        // TODO: 调用API删除消息\n        commit('DELETE_MESSAGE', {\n          channelId,\n          messageId\n        });\n      } catch (error) {\n        console.error('删除消息失败:', error);\n        throw error;\n      }\n    }\n  },\n  getters: {\n    // 获取频道的所有消息\n    channelMessages: state => channelId => {\n      return state.channelMessages[channelId] || [];\n    },\n    // 获取频道的最后一条消息\n    lastChannelMessage: state => channelId => {\n      const messages = state.channelMessages[channelId];\n      return messages && messages.length > 0 ? messages[messages.length - 1] : null;\n    },\n    // 获取频道的未读消息数\n    unreadCount: state => (channelId, lastReadTimestamp) => {\n      const messages = state.channelMessages[channelId];\n      if (!messages || !lastReadTimestamp) return 0;\n      return messages.filter(msg => new Date(msg.timestamp) > new Date(lastReadTimestamp)).length;\n    },\n    // 获取加载状态\n    isLoading: state => state.loading,\n    // 获取错误信息\n    error: state => state.error\n  }\n};","map":{"version":3,"names":["messagesStore","namespaced","state","channelMessages","loading","error","mutations","SET_CHANNEL_MESSAGES","channelId","messages","ADD_MESSAGE","message","push","UPDATE_MESSAGE","messageId","updates","index","findIndex","msg","id","DELETE_MESSAGE","splice","SET_LOADING","SET_ERROR","CLEAR_CHANNEL_MESSAGES","actions","fetchChannelMessages","commit","console","sendMessage","messageData","Date","now","toString","status","updateMessage","deleteMessage","getters","lastChannelMessage","length","unreadCount","lastReadTimestamp","filter","timestamp","isLoading"],"sources":["C:/Users/Administrator/Desktop/who/src/store/messages.js"],"sourcesContent":["// 消息管理模块\r\nexport const messagesStore = {\r\n  namespaced: true,\r\n\r\n  state: {\r\n    // 按频道ID存储消息\r\n    channelMessages: {},\r\n    // 消息加载状态\r\n    loading: false,\r\n    // 错误信息\r\n    error: null\r\n  },\r\n\r\n  mutations: {\r\n    // 设置频道消息\r\n    SET_CHANNEL_MESSAGES(state, { channelId, messages }) {\r\n      state.channelMessages = {\r\n        ...state.channelMessages,\r\n        [channelId]: messages\r\n      }\r\n    },\r\n\r\n    // 添加消息到频道\r\n    ADD_MESSAGE(state, { channelId, message }) {\r\n      if (!state.channelMessages[channelId]) {\r\n        state.channelMessages[channelId] = []\r\n      }\r\n      state.channelMessages[channelId].push(message)\r\n    },\r\n\r\n    // 更新消息\r\n    UPDATE_MESSAGE(state, { channelId, messageId, updates }) {\r\n      const messages = state.channelMessages[channelId]\r\n      if (!messages) return\r\n\r\n      const index = messages.findIndex(msg => msg.id === messageId)\r\n      if (index !== -1) {\r\n        messages[index] = { ...messages[index], ...updates }\r\n      }\r\n    },\r\n\r\n    // 删除消息\r\n    DELETE_MESSAGE(state, { channelId, messageId }) {\r\n      const messages = state.channelMessages[channelId]\r\n      if (!messages) return\r\n\r\n      const index = messages.findIndex(msg => msg.id === messageId)\r\n      if (index !== -1) {\r\n        messages.splice(index, 1)\r\n      }\r\n    },\r\n\r\n    // 设置加载状态\r\n    SET_LOADING(state, loading) {\r\n      state.loading = loading\r\n    },\r\n\r\n    // 设置错误信息\r\n    SET_ERROR(state, error) {\r\n      state.error = error\r\n    },\r\n\r\n    // 清除频道消息\r\n    CLEAR_CHANNEL_MESSAGES(state, channelId) {\r\n      delete state.channelMessages[channelId]\r\n    }\r\n  },\r\n\r\n  actions: {\r\n    // 获取频道消息\r\n    async fetchChannelMessages({ commit }, channelId) {\r\n      commit('SET_LOADING', true)\r\n      commit('SET_ERROR', null)\r\n\r\n      try {\r\n        // TODO: 调用API获取频道消息\r\n        const messages = []  // 这里应该是API返回的消息\r\n        commit('SET_CHANNEL_MESSAGES', { channelId, messages })\r\n      } catch (error) {\r\n        commit('SET_ERROR', error.message)\r\n        console.error('获取频道消息失败:', error)\r\n      } finally {\r\n        commit('SET_LOADING', false)\r\n      }\r\n    },\r\n\r\n    // 发送消息\r\n    async sendMessage({ commit }, messageData) {\r\n      try {\r\n        // TODO: 调用API发送消息\r\n        const message = {\r\n          id: Date.now().toString(),\r\n          ...messageData,\r\n          status: 'sent'\r\n        }\r\n        \r\n        commit('ADD_MESSAGE', {\r\n          channelId: messageData.channelId,\r\n          message\r\n        })\r\n\r\n        return message\r\n      } catch (error) {\r\n        console.error('发送消息失败:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    // 更新消息\r\n    async updateMessage({ commit }, { channelId, messageId, updates }) {\r\n      try {\r\n        // TODO: 调用API更新消息\r\n        commit('UPDATE_MESSAGE', { channelId, messageId, updates })\r\n      } catch (error) {\r\n        console.error('更新消息失败:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    // 删除消息\r\n    async deleteMessage({ commit }, { channelId, messageId }) {\r\n      try {\r\n        // TODO: 调用API删除消息\r\n        commit('DELETE_MESSAGE', { channelId, messageId })\r\n      } catch (error) {\r\n        console.error('删除消息失败:', error)\r\n        throw error\r\n      }\r\n    }\r\n  },\r\n\r\n  getters: {\r\n    // 获取频道的所有消息\r\n    channelMessages: state => channelId => {\r\n      return state.channelMessages[channelId] || []\r\n    },\r\n\r\n    // 获取频道的最后一条消息\r\n    lastChannelMessage: state => channelId => {\r\n      const messages = state.channelMessages[channelId]\r\n      return messages && messages.length > 0 ? messages[messages.length - 1] : null\r\n    },\r\n\r\n    // 获取频道的未读消息数\r\n    unreadCount: state => (channelId, lastReadTimestamp) => {\r\n      const messages = state.channelMessages[channelId]\r\n      if (!messages || !lastReadTimestamp) return 0\r\n\r\n      return messages.filter(msg => new Date(msg.timestamp) > new Date(lastReadTimestamp)).length\r\n    },\r\n\r\n    // 获取加载状态\r\n    isLoading: state => state.loading,\r\n\r\n    // 获取错误信息\r\n    error: state => state.error\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}