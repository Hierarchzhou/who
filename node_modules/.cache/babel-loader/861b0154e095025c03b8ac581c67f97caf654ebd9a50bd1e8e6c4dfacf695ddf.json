{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport UserNameInput from './UserNameInput.vue';\nimport ThemeSelector from './ThemeSelector.vue';\nimport UserProfileEditor from './UserProfileEditor.vue';\nimport axios from 'axios';\nimport { handleAvatarError, getFallbackAvatarUrl } from '../../utils/avatarUtils';\nimport { ref, onMounted, onUnmounted, nextTick, watch } from 'vue';\nimport { useStore } from 'vuex';\nexport default {\n  name: 'ChatContainer',\n  components: {\n    UserNameInput,\n    ThemeSelector,\n    UserProfileEditor\n  },\n  props: {\n    currentUser: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props, {\n    emit\n  }) {\n    const messages = ref([]);\n    const newMessage = ref('');\n    const messagesList = ref(null);\n    const apiUrl = 'http://localhost:3001/api/messages';\n    const usersApiUrl = 'http://localhost:3001/api/users';\n    const username = ref(props.currentUser.username || '');\n    const userAvatar = ref(props.currentUser.avatar || '');\n    const onlineUsers = ref([]);\n    const pollingInterval = ref(null);\n    const onlinePollingInterval = ref(null);\n    const currentTheme = ref(localStorage.getItem('chat-theme') || 'discord');\n    const showProfileEditor = ref(false);\n    const currentUserInfo = ref({});\n    const store = useStore();\n\n    // 从localStorage获取用户信息\n    const initUserInfo = () => {\n      const savedUsername = localStorage.getItem('chat-username');\n      const savedAvatar = localStorage.getItem('chat-avatar');\n      if (savedUsername && !username.value) {\n        username.value = savedUsername;\n      }\n      if (savedAvatar && !userAvatar.value) {\n        userAvatar.value = savedAvatar;\n      } else if (!userAvatar.value) {\n        // 设置默认头像\n        userAvatar.value = '/avatars/default.png';\n        localStorage.setItem('chat-avatar', userAvatar.value);\n      }\n\n      // 如果用户已登录，注册用户\n      if (username.value) {\n        registerUser();\n      }\n    };\n\n    // 注册用户\n    const registerUser = async () => {\n      try {\n        await axios.post(`${usersApiUrl}/register`, {\n          username: username.value,\n          avatar: userAvatar.value\n        });\n        console.log('用户注册成功');\n      } catch (error) {\n        console.error('用户注册失败:', error);\n      }\n    };\n\n    // 获取消息\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get(apiUrl);\n        messages.value = response.data;\n        nextTick(() => {\n          scrollToBottom();\n        });\n      } catch (error) {\n        console.error('获取消息失败:', error);\n      }\n    };\n\n    // 获取在线用户\n    const fetchOnlineUsers = async () => {\n      try {\n        const response = await axios.get(`${usersApiUrl}/online`);\n        onlineUsers.value = response.data;\n        // 向父组件发送在线用户更新\n        emit('update-online-users', onlineUsers.value);\n      } catch (error) {\n        console.error('获取在线用户失败:', error);\n        if (onlineUsers.value.length === 0) {\n          onlineUsers.value = [{\n            username: username.value,\n            avatar: userAvatar.value\n          }];\n          emit('update-online-users', onlineUsers.value);\n        }\n      }\n    };\n\n    // 发送消息\n    const sendMessage = async () => {\n      if (!newMessage.value.trim()) return;\n      try {\n        const response = await axios.post(apiUrl, {\n          sender: username.value,\n          content: newMessage.value,\n          avatar: userAvatar.value\n        });\n        messages.value.push(response.data);\n        newMessage.value = '';\n        nextTick(() => {\n          scrollToBottom();\n        });\n      } catch (error) {\n        console.error('发送消息失败:', error);\n      }\n    };\n\n    // 滚动到底部\n    const scrollToBottom = () => {\n      nextTick(() => {\n        const messagesListEl = messagesList.value;\n        if (messagesListEl) {\n          messagesListEl.scrollTop = messagesListEl.scrollHeight;\n        }\n      });\n    };\n\n    // 格式化时间\n    const formatTime = timestamp => {\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString('zh-CN', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    };\n\n    // 设置用户名和头像\n    const setUsername = userData => {\n      username.value = userData.username;\n      userAvatar.value = userData.avatar;\n\n      // 保存到localStorage\n      localStorage.setItem('chat-username', username.value);\n      localStorage.setItem('chat-avatar', userAvatar.value);\n\n      // 注册用户\n      registerUser();\n\n      // 获取消息和在线用户\n      fetchMessages();\n      fetchOnlineUsers();\n\n      // 设置轮询\n      startPolling();\n    };\n\n    // 开始轮询\n    const startPolling = () => {\n      pollingInterval.value = setInterval(fetchMessages, 3000);\n      onlinePollingInterval.value = setInterval(fetchOnlineUsers, 5000);\n    };\n\n    // 停止轮询\n    const stopPolling = () => {\n      if (pollingInterval.value) {\n        clearInterval(pollingInterval.value);\n      }\n      if (onlinePollingInterval.value) {\n        clearInterval(onlinePollingInterval.value);\n      }\n    };\n\n    // 更新用户信息\n    const updateProfile = updatedInfo => {\n      username.value = updatedInfo.username;\n      userAvatar.value = updatedInfo.avatar;\n\n      // 保存到localStorage\n      localStorage.setItem('chat-username', username.value);\n      localStorage.setItem('chat-avatar', userAvatar.value);\n      localStorage.setItem('chat-status', updatedInfo.status);\n\n      // 更新状态\n      store.dispatch('userStatus/setStatus', updatedInfo.status);\n\n      // 注册用户\n      registerUser();\n\n      // 获取消息和在线用户\n      fetchMessages();\n      fetchOnlineUsers();\n\n      // 设置轮询\n      startPolling();\n\n      // 关闭编辑器\n      closeProfileEditor();\n    };\n\n    // 打开个人资料编辑器\n    const openProfileEditor = () => {\n      showProfileEditor.value = true;\n      currentUserInfo.value = {\n        username: username.value,\n        avatar: userAvatar.value,\n        bio: localStorage.getItem('chat-bio') || '',\n        status: store.getters['userStatus/currentStatus']\n      };\n    };\n\n    // 关闭个人资料编辑器\n    const closeProfileEditor = () => {\n      showProfileEditor.value = false;\n    };\n\n    // 监听消息列表变化\n    watch(messages, () => {\n      nextTick(() => {\n        scrollToBottom();\n      });\n    }, {\n      deep: true\n    });\n\n    // 组件挂载时\n    onMounted(() => {\n      initUserInfo();\n      document.body.classList.add(`theme-${currentTheme.value}`);\n      if (username.value) {\n        fetchMessages();\n        fetchOnlineUsers();\n        startPolling();\n      }\n    });\n\n    // 组件卸载时\n    onUnmounted(() => {\n      stopPolling();\n    });\n    return {\n      messages,\n      newMessage,\n      messagesList,\n      sendMessage,\n      formatTime,\n      handleAvatarError,\n      getFallbackAvatarUrl,\n      username,\n      userAvatar,\n      onlineUsers,\n      showProfileEditor,\n      currentUserInfo,\n      openProfileEditor,\n      closeProfileEditor,\n      updateProfile,\n      setUsername\n    };\n  }\n};","map":{"version":3,"names":["UserNameInput","ThemeSelector","UserProfileEditor","axios","handleAvatarError","getFallbackAvatarUrl","ref","onMounted","onUnmounted","nextTick","watch","useStore","name","components","props","currentUser","type","Object","required","setup","emit","messages","newMessage","messagesList","apiUrl","usersApiUrl","username","userAvatar","avatar","onlineUsers","pollingInterval","onlinePollingInterval","currentTheme","localStorage","getItem","showProfileEditor","currentUserInfo","store","initUserInfo","savedUsername","savedAvatar","value","setItem","registerUser","post","console","log","error","fetchMessages","response","get","data","scrollToBottom","fetchOnlineUsers","length","sendMessage","trim","sender","content","push","messagesListEl","scrollTop","scrollHeight","formatTime","timestamp","date","Date","toLocaleTimeString","hour","minute","setUsername","userData","startPolling","setInterval","stopPolling","clearInterval","updateProfile","updatedInfo","status","dispatch","closeProfileEditor","openProfileEditor","bio","getters","deep","document","body","classList","add"],"sources":["C:\\Users\\Administrator\\Desktop\\discord-chat-app\\fack\\just-do-it\\src\\components\\chat\\ChatContainer.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <!-- 用户名输入界面，当用户未设置昵称时显示 -->\n    <UserNameInput \n      v-if=\"!username\" \n      @set-username=\"setUsername\" \n    />\n    \n    <!-- 聊天界面，当用户已设置昵称时显示 -->\n    <div v-else class=\"chat-interface\">\n      <header class=\"chat-header\">\n        <h2 class=\"chat-title\">Vue聊天室</h2>\n        <div class=\"user-info-container\">\n          <ThemeSelector />\n          <div class=\"user-info\">\n            <img \n              :src=\"userAvatar || getFallbackAvatarUrl()\" \n              alt=\"用户头像\" \n              class=\"user-avatar\"\n              @error=\"handleAvatarError\"\n              @click=\"openProfileEditor\" \n            >\n            <span class=\"current-username\">{{ username }}</span>\n          </div>\n        </div>\n      </header>\n      \n      <div class=\"chat-main\">\n        <div class=\"messages-container\">\n          <div class=\"messages-list\" ref=\"messagesList\">\n            <div v-for=\"message in messages\" :key=\"message.id\" class=\"message-item\">\n              <div class=\"message-avatar\">\n                <img \n                  :src=\"message.avatar || getFallbackAvatarUrl()\" \n                  :alt=\"message.sender\"\n                  @error=\"handleAvatarError\"\n                >\n              </div>\n              <div class=\"message-content\">\n                <div class=\"message-header\">\n                  <span class=\"message-sender\">{{ message.sender }}</span>\n                  <span class=\"message-time\">{{ formatTime(message.timestamp) }}</span>\n                </div>\n                <div class=\"message-text\">{{ message.content }}</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"input-container\">\n          <div class=\"input-wrapper\">\n            <input \n              type=\"text\" \n              v-model=\"newMessage\" \n              @keyup.enter=\"sendMessage\"\n              placeholder=\"发送消息...\"\n              class=\"message-input\"\n            >\n            <button class=\"send-button\" @click=\"sendMessage\">\n              发送\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- 个人资料编辑器 -->\n    <UserProfileEditor \n      :isOpen=\"showProfileEditor\"\n      :currentUserInfo=\"currentUserInfo\"\n      @close=\"closeProfileEditor\"\n      @update-profile=\"updateProfile\"\n    />\n  </div>\n</template>\n\n<script>\nimport UserNameInput from './UserNameInput.vue';\nimport ThemeSelector from './ThemeSelector.vue';\nimport UserProfileEditor from './UserProfileEditor.vue';\nimport axios from 'axios';\nimport { handleAvatarError, getFallbackAvatarUrl } from '../../utils/avatarUtils';\nimport { ref, onMounted, onUnmounted, nextTick, watch } from 'vue';\nimport { useStore } from 'vuex';\n\nexport default {\n  name: 'ChatContainer',\n  components: {\n    UserNameInput,\n    ThemeSelector,\n    UserProfileEditor\n  },\n  props: {\n    currentUser: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props, { emit }) {\n    const messages = ref([]);\n    const newMessage = ref('');\n    const messagesList = ref(null);\n    const apiUrl = 'http://localhost:3001/api/messages';\n    const usersApiUrl = 'http://localhost:3001/api/users';\n    const username = ref(props.currentUser.username || '');\n    const userAvatar = ref(props.currentUser.avatar || '');\n    const onlineUsers = ref([]);\n    const pollingInterval = ref(null);\n    const onlinePollingInterval = ref(null);\n    const currentTheme = ref(localStorage.getItem('chat-theme') || 'discord');\n    const showProfileEditor = ref(false);\n    const currentUserInfo = ref({});\n    const store = useStore();\n\n    // 从localStorage获取用户信息\n    const initUserInfo = () => {\n      const savedUsername = localStorage.getItem('chat-username');\n      const savedAvatar = localStorage.getItem('chat-avatar');\n      \n      if (savedUsername && !username.value) {\n        username.value = savedUsername;\n      }\n      \n      if (savedAvatar && !userAvatar.value) {\n        userAvatar.value = savedAvatar;\n      } else if (!userAvatar.value) {\n        // 设置默认头像\n        userAvatar.value = '/avatars/default.png';\n        localStorage.setItem('chat-avatar', userAvatar.value);\n      }\n      \n      // 如果用户已登录，注册用户\n      if (username.value) {\n        registerUser();\n      }\n    };\n\n    // 注册用户\n    const registerUser = async () => {\n      try {\n        await axios.post(`${usersApiUrl}/register`, {\n          username: username.value,\n          avatar: userAvatar.value\n        });\n        console.log('用户注册成功');\n      } catch (error) {\n        console.error('用户注册失败:', error);\n      }\n    };\n\n    // 获取消息\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get(apiUrl);\n        messages.value = response.data;\n        nextTick(() => {\n          scrollToBottom();\n        });\n      } catch (error) {\n        console.error('获取消息失败:', error);\n      }\n    };\n\n    // 获取在线用户\n    const fetchOnlineUsers = async () => {\n      try {\n        const response = await axios.get(`${usersApiUrl}/online`);\n        onlineUsers.value = response.data;\n        // 向父组件发送在线用户更新\n        emit('update-online-users', onlineUsers.value);\n      } catch (error) {\n        console.error('获取在线用户失败:', error);\n        if (onlineUsers.value.length === 0) {\n          onlineUsers.value = [\n            { username: username.value, avatar: userAvatar.value }\n          ];\n          emit('update-online-users', onlineUsers.value);\n        }\n      }\n    };\n\n    // 发送消息\n    const sendMessage = async () => {\n      if (!newMessage.value.trim()) return;\n      \n      try {\n        const response = await axios.post(apiUrl, {\n          sender: username.value,\n          content: newMessage.value,\n          avatar: userAvatar.value\n        });\n        \n        messages.value.push(response.data);\n        newMessage.value = '';\n        nextTick(() => {\n          scrollToBottom();\n        });\n      } catch (error) {\n        console.error('发送消息失败:', error);\n      }\n    };\n\n    // 滚动到底部\n    const scrollToBottom = () => {\n      nextTick(() => {\n        const messagesListEl = messagesList.value;\n        if (messagesListEl) {\n          messagesListEl.scrollTop = messagesListEl.scrollHeight;\n        }\n      });\n    };\n\n    // 格式化时间\n    const formatTime = (timestamp) => {\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString('zh-CN', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    };\n\n    // 设置用户名和头像\n    const setUsername = (userData) => {\n      username.value = userData.username;\n      userAvatar.value = userData.avatar;\n      \n      // 保存到localStorage\n      localStorage.setItem('chat-username', username.value);\n      localStorage.setItem('chat-avatar', userAvatar.value);\n      \n      // 注册用户\n      registerUser();\n      \n      // 获取消息和在线用户\n      fetchMessages();\n      fetchOnlineUsers();\n      \n      // 设置轮询\n      startPolling();\n    };\n\n    // 开始轮询\n    const startPolling = () => {\n      pollingInterval.value = setInterval(fetchMessages, 3000);\n      onlinePollingInterval.value = setInterval(fetchOnlineUsers, 5000);\n    };\n\n    // 停止轮询\n    const stopPolling = () => {\n      if (pollingInterval.value) {\n        clearInterval(pollingInterval.value);\n      }\n      if (onlinePollingInterval.value) {\n        clearInterval(onlinePollingInterval.value);\n      }\n    };\n\n    // 更新用户信息\n    const updateProfile = (updatedInfo) => {\n      username.value = updatedInfo.username;\n      userAvatar.value = updatedInfo.avatar;\n      \n      // 保存到localStorage\n      localStorage.setItem('chat-username', username.value);\n      localStorage.setItem('chat-avatar', userAvatar.value);\n      localStorage.setItem('chat-status', updatedInfo.status);\n      \n      // 更新状态\n      store.dispatch('userStatus/setStatus', updatedInfo.status);\n      \n      // 注册用户\n      registerUser();\n      \n      // 获取消息和在线用户\n      fetchMessages();\n      fetchOnlineUsers();\n      \n      // 设置轮询\n      startPolling();\n      \n      // 关闭编辑器\n      closeProfileEditor();\n    };\n\n    // 打开个人资料编辑器\n    const openProfileEditor = () => {\n      showProfileEditor.value = true;\n      currentUserInfo.value = {\n        username: username.value,\n        avatar: userAvatar.value,\n        bio: localStorage.getItem('chat-bio') || '',\n        status: store.getters['userStatus/currentStatus']\n      };\n    };\n\n    // 关闭个人资料编辑器\n    const closeProfileEditor = () => {\n      showProfileEditor.value = false;\n    };\n\n    // 监听消息列表变化\n    watch(messages, () => {\n      nextTick(() => {\n        scrollToBottom();\n      });\n    }, { deep: true });\n\n    // 组件挂载时\n    onMounted(() => {\n      initUserInfo();\n      document.body.classList.add(`theme-${currentTheme.value}`);\n      \n      if (username.value) {\n        fetchMessages();\n        fetchOnlineUsers();\n        startPolling();\n      }\n    });\n\n    // 组件卸载时\n    onUnmounted(() => {\n      stopPolling();\n    });\n\n    return {\n      messages,\n      newMessage,\n      messagesList,\n      sendMessage,\n      formatTime,\n      handleAvatarError,\n      getFallbackAvatarUrl,\n      username,\n      userAvatar,\n      onlineUsers,\n      showProfileEditor,\n      currentUserInfo,\n      openProfileEditor,\n      closeProfileEditor,\n      updateProfile,\n      setUsername\n    };\n  }\n}\n</script>\n\n<style scoped>\n.chat-container {\n  flex: 1;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background-color: var(--chat-background); /* 使用主题变量 */\n  color: var(--text-color); /* 使用主题变量 */\n  position: relative;\n  z-index: 1;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);\n  background-image: var(--background-image); /* 使用主题变量中的背景图案 */\n  background-repeat: repeat;\n  background-size: 100px 100px; /* 设置背景图案大小 */\n}\n\n.chat-interface {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  backdrop-filter: blur(5px); /* 添加模糊效果 */\n}\n\n.chat-header {\n  padding: 1rem 1.5rem;\n  background-color: var(--primary-color); /* 使用主题变量 */\n  color: var(--header-color); /* 使用主题变量 */\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  box-shadow: var(--header-shadow);\n  position: relative;\n  z-index: 2;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1); /* 添加边框 */\n  background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.05), transparent); /* 添加渐变效果 */\n}\n\n.chat-title {\n  margin: 0;\n  font-size: 1.25rem;\n  font-weight: 600;\n  letter-spacing: 0.5px;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2); /* 添加文字阴影 */\n}\n\n.user-info-container {\n  display: flex;\n  align-items: center;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  margin-left: 1rem;\n  background-color: rgba(255, 255, 255, 0.1);\n  padding: 0.5rem 0.75rem;\n  border-radius: 2rem;\n  backdrop-filter: blur(5px);\n  border: 1px solid rgba(255, 255, 255, 0.05); /* 添加细微边框 */\n  transition: all 0.2s ease; /* 添加过渡效果 */\n}\n\n.user-info:hover {\n  background-color: rgba(255, 255, 255, 0.15); /* 悬停时背景变亮 */\n  transform: translateY(-1px); /* 悬停时轻微上移 */\n}\n\n.user-avatar {\n  width: 32px; /* 增加头像尺寸 */\n  height: 32px; /* 增加头像尺寸 */\n  border-radius: 50%;\n  object-fit: cover;\n  border: var(--avatar-border, 1px solid rgba(255, 255, 255, 0.3));\n  box-shadow: var(--avatar-shadow, 0 2px 4px rgba(0, 0, 0, 0.2));\n  transition: transform 0.2s ease; /* 添加过渡效果 */\n}\n\n.user-avatar:hover {\n  transform: scale(1.1); /* 悬停时放大 */\n}\n\n.current-username {\n  margin-left: 0.5rem;\n  font-weight: 500;\n  color: var(--text-color);\n  mix-blend-mode: overlay;\n}\n\n.chat-main {\n  display: flex;\n  flex: 1;\n  overflow: hidden;\n  position: relative;\n  background-image: var(--background-image); /* 使用主题变量中的背景图案 */\n  background-repeat: repeat;\n  background-size: 100px 100px; /* 设置背景图案大小 */\n}\n\n.messages-container {\n  flex: 1;\n  overflow: hidden;\n  padding: 20px;\n  margin-bottom: 16px;\n}\n\n.messages-list {\n  height: 100%;\n  overflow-y: auto;\n  padding-right: 8px;\n}\n\n.messages-list::-webkit-scrollbar {\n  width: 8px;\n}\n\n.messages-list::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.messages-list::-webkit-scrollbar-thumb {\n  background-color: var(--background-tertiary);\n  border-radius: 4px;\n}\n\n.message-item {\n  display: flex;\n  margin-bottom: 16px;\n  padding: 4px 8px;\n  border-radius: 4px;\n  transition: background-color 0.2s;\n}\n\n.message-item:hover {\n  background-color: var(--background-modifier-hover);\n}\n\n.message-avatar {\n  margin-right: 16px;\n  flex-shrink: 0;\n}\n\n.message-avatar img {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.message-content {\n  flex: 1;\n  min-width: 0;\n}\n\n.message-header {\n  display: flex;\n  align-items: center;\n  margin-bottom: 4px;\n}\n\n.message-sender {\n  font-weight: 500;\n  color: var(--header-primary);\n  margin-right: 8px;\n}\n\n.message-time {\n  font-size: 0.8rem;\n  color: var(--text-muted);\n}\n\n.message-text {\n  color: var(--text-normal);\n  word-wrap: break-word;\n  line-height: 1.4;\n}\n\n.input-container {\n  padding: 16px;\n  background-color: var(--background-secondary);\n  border-top: 1px solid var(--border-color);\n}\n\n.input-wrapper {\n  display: flex;\n  gap: 12px;\n  padding: 0 16px;\n  background-color: var(--background-tertiary);\n  border-radius: 8px;\n}\n\n.message-input {\n  flex: 1;\n  padding: 12px 0;\n  background: none;\n  border: none;\n  color: var(--text-normal);\n  font-size: 1rem;\n  outline: none;\n}\n\n.message-input::placeholder {\n  color: var(--text-muted);\n}\n\n.send-button {\n  padding: 8px 16px;\n  background: none;\n  border: none;\n  color: var(--text-link);\n  font-weight: 500;\n  cursor: pointer;\n  transition: color 0.2s;\n}\n\n.send-button:hover {\n  color: var(--header-primary);\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .chat-container {\n    height: auto;\n    flex: 1;\n  }\n  \n  .messages-container {\n    padding: 12px;\n  }\n  \n  .message-avatar img {\n    width: 32px;\n    height: 32px;\n  }\n  \n  .input-container {\n    padding: 12px;\n  }\n  \n  .input-wrapper {\n    padding: 0 12px;\n  }\n  \n  .message-input {\n    padding: 10px 0;\n  }\n  \n  .send-button {\n    padding: 6px 12px;\n  }\n}\n</style> \n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}