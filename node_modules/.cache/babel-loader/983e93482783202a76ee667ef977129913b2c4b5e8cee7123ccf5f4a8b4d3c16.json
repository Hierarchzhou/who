{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createElementVNode as _createElementVNode, createVNode as _createVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat-interface\"\n};\nconst _hoisted_3 = {\n  class: \"chat-header\"\n};\nconst _hoisted_4 = {\n  class: \"user-info-container\"\n};\nconst _hoisted_5 = {\n  class: \"user-info\"\n};\nconst _hoisted_6 = {\n  class: \"current-username\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UserNameInput = _resolveComponent(\"UserNameInput\");\n  const _component_ThemeSelector = _resolveComponent(\"ThemeSelector\");\n  const _component_MessageList = _resolveComponent(\"MessageList\");\n  const _component_MessageInput = _resolveComponent(\"MessageInput\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 用户名输入界面，当用户未设置昵称时显示 \"), !$data.username ? (_openBlock(), _createBlock(_component_UserNameInput, {\n    key: 0,\n    onSetUsername: $options.setUsername\n  }, null, 8 /* PROPS */, [\"onSetUsername\"])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 聊天界面，当用户已设置昵称时显示 \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"header\", _hoisted_3, [_cache[1] || (_cache[1] = _createElementVNode(\"h1\", {\n    class: \"chat-title\"\n  }, \"Discord风格聊天室\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_ThemeSelector, {\n    onThemeChanged: $options.onThemeChanged\n  }, null, 8 /* PROPS */, [\"onThemeChanged\"]), _createElementVNode(\"div\", _hoisted_5, [_cache[0] || (_cache[0] = _createTextVNode(\" 当前用户: \")), _createElementVNode(\"span\", _hoisted_6, _toDisplayString($data.username), 1 /* TEXT */)])])]), _createVNode(_component_MessageList, {\n    messages: $data.messages\n  }, null, 8 /* PROPS */, [\"messages\"]), _createVNode(_component_MessageInput, {\n    onSendMessage: $options.sendMessage\n  }, null, 8 /* PROPS */, [\"onSendMessage\"])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","$data","username","_createBlock","_component_UserNameInput","key","onSetUsername","$options","setUsername","_Fragment","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_createVNode","_component_ThemeSelector","onThemeChanged","_hoisted_5","_createTextVNode","_hoisted_6","_toDisplayString","_component_MessageList","messages","_component_MessageInput","onSendMessage","sendMessage"],"sources":["C:\\Users\\Administrator\\Desktop\\discord-chat-app\\just-do-it\\src\\components\\chat\\ChatContainer.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <!-- 用户名输入界面，当用户未设置昵称时显示 -->\r\n    <UserNameInput \r\n      v-if=\"!username\" \r\n      @set-username=\"setUsername\" \r\n    />\r\n    \r\n    <!-- 聊天界面，当用户已设置昵称时显示 -->\r\n    <div v-else class=\"chat-interface\">\r\n      <header class=\"chat-header\">\r\n        <h1 class=\"chat-title\">Discord风格聊天室</h1>\r\n        <div class=\"user-info-container\">\r\n          <ThemeSelector @theme-changed=\"onThemeChanged\" />\r\n          <div class=\"user-info\">\r\n            当前用户: <span class=\"current-username\">{{ username }}</span>\r\n          </div>\r\n        </div>\r\n      </header>\r\n      \r\n      <MessageList :messages=\"messages\" />\r\n      \r\n      <MessageInput @send-message=\"sendMessage\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport UserNameInput from './UserNameInput.vue';\r\nimport MessageList from './MessageList.vue';\r\nimport MessageInput from './MessageInput.vue';\r\nimport ThemeSelector from './ThemeSelector.vue';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'ChatContainer',\r\n  components: {\r\n    UserNameInput,\r\n    MessageList,\r\n    MessageInput,\r\n    ThemeSelector\r\n  },\r\n  data() {\r\n    return {\r\n      username: '', // 用户昵称\r\n      messages: [], // 消息列表\r\n      apiUrl: 'http://localhost:3000/api/messages', // 修正API地址\r\n      pollingInterval: null, // 用于轮询的计时器\r\n      currentTheme: localStorage.getItem('chat-theme') || 'discord' // 当前主题\r\n    }\r\n  },\r\n  created() {\r\n    // 检查是否有保存的用户名\r\n    const savedUsername = localStorage.getItem('chat-username');\r\n    if (savedUsername) {\r\n      this.username = savedUsername;\r\n      this.fetchMessages(); // 获取消息\r\n      this.startPolling(); // 开始轮询获取新消息\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    // 组件销毁前清除轮询\r\n    this.stopPolling();\r\n  },\r\n  methods: {\r\n    // 设置用户名\r\n    setUsername(name) {\r\n      this.username = name;\r\n      localStorage.setItem('chat-username', name); // 保存用户名到本地存储\r\n      \r\n      this.fetchMessages(); // 获取消息\r\n      this.startPolling(); // 开始轮询获取新消息\r\n    },\r\n    \r\n    // 获取消息列表\r\n    async fetchMessages() {\r\n      try {\r\n        const response = await axios.get(this.apiUrl);\r\n        this.messages = response.data;\r\n      } catch (error) {\r\n        console.error('获取消息失败:', error);\r\n        // 开发阶段如果API未就绪，使用模拟数据\r\n        this.messages = [\r\n          { id: 1, user: 'System', content: '欢迎来到聊天室!', timestamp: new Date().toISOString() }\r\n        ];\r\n      }\r\n    },\r\n    \r\n    // 发送消息\r\n    async sendMessage(content) {\r\n      try {\r\n        const newMessage = {\r\n          user: this.username,\r\n          content: content\r\n        };\r\n        \r\n        // 发送消息到API\r\n        const response = await axios.post(this.apiUrl, newMessage);\r\n        \r\n        // 将新消息添加到消息列表\r\n        this.messages.push(response.data);\r\n      } catch (error) {\r\n        console.error('发送消息失败:', error);\r\n        \r\n        // 开发阶段如果API未就绪，模拟消息发送\r\n        const mockMessage = {\r\n          id: this.messages.length + 1,\r\n          user: this.username,\r\n          content: content,\r\n          timestamp: new Date().toISOString()\r\n        };\r\n        this.messages.push(mockMessage);\r\n      }\r\n    },\r\n    \r\n    // 开始轮询获取新消息\r\n    startPolling() {\r\n      this.pollingInterval = setInterval(() => {\r\n        this.fetchMessages();\r\n      }, 3000); // 每3秒轮询一次\r\n    },\r\n    \r\n    // 停止轮询\r\n    stopPolling() {\r\n      if (this.pollingInterval) {\r\n        clearInterval(this.pollingInterval);\r\n        this.pollingInterval = null;\r\n      }\r\n    },\r\n    \r\n    // 主题变更处理函数\r\n    onThemeChanged(theme) {\r\n      this.currentTheme = theme; // 更新当前主题\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container {\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: var(--chat-background); /* 使用主题变量 */\r\n  color: var(--text-color); /* 使用主题变量 */\r\n}\r\n\r\n.chat-interface {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n}\r\n\r\n.chat-header {\r\n  padding: 1rem;\r\n  background-color: var(--primary-color); /* 使用主题变量 */\r\n  color: var(--header-color); /* 使用主题变量 */\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.chat-title {\r\n  margin: 0;\r\n  font-size: 1.25rem;\r\n}\r\n\r\n.user-info-container {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.user-info {\r\n  font-size: 0.875rem;\r\n  margin-left: 1rem;\r\n}\r\n\r\n.current-username {\r\n  font-weight: bold;\r\n}\r\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;EAQbA,KAAK,EAAC;AAAgB;;EACxBA,KAAK,EAAC;AAAa;;EAEpBA,KAAK,EAAC;AAAqB;;EAEzBA,KAAK,EAAC;AAAW;;EACRA,KAAK,EAAC;AAAkB;;;;;;uBAd9CC,mBAAA,CAuBM,OAvBNC,UAuBM,GAtBJC,mBAAA,yBAA4B,E,CAEnBC,KAAA,CAAAC,QAAQ,I,cADjBC,YAAA,CAGEC,wBAAA;IANNC,GAAA;IAKOC,aAAY,EAAEC,QAAA,CAAAC;+DAIjBV,mBAAA,CAcMW,SAAA;IAvBVJ,GAAA;EAAA,IAQIL,mBAAA,sBAAyB,EACzBU,mBAAA,CAcM,OAdNC,UAcM,GAbJD,mBAAA,CAQS,UARTE,UAQS,G,0BAPPF,mBAAA,CAAwC;IAApCb,KAAK,EAAC;EAAY,GAAC,cAAY,sBACnCa,mBAAA,CAKM,OALNG,UAKM,GAJJC,YAAA,CAAiDC,wBAAA;IAAjCC,cAAa,EAAET,QAAA,CAAAS;EAAc,6CAC7CN,mBAAA,CAEM,OAFNO,UAEM,G,0BAhBhBC,gBAAA,CAciC,SACf,IAAAR,mBAAA,CAAoD,QAApDS,UAAoD,EAAAC,gBAAA,CAAlBnB,KAAA,CAAAC,QAAQ,iB,OAKtDY,YAAA,CAAoCO,sBAAA;IAAtBC,QAAQ,EAAErB,KAAA,CAAAqB;EAAQ,uCAEhCR,YAAA,CAA4CS,uBAAA;IAA7BC,aAAY,EAAEjB,QAAA,CAAAkB;EAAW,2C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}