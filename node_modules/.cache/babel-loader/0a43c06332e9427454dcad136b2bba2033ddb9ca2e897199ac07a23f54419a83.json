{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\n// 用户状态管理\nexport const userStatusStore = {\n  namespaced: true,\n  // 启用命名空间\n\n  state: {\n    status: 'online',\n    // 默认在线状态\n    lastActivity: Date.now(),\n    // 最后活动时间\n    onlineUsers: [],\n    // 在线用户列表\n    statusMap: {\n      // 状态映射\n      online: '在线',\n      away: '离开',\n      busy: '勿扰',\n      invisible: '隐身',\n      offline: '离线'\n    }\n  },\n  mutations: {\n    // 更新用户状态\n    UPDATE_STATUS(state, newStatus) {\n      state.status = newStatus;\n      state.lastActivity = Date.now();\n    },\n    // 更新最后活动时间\n    UPDATE_ACTIVITY(state) {\n      state.lastActivity = Date.now();\n    },\n    // 更新在线用户列表\n    UPDATE_ONLINE_USERS(state, users) {\n      state.onlineUsers = users;\n    }\n  },\n  actions: {\n    // 设置用户状态\n    async setStatus({\n      commit\n    }, status) {\n      try {\n        // 这里可以添加与后端的状态同步逻辑\n        commit('UPDATE_STATUS', status);\n\n        // 向服务器发送状态更新\n        await fetch('http://localhost:3001/api/users/status', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            status\n          })\n        });\n      } catch (error) {\n        console.error('更新状态失败:', error);\n      }\n    },\n    // 更新活动状态\n    updateActivity({\n      commit\n    }) {\n      commit('UPDATE_ACTIVITY');\n    },\n    // 获取在线用户列表\n    async fetchOnlineUsers({\n      commit\n    }) {\n      try {\n        const response = await fetch('http://localhost:3001/api/users/online');\n        const users = await response.json();\n        commit('UPDATE_ONLINE_USERS', users);\n      } catch (error) {\n        console.error('获取在线用户失败:', error);\n      }\n    }\n  },\n  getters: {\n    // 获取当前状态\n    currentStatus: state => state.status,\n    // 获取状态显示文本\n    statusText: state => state.statusMap[state.status] || '离线',\n    // 获取在线用户列表\n    onlineUsers: state => state.onlineUsers,\n    // 检查用户是否在线\n    isUserOnline: state => username => {\n      return state.onlineUsers.some(user => user.username === username);\n    }\n  }\n};","map":{"version":3,"names":["userStatusStore","namespaced","state","status","lastActivity","Date","now","onlineUsers","statusMap","online","away","busy","invisible","offline","mutations","UPDATE_STATUS","newStatus","UPDATE_ACTIVITY","UPDATE_ONLINE_USERS","users","actions","setStatus","commit","fetch","method","headers","body","JSON","stringify","error","console","updateActivity","fetchOnlineUsers","response","json","getters","currentStatus","statusText","isUserOnline","username","some","user"],"sources":["C:/Users/Administrator/Desktop/discord-chat-app/fack/just-do-it/src/store/userStatus.js"],"sourcesContent":["// 用户状态管理\r\nexport const userStatusStore = {\r\n  namespaced: true,  // 启用命名空间\r\n  \r\n  state: {\r\n    status: 'online',  // 默认在线状态\r\n    lastActivity: Date.now(),  // 最后活动时间\r\n    onlineUsers: [],  // 在线用户列表\r\n    statusMap: {  // 状态映射\r\n      online: '在线',\r\n      away: '离开',\r\n      busy: '勿扰',\r\n      invisible: '隐身',\r\n      offline: '离线'\r\n    }\r\n  },\r\n  \r\n  mutations: {\r\n    // 更新用户状态\r\n    UPDATE_STATUS(state, newStatus) {\r\n      state.status = newStatus;\r\n      state.lastActivity = Date.now();\r\n    },\r\n    \r\n    // 更新最后活动时间\r\n    UPDATE_ACTIVITY(state) {\r\n      state.lastActivity = Date.now();\r\n    },\r\n    \r\n    // 更新在线用户列表\r\n    UPDATE_ONLINE_USERS(state, users) {\r\n      state.onlineUsers = users;\r\n    },\r\n  },\r\n  \r\n  actions: {\r\n    // 设置用户状态\r\n    async setStatus({ commit }, status) {\r\n      try {\r\n        // 这里可以添加与后端的状态同步逻辑\r\n        commit('UPDATE_STATUS', status);\r\n        \r\n        // 向服务器发送状态更新\r\n        await fetch('http://localhost:3001/api/users/status', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ status })\r\n        });\r\n      } catch (error) {\r\n        console.error('更新状态失败:', error);\r\n      }\r\n    },\r\n    \r\n    // 更新活动状态\r\n    updateActivity({ commit }) {\r\n      commit('UPDATE_ACTIVITY');\r\n    },\r\n    \r\n    // 获取在线用户列表\r\n    async fetchOnlineUsers({ commit }) {\r\n      try {\r\n        const response = await fetch('http://localhost:3001/api/users/online');\r\n        const users = await response.json();\r\n        commit('UPDATE_ONLINE_USERS', users);\r\n      } catch (error) {\r\n        console.error('获取在线用户失败:', error);\r\n      }\r\n    }\r\n  },\r\n  \r\n  getters: {\r\n    // 获取当前状态\r\n    currentStatus: state => state.status,\r\n    \r\n    // 获取状态显示文本\r\n    statusText: state => state.statusMap[state.status] || '离线',\r\n    \r\n    // 获取在线用户列表\r\n    onlineUsers: state => state.onlineUsers,\r\n    \r\n    // 检查用户是否在线\r\n    isUserOnline: state => username => {\r\n      return state.onlineUsers.some(user => user.username === username);\r\n    }\r\n  }\r\n}; "],"mappings":";;AAAA;AACA,OAAO,MAAMA,eAAe,GAAG;EAC7BC,UAAU,EAAE,IAAI;EAAG;;EAEnBC,KAAK,EAAE;IACLC,MAAM,EAAE,QAAQ;IAAG;IACnBC,YAAY,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;IAAG;IAC3BC,WAAW,EAAE,EAAE;IAAG;IAClBC,SAAS,EAAE;MAAG;MACZC,MAAM,EAAE,IAAI;MACZC,IAAI,EAAE,IAAI;MACVC,IAAI,EAAE,IAAI;MACVC,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE;IACX;EACF,CAAC;EAEDC,SAAS,EAAE;IACT;IACAC,aAAaA,CAACb,KAAK,EAAEc,SAAS,EAAE;MAC9Bd,KAAK,CAACC,MAAM,GAAGa,SAAS;MACxBd,KAAK,CAACE,YAAY,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IACjC,CAAC;IAED;IACAW,eAAeA,CAACf,KAAK,EAAE;MACrBA,KAAK,CAACE,YAAY,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IACjC,CAAC;IAED;IACAY,mBAAmBA,CAAChB,KAAK,EAAEiB,KAAK,EAAE;MAChCjB,KAAK,CAACK,WAAW,GAAGY,KAAK;IAC3B;EACF,CAAC;EAEDC,OAAO,EAAE;IACP;IACA,MAAMC,SAASA,CAAC;MAAEC;IAAO,CAAC,EAAEnB,MAAM,EAAE;MAClC,IAAI;QACF;QACAmB,MAAM,CAAC,eAAe,EAAEnB,MAAM,CAAC;;QAE/B;QACA,MAAMoB,KAAK,CAAC,wCAAwC,EAAE;UACpDC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEzB;UAAO,CAAC;QACjC,CAAC,CAAC;MACJ,CAAC,CAAC,OAAO0B,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MACjC;IACF,CAAC;IAED;IACAE,cAAcA,CAAC;MAAET;IAAO,CAAC,EAAE;MACzBA,MAAM,CAAC,iBAAiB,CAAC;IAC3B,CAAC;IAED;IACA,MAAMU,gBAAgBA,CAAC;MAAEV;IAAO,CAAC,EAAE;MACjC,IAAI;QACF,MAAMW,QAAQ,GAAG,MAAMV,KAAK,CAAC,wCAAwC,CAAC;QACtE,MAAMJ,KAAK,GAAG,MAAMc,QAAQ,CAACC,IAAI,CAAC,CAAC;QACnCZ,MAAM,CAAC,qBAAqB,EAAEH,KAAK,CAAC;MACtC,CAAC,CAAC,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACnC;IACF;EACF,CAAC;EAEDM,OAAO,EAAE;IACP;IACAC,aAAa,EAAElC,KAAK,IAAIA,KAAK,CAACC,MAAM;IAEpC;IACAkC,UAAU,EAAEnC,KAAK,IAAIA,KAAK,CAACM,SAAS,CAACN,KAAK,CAACC,MAAM,CAAC,IAAI,IAAI;IAE1D;IACAI,WAAW,EAAEL,KAAK,IAAIA,KAAK,CAACK,WAAW;IAEvC;IACA+B,YAAY,EAAEpC,KAAK,IAAIqC,QAAQ,IAAI;MACjC,OAAOrC,KAAK,CAACK,WAAW,CAACiC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACF,QAAQ,KAAKA,QAAQ,CAAC;IACnE;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}