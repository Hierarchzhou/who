{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, createElementBlock as _createElementBlock, createVNode as _createVNode, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat-interface\"\n};\nconst _hoisted_3 = {\n  class: \"chat-header\"\n};\nconst _hoisted_4 = {\n  class: \"channel-info\"\n};\nconst _hoisted_5 = {\n  class: \"channel-hash\"\n};\nconst _hoisted_6 = {\n  class: \"channel-name\"\n};\nconst _hoisted_7 = {\n  class: \"channel-topic\"\n};\nconst _hoisted_8 = {\n  class: \"header-actions\"\n};\nconst _hoisted_9 = {\n  class: \"action-buttons\"\n};\nconst _hoisted_10 = {\n  class: \"icon\"\n};\nconst _hoisted_11 = [\"src\"];\nconst _hoisted_12 = {\n  class: \"current-username\"\n};\nconst _hoisted_13 = {\n  class: \"chat-main\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UserNameInput = _resolveComponent(\"UserNameInput\");\n  const _component_ThemeSelector = _resolveComponent(\"ThemeSelector\");\n  const _component_MessageList = _resolveComponent(\"MessageList\");\n  const _component_MessageInput = _resolveComponent(\"MessageInput\");\n  const _component_UserProfileEditor = _resolveComponent(\"UserProfileEditor\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Áî®Êà∑ÂêçËæìÂÖ•ÁïåÈù¢ÔºåÂΩìÁî®Êà∑Êú™ËÆæÁΩÆÊòµÁß∞Êó∂ÊòæÁ§∫ \"), !$setup.username ? (_openBlock(), _createBlock(_component_UserNameInput, {\n    key: 0,\n    onSetUsername: $options.setUsername\n  }, null, 8 /* PROPS */, [\"onSetUsername\"])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" ËÅäÂ§©ÁïåÈù¢ÔºåÂΩìÁî®Êà∑Â∑≤ËÆæÁΩÆÊòµÁß∞Êó∂ÊòæÁ§∫ \"), _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" È¢ëÈÅìÂ§¥ÈÉ® \"), _createElementVNode(\"header\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"span\", _hoisted_5, _toDisplayString($props.currentChannel?.type === 'voice' ? 'üîä' : '#'), 1 /* TEXT */), _createElementVNode(\"h2\", _hoisted_6, _toDisplayString($props.currentChannel?.name || 'general'), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_7, _toDisplayString($props.currentChannel?.topic || 'Ê¨¢ËøéÊù•Âà∞ËÅäÂ§©È¢ëÈÅìÔºÅ'), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [$props.currentChannel?.type === 'voice' ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    class: _normalizeClass([\"icon-button\", {\n      active: $setup.isInVoiceChannel\n    }]),\n    title: \"Âä†ÂÖ•ËØ≠Èü≥È¢ëÈÅì\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleVoiceChannel && $options.toggleVoiceChannel(...args))\n  }, [_createElementVNode(\"span\", _hoisted_10, _toDisplayString($setup.isInVoiceChannel ? 'üé§' : 'üîá'), 1 /* TEXT */)], 2 /* CLASS */)) : _createCommentVNode(\"v-if\", true), _cache[3] || (_cache[3] = _createElementVNode(\"button\", {\n    class: \"icon-button\",\n    title: \"Pin Messages\"\n  }, [_createElementVNode(\"span\", {\n    class: \"icon\"\n  }, \"üìå\")], -1 /* HOISTED */)), _cache[4] || (_cache[4] = _createElementVNode(\"button\", {\n    class: \"icon-button\",\n    title: \"Show Member List\"\n  }, [_createElementVNode(\"span\", {\n    class: \"icon\"\n  }, \"üë•\")], -1 /* HOISTED */)), _createVNode(_component_ThemeSelector)]), _createElementVNode(\"div\", {\n    class: \"user-info\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.openProfileEditor && $options.openProfileEditor(...args))\n  }, [_createElementVNode(\"div\", {\n    class: _normalizeClass([\"user-status-indicator\", {\n      online: true\n    }])\n  }), _createElementVNode(\"img\", {\n    src: $setup.userAvatar || $setup.getFallbackAvatarUrl(),\n    alt: \"Áî®Êà∑Â§¥ÂÉè\",\n    class: \"user-avatar\",\n    onError: _cache[1] || (_cache[1] = (...args) => $setup.handleAvatarError && $setup.handleAvatarError(...args))\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_11), _createElementVNode(\"span\", _hoisted_12, _toDisplayString($setup.username), 1 /* TEXT */)])])]), _createElementVNode(\"div\", _hoisted_13, [_createVNode(_component_MessageList, {\n    messages: $setup.filteredMessages,\n    currentUsername: $setup.username,\n    ref: \"messageList\",\n    onOpenProfileEditor: $options.openProfileEditor\n  }, null, 8 /* PROPS */, [\"messages\", \"currentUsername\", \"onOpenProfileEditor\"])]), _createVNode(_component_MessageInput, {\n    placeholder: $setup.getInputPlaceholder,\n    disabled: $setup.isInputDisabled,\n    onSendMessage: $options.sendMessage\n  }, null, 8 /* PROPS */, [\"placeholder\", \"disabled\", \"onSendMessage\"])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createCommentVNode(\" ‰∏™‰∫∫ËµÑÊñôÁºñËæëÂô® \"), _createVNode(_component_UserProfileEditor, {\n    isOpen: $data.showProfileEditor,\n    currentUserInfo: $data.currentUserInfo,\n    onClose: $options.closeProfileEditor,\n    onUpdateProfile: $options.updateProfile\n  }, null, 8 /* PROPS */, [\"isOpen\", \"currentUserInfo\", \"onClose\", \"onUpdateProfile\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","$setup","username","_createBlock","_component_UserNameInput","key","onSetUsername","$options","setUsername","_Fragment","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_toDisplayString","$props","currentChannel","type","_hoisted_6","name","_hoisted_7","topic","_hoisted_8","_hoisted_9","_normalizeClass","active","isInVoiceChannel","title","onClick","_cache","args","toggleVoiceChannel","_hoisted_10","_createVNode","_component_ThemeSelector","openProfileEditor","online","src","userAvatar","getFallbackAvatarUrl","alt","onError","handleAvatarError","_hoisted_11","_hoisted_12","_hoisted_13","_component_MessageList","messages","filteredMessages","currentUsername","ref","onOpenProfileEditor","_component_MessageInput","placeholder","getInputPlaceholder","disabled","isInputDisabled","onSendMessage","sendMessage","_component_UserProfileEditor","isOpen","$data","showProfileEditor","currentUserInfo","onClose","closeProfileEditor","onUpdateProfile","updateProfile"],"sources":["C:\\Users\\Administrator\\Desktop\\who\\src\\components\\chat\\ChatContainer.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <!-- Áî®Êà∑ÂêçËæìÂÖ•ÁïåÈù¢ÔºåÂΩìÁî®Êà∑Êú™ËÆæÁΩÆÊòµÁß∞Êó∂ÊòæÁ§∫ -->\r\n    <UserNameInput \r\n      v-if=\"!username\" \r\n      @set-username=\"setUsername\" \r\n    />\r\n    \r\n    <!-- ËÅäÂ§©ÁïåÈù¢ÔºåÂΩìÁî®Êà∑Â∑≤ËÆæÁΩÆÊòµÁß∞Êó∂ÊòæÁ§∫ -->\r\n    <div v-else class=\"chat-interface\">\r\n      <!-- È¢ëÈÅìÂ§¥ÈÉ® -->\r\n      <header class=\"chat-header\">\r\n        <div class=\"channel-info\">\r\n          <span class=\"channel-hash\">{{ currentChannel?.type === 'voice' ? 'üîä' : '#' }}</span>\r\n          <h2 class=\"channel-name\">{{ currentChannel?.name || 'general' }}</h2>\r\n          <div class=\"channel-topic\">\r\n            {{ currentChannel?.topic || 'Ê¨¢ËøéÊù•Âà∞ËÅäÂ§©È¢ëÈÅìÔºÅ' }}\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"header-actions\">\r\n          <div class=\"action-buttons\">\r\n            <button \r\n              v-if=\"currentChannel?.type === 'voice'\"\r\n              class=\"icon-button\" \r\n              :class=\"{ active: isInVoiceChannel }\"\r\n              title=\"Âä†ÂÖ•ËØ≠Èü≥È¢ëÈÅì\"\r\n              @click=\"toggleVoiceChannel\"\r\n            >\r\n              <span class=\"icon\">{{ isInVoiceChannel ? 'üé§' : 'üîá' }}</span>\r\n            </button>\r\n            <button class=\"icon-button\" title=\"Pin Messages\">\r\n              <span class=\"icon\">üìå</span>\r\n            </button>\r\n            <button class=\"icon-button\" title=\"Show Member List\">\r\n              <span class=\"icon\">üë•</span>\r\n            </button>\r\n            <ThemeSelector />\r\n          </div>\r\n          \r\n          <div class=\"user-info\" @click=\"openProfileEditor\">\r\n            <div class=\"user-status-indicator\" :class=\"{ online: true }\"></div>\r\n            <img \r\n              :src=\"userAvatar || getFallbackAvatarUrl()\" \r\n              alt=\"Áî®Êà∑Â§¥ÂÉè\" \r\n              class=\"user-avatar\"\r\n              @error=\"handleAvatarError\"\r\n            >\r\n            <span class=\"current-username\">{{ username }}</span>\r\n          </div>\r\n        </div>\r\n      </header>\r\n      \r\n      <div class=\"chat-main\">\r\n        <MessageList \r\n          :messages=\"filteredMessages\" \r\n          :currentUsername=\"username\" \r\n          ref=\"messageList\"\r\n          @open-profile-editor=\"openProfileEditor\"\r\n        />\r\n      </div>\r\n      \r\n      <MessageInput \r\n        :placeholder=\"getInputPlaceholder\"\r\n        :disabled=\"isInputDisabled\"\r\n        @send-message=\"sendMessage\" \r\n      />\r\n    </div>\r\n    \r\n    <!-- ‰∏™‰∫∫ËµÑÊñôÁºñËæëÂô® -->\r\n    <UserProfileEditor \r\n      :isOpen=\"showProfileEditor\"\r\n      :currentUserInfo=\"currentUserInfo\"\r\n      @close=\"closeProfileEditor\"\r\n      @update-profile=\"updateProfile\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport UserNameInput from './UserNameInput.vue';\r\nimport MessageList from './MessageList.vue';\r\nimport MessageInput from './MessageInput.vue';\r\nimport ThemeSelector from './ThemeSelector.vue';\r\nimport UserProfileEditor from './UserProfileEditor.vue';\r\nimport axios from 'axios';\r\nimport { handleAvatarError, getFallbackAvatarUrl } from '../../utils/avatarUtils';\r\nimport { useStore } from 'vuex';\r\nimport { computed, ref } from 'vue';\r\n\r\nexport default {\r\n  name: 'ChatContainer',\r\n  components: {\r\n    UserNameInput,\r\n    MessageList,\r\n    MessageInput,\r\n    ThemeSelector,\r\n    UserProfileEditor\r\n  },\r\n  props: {\r\n    currentUser: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    currentServer: {\r\n      type: Object,\r\n      default: () => ({\r\n        id: 'home',\r\n        name: 'general',\r\n        description: 'Welcome to the chat channel!'\r\n      })\r\n    },\r\n    currentChannel: {\r\n      type: Object,\r\n      default: null\r\n    }\r\n  },\r\n  emits: ['update-online-users', 'open-profile-editor'],\r\n  setup(props) {\r\n    const store = useStore();\r\n    const isInVoiceChannel = ref(false);\r\n    \r\n    // ‰ΩøÁî®ËÆ°ÁÆóÂ±ûÊÄß‰ªéstoreËé∑ÂèñÁî®Êà∑‰ø°ÊÅØ\r\n    const username = computed(() => store.getters['userProfile/username']);\r\n    const userAvatar = computed(() => store.getters['userProfile/avatar']);\r\n    \r\n    // ËøáÊª§ÂΩìÂâçÈ¢ëÈÅìÁöÑÊ∂àÊÅØ\r\n    const filteredMessages = computed(() => {\r\n      if (!props.currentChannel) return [];\r\n      return store.getters['messages/channelMessages'](props.currentChannel.id);\r\n    });\r\n\r\n    // Ëé∑ÂèñËæìÂÖ•Ê°ÜÂç†‰ΩçÁ¨¶ÊñáÊú¨\r\n    const getInputPlaceholder = computed(() => {\r\n      if (!props.currentChannel) return 'ÈÄâÊã©‰∏Ä‰∏™È¢ëÈÅìÂºÄÂßãËÅäÂ§©';\r\n      return `ÂèëÈÄÅÊ∂àÊÅØÂà∞ ${props.currentChannel.type === 'voice' ? 'üîä' : '#'}${props.currentChannel.name}`;\r\n    });\r\n\r\n    // Âà§Êñ≠ËæìÂÖ•Ê°ÜÊòØÂê¶Á¶ÅÁî®\r\n    const isInputDisabled = computed(() => {\r\n      return !props.currentChannel || \r\n             (props.currentChannel.type === 'voice' && !isInVoiceChannel.value);\r\n    });\r\n\r\n    return {\r\n      username,\r\n      userAvatar,\r\n      filteredMessages,\r\n      getInputPlaceholder,\r\n      isInputDisabled,\r\n      isInVoiceChannel,\r\n      getFallbackAvatarUrl,\r\n      handleAvatarError\r\n    };\r\n  },\r\n  data() {\r\n    return {\r\n      messages: [], // Ê∂àÊÅØÂàóË°®\r\n      onlineUsers: [], // Âú®Á∫øÁî®Êà∑ÂàóË°®\r\n      apiUrl: 'http://localhost:3001/api/messages', // Ê∂àÊÅØAPIÂú∞ÂùÄ\r\n      usersApiUrl: 'http://localhost:3001/api/users', // Áî®Êà∑APIÂú∞ÂùÄ\r\n      pollingInterval: null, // Áî®‰∫éËΩÆËØ¢Ê∂àÊÅØÁöÑËÆ°Êó∂Âô®\r\n      onlinePollingInterval: null, // Áî®‰∫éËΩÆËØ¢Âú®Á∫øÁî®Êà∑ÁöÑËÆ°Êó∂Âô®\r\n      currentTheme: localStorage.getItem('chat-theme') || 'discord', // ÂΩìÂâç‰∏ªÈ¢ò\r\n      showProfileEditor: false, // ÊòØÂê¶ÊòæÁ§∫‰∏™‰∫∫ËµÑÊñôÁºñËæëÂô®\r\n      currentUserInfo: {} // ÂΩìÂâçÁî®Êà∑‰ø°ÊÅØ\r\n    }\r\n  },\r\n  watch: {\r\n    // ÁõëÂê¨Âú®Á∫øÁî®Êà∑ÂèòÂåñÔºåÂêëÁà∂ÁªÑ‰ª∂ÂèëÈÄÅÊõ¥Êñ∞‰∫ã‰ª∂\r\n    onlineUsers: {\r\n      handler(newValue) {\r\n        this.$emit('update-online-users', newValue);\r\n      },\r\n      deep: true\r\n    },\r\n    // ÁõëÂê¨ÊúçÂä°Âô®ÂèòÂåñÔºåÈáçÊñ∞Âä†ËΩΩÊ∂àÊÅØ\r\n    'currentServer.id': {\r\n      handler(newServerId) {\r\n        if (newServerId) {\r\n          this.loadServerMessages(newServerId);\r\n        }\r\n      },\r\n      immediate: true\r\n    }\r\n  },\r\n  created() {\r\n    // ‰ªélocalStorageÊÅ¢Â§çÁî®Êà∑‰ø°ÊÅØ\r\n    const savedUsername = localStorage.getItem('chat-username');\r\n    const savedAvatar = localStorage.getItem('chat-avatar');\r\n    \r\n    if (savedUsername && savedAvatar) {\r\n      this.$store.dispatch('userProfile/updateProfile', {\r\n        username: savedUsername,\r\n        avatar: savedAvatar\r\n      });\r\n    }\r\n  },\r\n  mounted() {\r\n    // Â¶ÇÊûúÁî®Êà∑Â∑≤ÁôªÂΩïÔºåËé∑ÂèñÊ∂àÊÅØÂíåÂú®Á∫øÁî®Êà∑\r\n    if (this.username) {\r\n      this.fetchMessages();\r\n      this.fetchOnlineUsers();\r\n      \r\n      // ËÆæÁΩÆËΩÆËØ¢\r\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\r\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\r\n    }\r\n    \r\n    // Â∫îÁî®‰øùÂ≠òÁöÑ‰∏ªÈ¢ò\r\n    document.body.classList.add(`theme-${this.currentTheme}`);\r\n  },\r\n  beforeUnmount() {\r\n    // Ê∏ÖÈô§ËΩÆËØ¢\r\n    clearInterval(this.pollingInterval);\r\n    clearInterval(this.onlinePollingInterval);\r\n  },\r\n  methods: {\r\n    // ËÆæÁΩÆÁî®Êà∑ÂêçÂíåÂ§¥ÂÉè\r\n    setUsername(userData) {\r\n      this.$store.dispatch('userProfile/updateProfile', userData);\r\n      \r\n      // ‰øùÂ≠òÂà∞localStorage\r\n      localStorage.setItem('chat-username', userData.username);\r\n      localStorage.setItem('chat-avatar', userData.avatar);\r\n      \r\n      // Ê≥®ÂÜåÁî®Êà∑\r\n      this.registerUser();\r\n      \r\n      // Ëé∑ÂèñÊ∂àÊÅØÂíåÂú®Á∫øÁî®Êà∑\r\n      this.fetchMessages();\r\n      this.fetchOnlineUsers();\r\n      \r\n      // ËÆæÁΩÆËΩÆËØ¢\r\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\r\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\r\n    },\r\n    \r\n    // Ê≥®ÂÜåÁî®Êà∑\r\n    async registerUser() {\r\n      try {\r\n        await axios.post(`${this.usersApiUrl}/register`, {\r\n          username: this.username,\r\n          avatar: this.userAvatar\r\n        });\r\n        console.log('Áî®Êà∑Ê≥®ÂÜåÊàêÂäü');\r\n      } catch (error) {\r\n        console.error('Áî®Êà∑Ê≥®ÂÜåÂ§±Ë¥•:', error);\r\n      }\r\n    },\r\n    \r\n    // Ëé∑ÂèñÊ∂àÊÅØ\r\n    async fetchMessages() {\r\n      try {\r\n        const response = await axios.get(this.apiUrl);\r\n        this.messages = response.data;\r\n        // ÊªöÂä®Âà∞Â∫ïÈÉ®\r\n        this.$nextTick(() => {\r\n          if (this.$refs.messageList) {\r\n            this.$refs.messageList.scrollToBottom();\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error('Ëé∑ÂèñÊ∂àÊÅØÂ§±Ë¥•:', error);\r\n        // ÂºÄÂèëÈò∂ÊÆµÂ¶ÇÊûúAPIÊú™Â∞±Áª™Ôºå‰ΩøÁî®Ê®°ÊãüÊï∞ÊçÆ\r\n        if (this.messages.length === 0) {\r\n          this.messages = [\r\n            { \r\n              id: 1, \r\n              sender: 'System', \r\n              content: 'Ê¨¢ËøéÊù•Âà∞ËÅäÂ§©ÂÆ§!', \r\n              timestamp: new Date().toISOString(),\r\n              avatar: '/avatars/default.png'\r\n            }\r\n          ];\r\n        }\r\n      }\r\n    },\r\n    \r\n    // Ëé∑ÂèñÂú®Á∫øÁî®Êà∑\r\n    async fetchOnlineUsers() {\r\n      try {\r\n        const response = await axios.get(`${this.usersApiUrl}/online`);\r\n        this.onlineUsers = response.data;\r\n      } catch (error) {\r\n        console.error('Ëé∑ÂèñÂú®Á∫øÁî®Êà∑Â§±Ë¥•:', error);\r\n        // ÂºÄÂèëÈò∂ÊÆµÂ¶ÇÊûúAPIÊú™Â∞±Áª™Ôºå‰ΩøÁî®Ê®°ÊãüÊï∞ÊçÆ\r\n        if (this.onlineUsers.length === 0) {\r\n          this.onlineUsers = [\r\n            { username: this.username, avatar: this.userAvatar }\r\n          ];\r\n        }\r\n      }\r\n    },\r\n    \r\n    // Âä†ËΩΩÊúçÂä°Âô®ÁâπÂÆöÁöÑÊ∂àÊÅØ\r\n    loadServerMessages(serverId) {\r\n      const key = `server-messages-${serverId}`;\r\n      const savedMessages = localStorage.getItem(key);\r\n      this.messages = savedMessages ? JSON.parse(savedMessages) : [];\r\n    },\r\n\r\n    // ‰øùÂ≠òÊúçÂä°Âô®Ê∂àÊÅØ\r\n    saveServerMessages() {\r\n      const key = `server-messages-${this.currentServer.id}`;\r\n      localStorage.setItem(key, JSON.stringify(this.messages));\r\n    },\r\n\r\n    // ÂèëÈÄÅÊ∂àÊÅØ\r\n    async sendMessage(content) {\r\n      if (!content.trim() || !this.currentChannel) return;\r\n      \r\n      try {\r\n        const messageData = {\r\n          channelId: this.currentChannel.id,\r\n          content: content.trim(),\r\n          sender: this.username,\r\n          avatar: this.userAvatar,\r\n          timestamp: new Date().toISOString()\r\n        };\r\n\r\n        // ÂèëÈÄÅÊ∂àÊÅØÂà∞store\r\n        await this.$store.dispatch('messages/sendMessage', messageData);\r\n        \r\n        // ÊªöÂä®Âà∞Â∫ïÈÉ®\r\n        this.$nextTick(() => {\r\n          if (this.$refs.messageList) {\r\n            this.$refs.messageList.scrollToBottom();\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error('ÂèëÈÄÅÊ∂àÊÅØÂ§±Ë¥•:', error);\r\n      }\r\n    },\r\n    // ÊâìÂºÄ‰∏™‰∫∫ËµÑÊñôÁºñËæëÂô®\r\n    openProfileEditor() {\r\n      this.$emit('open-profile-editor');\r\n    },\r\n    // ÂÖ≥Èó≠‰∏™‰∫∫ËµÑÊñôÁºñËæëÂô®\r\n    closeProfileEditor() {\r\n      this.showProfileEditor = false;\r\n    },\r\n    // Êõ¥Êñ∞Áî®Êà∑‰ø°ÊÅØ\r\n    updateProfile(updatedInfo) {\r\n      // Êõ¥Êñ∞store‰∏≠ÁöÑÁî®Êà∑‰ø°ÊÅØ\r\n      this.$store.dispatch('userProfile/updateProfile', updatedInfo);\r\n      \r\n      // ‰øùÂ≠òÂà∞localStorage\r\n      localStorage.setItem('chat-username', updatedInfo.username);\r\n      localStorage.setItem('chat-avatar', updatedInfo.avatar);\r\n      \r\n      // Êõ¥Êñ∞Ê∂àÊÅØÂéÜÂè≤‰∏≠ÁöÑÂ§¥ÂÉè\r\n      this.messages = this.messages.map(message => {\r\n        if (message.sender === updatedInfo.username) {\r\n          return { ...message, avatar: updatedInfo.avatar }; // Êõ¥Êñ∞ÂèëÈÄÅËÄÖÂ§¥ÂÉè\r\n        }\r\n        return message;\r\n      });\r\n      \r\n      // Ê≥®ÂÜåÁî®Êà∑\r\n      this.registerUser();\r\n      \r\n      // Ëé∑ÂèñÊ∂àÊÅØÂíåÂú®Á∫øÁî®Êà∑\r\n      this.fetchMessages();\r\n      this.fetchOnlineUsers();\r\n      \r\n      // ËÆæÁΩÆËΩÆËØ¢\r\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\r\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\r\n    },\r\n    // ÂàáÊç¢ËØ≠Èü≥È¢ëÈÅìÁä∂ÊÄÅ\r\n    toggleVoiceChannel() {\r\n      if (this.currentChannel?.type !== 'voice') return;\r\n      this.isInVoiceChannel = !this.isInVoiceChannel;\r\n      // TODO: ÂÆûÁé∞ËØ≠Èü≥È¢ëÈÅìÁöÑÂä†ÂÖ•/ÈÄÄÂá∫ÈÄªËæë\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  background-color: var(--background-primary);\r\n}\r\n\r\n.chat-interface {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n}\r\n\r\n.chat-header {\r\n  height: 48px;\r\n  padding: 0 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  background-color: var(--background-primary);\r\n  border-bottom: 1px solid var(--background-tertiary);\r\n  flex-shrink: 0;\r\n}\r\n\r\n.channel-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.channel-hash {\r\n  color: var(--text-muted);\r\n  font-size: 24px;\r\n  font-weight: 300;\r\n}\r\n\r\n.channel-name {\r\n  color: var(--header-primary);\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n}\r\n\r\n.channel-topic {\r\n  color: var(--text-muted);\r\n  font-size: 14px;\r\n  margin-left: 12px;\r\n  padding-left: 12px;\r\n  border-left: 1px solid var(--background-accent);\r\n}\r\n\r\n.header-actions {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n}\r\n\r\n.action-buttons {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.icon-button {\r\n  width: 32px;\r\n  height: 32px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: none;\r\n  border: none;\r\n  color: var(--text-muted);\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  border-radius: 4px;\r\n}\r\n\r\n.icon-button:hover {\r\n  color: var(--text-normal);\r\n  background-color: var(--background-modifier-hover);\r\n}\r\n\r\n.icon-button.active {\r\n  color: var(--text-normal);\r\n  background-color: var(--background-modifier-selected);\r\n}\r\n\r\n.chat-main {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n}\r\n\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s ease;\r\n}\r\n\r\n.user-info:hover {\r\n  background-color: var(--background-modifier-hover);\r\n}\r\n\r\n.user-status-indicator {\r\n  width: 8px;\r\n  height: 8px;\r\n  border-radius: 50%;\r\n  background-color: var(--online-indicator);\r\n}\r\n\r\n.user-avatar {\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n}\r\n\r\n.current-username {\r\n  color: var(--header-primary);\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n}\r\n\r\n/* ÂìçÂ∫îÂºèÊ†∑Âºè */\r\n@media (max-width: 768px) {\r\n  .channel-topic {\r\n    display: none;\r\n  }\r\n  \r\n  .action-buttons {\r\n    display: none;\r\n  }\r\n  \r\n  .chat-header {\r\n    padding: 0 8px;\r\n  }\r\n  \r\n  .user-info {\r\n    padding: 4px;\r\n  }\r\n  \r\n  .current-username {\r\n    display: none;\r\n  }\r\n}\r\n</style> \r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}