{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"message-list\",\n  ref: \"messageList\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"welcome-message\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"messages-container\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"date-divider\"\n};\nconst _hoisted_5 = {\n  class: \"date-text\"\n};\nconst _hoisted_6 = {\n  key: 0,\n  class: \"message-avatar\"\n};\nconst _hoisted_7 = [\"src\", \"alt\", \"onClick\"];\nconst _hoisted_8 = {\n  class: \"message-content\"\n};\nconst _hoisted_9 = {\n  key: 0,\n  class: \"message-header\"\n};\nconst _hoisted_10 = {\n  class: \"timestamp\"\n};\nconst _hoisted_11 = {\n  key: 0,\n  class: \"inline-timestamp\"\n};\nconst _hoisted_12 = {\n  key: 2,\n  class: \"message-text\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_StickerMessage = _resolveComponent(\"StickerMessage\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_ctx.messages.length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _cache[1] || (_cache[1] = [_createElementVNode(\"div\", {\n    class: \"welcome-header\"\n  }, [_createElementVNode(\"h2\", null, \"欢迎来到 #general\"), _createElementVNode(\"p\", null, \"这是聊天室的开始。\")], -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.messages, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id || message.timestamp,\n      class: _normalizeClass([\"message-group\", {\n        'first-message': _ctx.isFirstMessage(message, index)\n      }])\n    }, [_createCommentVNode(\" 日期分隔线 \"), _ctx.shouldShowDateDivider(message, index) ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"span\", _hoisted_5, _toDisplayString(_ctx.formatDate(message.timestamp)), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 消息内容 \"), _createElementVNode(\"div\", {\n      class: _normalizeClass([\"message-item\", {\n        'compact': !_ctx.isFirstInGroup(message, index)\n      }])\n    }, [_ctx.isFirstInGroup(message, index) ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"img\", {\n      src: message.avatar || _ctx.defaultAvatar,\n      alt: message.sender,\n      class: _normalizeClass([\"avatar-img\", {\n        'clickable': message.sender === _ctx.currentUsername\n      }]),\n      onError: _cache[0] || (_cache[0] = (...args) => _ctx.handleAvatarError && _ctx.handleAvatarError(...args)),\n      onClick: $event => _ctx.handleAvatarClick(message.sender)\n    }, null, 42 /* CLASS, PROPS, NEED_HYDRATION */, _hoisted_7)])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_8, [_ctx.isFirstInGroup(message, index) ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_createElementVNode(\"span\", {\n      class: \"username\",\n      style: _normalizeStyle({\n        color: _ctx.getUsernameColor(message.sender)\n      })\n    }, _toDisplayString(message.sender), 5 /* TEXT, STYLE */), _createElementVNode(\"span\", _hoisted_10, _toDisplayString(_ctx.formatMessageTime(message.timestamp)), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", {\n      class: _normalizeClass([\"message-body\", {\n        'with-timestamp': !_ctx.isFirstInGroup(message, index)\n      }])\n    }, [!_ctx.isFirstInGroup(message, index) ? (_openBlock(), _createElementBlock(\"span\", _hoisted_11, _toDisplayString(_ctx.formatMessageTime(message.timestamp)), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _ctx.isSticker(message.content) ? (_openBlock(), _createBlock(_component_StickerMessage, {\n      key: 1,\n      \"sticker-id\": _ctx.extractStickerId(message.content)\n    }, null, 8 /* PROPS */, [\"sticker-id\"])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_12, _toDisplayString(message.content), 1 /* TEXT */))], 2 /* CLASS */)])], 2 /* CLASS */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))]))], 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["class","ref","key","_createElementBlock","_hoisted_1","_ctx","messages","length","_hoisted_2","_cache","_createElementVNode","_hoisted_3","_Fragment","_renderList","message","index","id","timestamp","_normalizeClass","isFirstMessage","_createCommentVNode","shouldShowDateDivider","_hoisted_4","_hoisted_5","_toDisplayString","formatDate","isFirstInGroup","_hoisted_6","src","avatar","defaultAvatar","alt","sender","currentUsername","onError","args","handleAvatarError","onClick","$event","handleAvatarClick","_hoisted_7","_hoisted_8","_hoisted_9","style","_normalizeStyle","color","getUsernameColor","_hoisted_10","formatMessageTime","_hoisted_11","isSticker","content","_createBlock","_component_StickerMessage","extractStickerId","_hoisted_12"],"sources":["C:\\Users\\Administrator\\Desktop\\who\\src\\components\\chat\\MessageList.vue"],"sourcesContent":["<template>\r\n  <div class=\"message-list\" ref=\"messageList\">\r\n    <div v-if=\"messages.length === 0\" class=\"welcome-message\">\r\n      <div class=\"welcome-header\">\r\n        <h2>欢迎来到 #general</h2>\r\n        <p>这是聊天室的开始。</p>\r\n      </div>\r\n    </div>\r\n    <div v-else class=\"messages-container\">\r\n      <div \r\n        v-for=\"(message, index) in messages\" \r\n        :key=\"message.id || message.timestamp\" \r\n        class=\"message-group\"\r\n        :class=\"{ 'first-message': isFirstMessage(message, index) }\"\r\n      >\r\n        <!-- 日期分隔线 -->\r\n        <div v-if=\"shouldShowDateDivider(message, index)\" class=\"date-divider\">\r\n          <span class=\"date-text\">{{ formatDate(message.timestamp) }}</span>\r\n        </div>\r\n        \r\n        <!-- 消息内容 -->\r\n        <div class=\"message-item\" :class=\"{ 'compact': !isFirstInGroup(message, index) }\">\r\n          <div class=\"message-avatar\" v-if=\"isFirstInGroup(message, index)\">\r\n            <img \r\n              :src=\"message.avatar || defaultAvatar\" \r\n              :alt=\"message.sender\" \r\n              class=\"avatar-img\" \r\n              @error=\"handleAvatarError\"\r\n              @click=\"handleAvatarClick(message.sender)\"\r\n              :class=\"{ 'clickable': message.sender === currentUsername }\"\r\n            />\r\n          </div>\r\n          <div class=\"message-content\">\r\n            <div class=\"message-header\" v-if=\"isFirstInGroup(message, index)\">\r\n              <span \r\n                class=\"username\"\r\n                :style=\"{ color: getUsernameColor(message.sender) }\"\r\n              >{{ message.sender }}</span>\r\n              <span class=\"timestamp\">{{ formatMessageTime(message.timestamp) }}</span>\r\n            </div>\r\n            <div class=\"message-body\" :class=\"{ 'with-timestamp': !isFirstInGroup(message, index) }\">\r\n              <span v-if=\"!isFirstInGroup(message, index)\" class=\"inline-timestamp\">\r\n                {{ formatMessageTime(message.timestamp) }}\r\n              </span>\r\n              <template v-if=\"isSticker(message.content)\">\r\n                <StickerMessage :sticker-id=\"extractStickerId(message.content)\" />\r\n              </template>\r\n              <template v-else>\r\n                <div class=\"message-text\">{{ message.content }}</div>\r\n              </template>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent, computed, ref } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport StickerMessage from './StickerMessage.vue'\r\nimport { formatTimestamp } from '@/utils/time'\r\n\r\nexport default defineComponent({\r\n  name: 'MessageList',\r\n  components: {\r\n    StickerMessage\r\n  },\r\n  props: {\r\n    messages: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    currentUsername: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  emits: ['open-profile-editor'],\r\n  setup(props, { emit }) {\r\n    const store = useStore()\r\n    const defaultAvatar = 'https://api.dicebear.com/7.x/bottts/svg'\r\n    const messageList = ref(null)\r\n    \r\n    // 获取当前状态，使用userProfile store\r\n    const userStatus = computed(() => store.getters['userProfile/status'])\r\n\r\n    const handleAvatarError = (event) => {\r\n      event.target.src = defaultAvatar\r\n    }\r\n\r\n    const handleAvatarClick = (sender) => {\r\n      if (sender === props.currentUsername) {\r\n        emit('open-profile-editor')\r\n      }\r\n    }\r\n\r\n    const isSticker = (content) => {\r\n      return typeof content === 'string' && content.startsWith('[sticker:') && content.endsWith(']')\r\n    }\r\n\r\n    const extractStickerId = (content) => {\r\n      if (!content) return null\r\n      const match = content.match(/\\[sticker:(.+?)\\]/)\r\n      return match ? match[1] : null\r\n    }\r\n\r\n    const scrollToBottom = () => {\r\n      if (messageList.value) {\r\n        messageList.value.scrollTop = messageList.value.scrollHeight\r\n      }\r\n    }\r\n\r\n    // 生成一致的用户名颜色\r\n    const getUsernameColor = (username) => {\r\n      const colors = [\r\n        '#1abc9c', '#2ecc71', '#3498db', '#9b59b6', '#e91e63',\r\n        '#f1c40f', '#e67e22', '#e74c3c', '#95a5a6', '#607d8b'\r\n      ]\r\n      let hash = 0\r\n      for (let i = 0; i < username.length; i++) {\r\n        hash = username.charCodeAt(i) + ((hash << 5) - hash)\r\n      }\r\n      return colors[Math.abs(hash) % colors.length]\r\n    }\r\n\r\n    // 检查是否是新的一天\r\n    const shouldShowDateDivider = (message, index) => {\r\n      if (index === 0) return true\r\n      const prevMessage = props.messages[index - 1]\r\n      const prevDate = new Date(prevMessage.timestamp).toLocaleDateString()\r\n      const currentDate = new Date(message.timestamp).toLocaleDateString()\r\n      return prevDate !== currentDate\r\n    }\r\n\r\n    // 格式化日期\r\n    const formatDate = (timestamp) => {\r\n      return new Date(timestamp).toLocaleDateString('zh-CN', {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric'\r\n      })\r\n    }\r\n\r\n    // 格式化消息时间\r\n    const formatMessageTime = (timestamp) => {\r\n      return new Date(timestamp).toLocaleTimeString('zh-CN', {\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      })\r\n    }\r\n\r\n    // 检查是否是组中的第一条消息\r\n    const isFirstInGroup = (message, index) => {\r\n      if (index === 0) return true\r\n      const prevMessage = props.messages[index - 1]\r\n      const timeDiff = new Date(message.timestamp) - new Date(prevMessage.timestamp)\r\n      return prevMessage.sender !== message.sender || timeDiff > 5 * 60 * 1000 // 5分钟间隔\r\n    }\r\n\r\n    // 检查是否是新的消息组\r\n    const isFirstMessage = (message, index) => {\r\n      return index === 0 || shouldShowDateDivider(message, index)\r\n    }\r\n\r\n    return {\r\n      defaultAvatar,\r\n      userStatus,\r\n      handleAvatarError,\r\n      handleAvatarClick,\r\n      formatTime: formatTimestamp,\r\n      isSticker,\r\n      extractStickerId,\r\n      scrollToBottom,\r\n      messageList,\r\n      getUsernameColor,\r\n      shouldShowDateDivider,\r\n      formatDate,\r\n      formatMessageTime,\r\n      isFirstInGroup,\r\n      isFirstMessage\r\n    }\r\n  },\r\n  watch: {\r\n    messages: {\r\n      handler() {\r\n        this.scrollToBottom()\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n  mounted() {\r\n    this.scrollToBottom()\r\n  }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.message-list {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 1rem 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: var(--background-primary);\r\n}\r\n\r\n.welcome-message {\r\n  padding: 48px 16px;\r\n  text-align: center;\r\n}\r\n\r\n.welcome-header {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.welcome-header h2 {\r\n  color: var(--header-primary);\r\n  font-size: 32px;\r\n  font-weight: 700;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.welcome-header p {\r\n  color: var(--text-normal);\r\n  font-size: 16px;\r\n}\r\n\r\n.messages-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n  padding: 0 16px;\r\n}\r\n\r\n.message-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 2px;\r\n}\r\n\r\n.date-divider {\r\n  margin: 24px 0 8px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.date-divider::before,\r\n.date-divider::after {\r\n  content: '';\r\n  height: 1px;\r\n  flex: 1;\r\n  background-color: var(--background-accent);\r\n}\r\n\r\n.date-text {\r\n  color: var(--text-muted);\r\n  font-size: 12px;\r\n  font-weight: 600;\r\n  text-transform: uppercase;\r\n  padding: 0 8px;\r\n}\r\n\r\n.message-item {\r\n  display: flex;\r\n  gap: 16px;\r\n  padding: 2px 0;\r\n  position: relative;\r\n}\r\n\r\n.message-item:hover {\r\n  background-color: var(--background-secondary);\r\n}\r\n\r\n.message-item.compact {\r\n  margin-left: 56px;\r\n}\r\n\r\n.message-avatar {\r\n  width: 40px;\r\n  height: 40px;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.avatar-img {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n  transition: opacity 0.2s ease;\r\n}\r\n\r\n.avatar-img:hover {\r\n  opacity: 0.8;\r\n}\r\n\r\n.message-content {\r\n  flex: 1;\r\n  min-width: 0;\r\n}\r\n\r\n.message-header {\r\n  display: flex;\r\n  align-items: baseline;\r\n  gap: 8px;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.username {\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n}\r\n\r\n.username:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n.timestamp {\r\n  color: var(--text-muted);\r\n  font-size: 12px;\r\n}\r\n\r\n.message-body {\r\n  color: var(--text-normal);\r\n  font-size: 16px;\r\n  line-height: 1.375;\r\n  white-space: pre-wrap;\r\n  word-wrap: break-word;\r\n}\r\n\r\n.message-body.with-timestamp {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n.inline-timestamp {\r\n  color: var(--text-muted);\r\n  font-size: 12px;\r\n  margin-top: 3px;\r\n  opacity: 0;\r\n}\r\n\r\n.message-item:hover .inline-timestamp {\r\n  opacity: 1;\r\n}\r\n\r\n.message-text {\r\n  flex: 1;\r\n}\r\n\r\n/* 响应式样式 */\r\n@media (max-width: 768px) {\r\n  .message-list {\r\n    padding: 8px 0;\r\n  }\r\n\r\n  .messages-container {\r\n    padding: 0 8px;\r\n  }\r\n\r\n  .message-item.compact {\r\n    margin-left: 40px;\r\n  }\r\n\r\n  .message-avatar {\r\n    width: 32px;\r\n    height: 32px;\r\n  }\r\n\r\n  .avatar-img {\r\n    width: 32px;\r\n    height: 32px;\r\n  }\r\n\r\n  .username {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .message-body {\r\n    font-size: 14px;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}