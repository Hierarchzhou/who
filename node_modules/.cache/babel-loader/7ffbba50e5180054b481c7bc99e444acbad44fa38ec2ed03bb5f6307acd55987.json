{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withModifiers as _withModifiers, withKeys as _withKeys, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"message-input-container\"\n};\nconst _hoisted_2 = {\n  class: \"input-wrapper\"\n};\nconst _hoisted_3 = {\n  class: \"textarea-wrapper\"\n};\nconst _hoisted_4 = {\n  class: \"input-actions\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"sticker-picker-container\",\n  ref: \"stickerPicker\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_StickerPicker = _resolveComponent(\"StickerPicker\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" 上传按钮 \"), _cache[9] || (_cache[9] = _createElementVNode(\"button\", {\n    class: \"action-button\",\n    title: \"上传文件\"\n  }, [_createElementVNode(\"span\", {\n    class: \"icon\"\n  }, \"➕\")], -1 /* HOISTED */)), _createCommentVNode(\" 输入框 \"), _createElementVNode(\"div\", _hoisted_3, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.message = $event),\n    onKeydown: _cache[1] || (_cache[1] = _withKeys(_withModifiers((...args) => $options.sendMessage && $options.sendMessage(...args), [\"prevent\"]), [\"enter\"])),\n    placeholder: \"发送消息到 #general\",\n    class: \"message-input\",\n    ref: \"messageInput\",\n    rows: \"1\",\n    onInput: _cache[2] || (_cache[2] = (...args) => $options.autoResize && $options.autoResize(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.message]])]), _createCommentVNode(\" 右侧按钮组 \"), _createElementVNode(\"div\", _hoisted_4, [_createCommentVNode(\" 表情按钮 \"), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.toggleStickerPicker && $options.toggleStickerPicker(...args)),\n    class: \"action-button\",\n    ref: \"emojiButton\",\n    title: \"选择表情\"\n  }, _cache[5] || (_cache[5] = [_createElementVNode(\"span\", {\n    class: \"icon\"\n  }, \"😊\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), _createCommentVNode(\" 礼物按钮 \"), _cache[7] || (_cache[7] = _createElementVNode(\"button\", {\n    class: \"action-button\",\n    title: \"发送礼物\"\n  }, [_createElementVNode(\"span\", {\n    class: \"icon\"\n  }, \"🎁\")], -1 /* HOISTED */)), _createCommentVNode(\" GIF按钮 \"), _cache[8] || (_cache[8] = _createElementVNode(\"button\", {\n    class: \"action-button\",\n    title: \"选择 GIF\"\n  }, [_createElementVNode(\"span\", {\n    class: \"icon\"\n  }, \"GIF\")], -1 /* HOISTED */)), _createCommentVNode(\" 发送按钮，仅在有内容时显示 \"), $data.message.trim() ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.sendMessage && $options.sendMessage(...args)),\n    class: \"action-button send-button\",\n    title: \"发送消息\"\n  }, _cache[6] || (_cache[6] = [_createElementVNode(\"span\", {\n    class: \"icon\"\n  }, \"📨\", -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true)])]), _createCommentVNode(\" 表情包选择器 \"), $data.showStickerPicker ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createVNode(_component_StickerPicker, {\n    onSelect: $options.onStickerSelect\n  }, null, 8 /* PROPS */, [\"onSelect\"])], 512 /* NEED_PATCH */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","title","_hoisted_3","_cache","$event","$data","message","onKeydown","_withKeys","_withModifiers","args","$options","sendMessage","placeholder","rows","onInput","autoResize","_hoisted_4","onClick","toggleStickerPicker","trim","showStickerPicker","_hoisted_5","_createVNode","_component_StickerPicker","onSelect","onStickerSelect"],"sources":["C:\\Users\\Administrator\\Desktop\\who\\src\\components\\chat\\MessageInput.vue"],"sourcesContent":["<template>\r\n  <div class=\"message-input-container\">\r\n    <div class=\"input-wrapper\">\r\n      <!-- 上传按钮 -->\r\n      <button class=\"action-button\" title=\"上传文件\">\r\n        <span class=\"icon\">➕</span>\r\n      </button>\r\n\r\n      <!-- 输入框 -->\r\n      <div class=\"textarea-wrapper\">\r\n        <textarea\r\n          v-model=\"message\"\r\n          @keydown.enter.prevent=\"sendMessage\"\r\n          placeholder=\"发送消息到 #general\"\r\n          class=\"message-input\"\r\n          ref=\"messageInput\"\r\n          rows=\"1\"\r\n          @input=\"autoResize\"\r\n        ></textarea>\r\n      </div>\r\n\r\n      <!-- 右侧按钮组 -->\r\n      <div class=\"input-actions\">\r\n        <!-- 表情按钮 -->\r\n        <button \r\n          @click=\"toggleStickerPicker\" \r\n          class=\"action-button\"\r\n          ref=\"emojiButton\"\r\n          title=\"选择表情\"\r\n        >\r\n          <span class=\"icon\">😊</span>\r\n        </button>\r\n\r\n        <!-- 礼物按钮 -->\r\n        <button class=\"action-button\" title=\"发送礼物\">\r\n          <span class=\"icon\">🎁</span>\r\n        </button>\r\n\r\n        <!-- GIF按钮 -->\r\n        <button class=\"action-button\" title=\"选择 GIF\">\r\n          <span class=\"icon\">GIF</span>\r\n        </button>\r\n\r\n        <!-- 发送按钮，仅在有内容时显示 -->\r\n        <button \r\n          v-if=\"message.trim()\"\r\n          @click=\"sendMessage\" \r\n          class=\"action-button send-button\"\r\n          title=\"发送消息\"\r\n        >\r\n          <span class=\"icon\">📨</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 表情包选择器 -->\r\n    <div \r\n      v-if=\"showStickerPicker\" \r\n      class=\"sticker-picker-container\" \r\n      ref=\"stickerPicker\"\r\n    >\r\n      <StickerPicker @select=\"onStickerSelect\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport StickerPicker from './StickerPicker.vue'\r\n\r\nexport default {\r\n  name: 'MessageInput',\r\n  components: {\r\n    StickerPicker\r\n  },\r\n  data() {\r\n    return {\r\n      message: '',  // 存储用户输入的消息\r\n      showStickerPicker: false,  // 控制表情选择器的显示/隐藏\r\n    }\r\n  },\r\n  methods: {\r\n    // 发送消息\r\n    sendMessage() {\r\n      if (this.message.trim()) {\r\n        this.$emit('send-message', this.message);\r\n        this.message = '';\r\n        this.$nextTick(() => {\r\n          this.$refs.messageInput.focus();\r\n          this.autoResize();\r\n        });\r\n      }\r\n    },\r\n    // 切换表情选择器的显示/隐藏\r\n    toggleStickerPicker(event) {\r\n      event.stopPropagation();\r\n      this.showStickerPicker = !this.showStickerPicker;\r\n    },\r\n    // 处理表情选择\r\n    onStickerSelect(sticker) {\r\n      // 发送带有表情包的消息\r\n      this.$emit('send-message', `[sticker:${sticker.id}]`);\r\n      this.showStickerPicker = false;\r\n    },\r\n    // 处理点击外部\r\n    handleClickOutside(e) {\r\n      if (this.showStickerPicker && \r\n          !this.$refs.stickerPicker?.contains(e.target) && \r\n          !this.$refs.emojiButton?.contains(e.target)) {\r\n        this.showStickerPicker = false;\r\n      }\r\n    },\r\n    // 自动调整文本框高度\r\n    autoResize() {\r\n      const textarea = this.$refs.messageInput;\r\n      textarea.style.height = 'auto';\r\n      textarea.style.height = textarea.scrollHeight + 'px';\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$refs.messageInput.focus();\r\n    document.addEventListener('click', this.handleClickOutside);\r\n  },\r\n  beforeUnmount() {\r\n    document.removeEventListener('click', this.handleClickOutside);\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.message-input-container {\r\n  padding: 0 16px 24px;\r\n  background-color: var(--background-primary);\r\n  position: relative;\r\n}\r\n\r\n.input-wrapper {\r\n  display: flex;\r\n  align-items: flex-end;\r\n  gap: 16px;\r\n  padding: 0 16px;\r\n  background-color: var(--background-secondary);\r\n  border-radius: 8px;\r\n  min-height: 44px;\r\n}\r\n\r\n.textarea-wrapper {\r\n  flex: 1;\r\n  min-height: 44px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.message-input {\r\n  width: 100%;\r\n  max-height: 50vh;\r\n  padding: 11px 0;\r\n  border: none;\r\n  background: transparent;\r\n  color: var(--text-normal);\r\n  font-family: inherit;\r\n  font-size: 16px;\r\n  line-height: 1.375;\r\n  resize: none;\r\n}\r\n\r\n.message-input:focus {\r\n  outline: none;\r\n}\r\n\r\n.message-input::placeholder {\r\n  color: var(--text-muted);\r\n}\r\n\r\n.input-actions {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  padding: 10px 0;\r\n}\r\n\r\n.action-button {\r\n  width: 32px;\r\n  height: 32px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border: none;\r\n  background: transparent;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  color: var(--interactive-normal);\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.action-button:hover {\r\n  color: var(--interactive-hover);\r\n  background-color: var(--background-accent);\r\n}\r\n\r\n.action-button .icon {\r\n  font-size: 20px;\r\n}\r\n\r\n.send-button {\r\n  color: var(--primary-color);\r\n}\r\n\r\n.send-button:hover {\r\n  color: var(--text-normal);\r\n  background-color: var(--primary-color);\r\n}\r\n\r\n/* 表情选择器容器 */\r\n.sticker-picker-container {\r\n  position: absolute;\r\n  bottom: 100%;\r\n  right: 16px;\r\n  margin-bottom: 8px;\r\n  width: 400px;\r\n  height: 400px;\r\n  background: var(--background-primary);\r\n  border-radius: 8px;\r\n  box-shadow: var(--elevation-stroke),\r\n              var(--elevation-high);\r\n  z-index: 1000;\r\n}\r\n\r\n/* 响应式样式 */\r\n@media (max-width: 768px) {\r\n  .message-input-container {\r\n    padding: 0 8px 16px;\r\n  }\r\n\r\n  .input-wrapper {\r\n    padding: 0 8px;\r\n  }\r\n\r\n  .action-button {\r\n    width: 28px;\r\n    height: 28px;\r\n  }\r\n\r\n  .action-button .icon {\r\n    font-size: 18px;\r\n  }\r\n\r\n  .message-input {\r\n    font-size: 14px;\r\n  }\r\n}\r\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAyB;;EAC7BA,KAAK,EAAC;AAAe;;EAOnBA,KAAK,EAAC;AAAkB;;EAaxBA,KAAK,EAAC;AAAe;;EAtBhCC,GAAA;EA0DMD,KAAK,EAAC,0BAA0B;EAChCE,GAAG,EAAC;;;;uBA1DRC,mBAAA,CA8DM,OA9DNC,UA8DM,GA7DJC,mBAAA,CAmDM,OAnDNC,UAmDM,GAlDJC,mBAAA,UAAa,E,0BACbF,mBAAA,CAES;IAFDL,KAAK,EAAC,eAAe;IAACQ,KAAK,EAAC;MAClCH,mBAAA,CAA2B;IAArBL,KAAK,EAAC;EAAM,GAAC,GAAC,E,sBAGtBO,mBAAA,SAAY,EACZF,mBAAA,CAUM,OAVNI,UAUM,G,gBATJJ,mBAAA,CAQY;IAlBpB,uBAAAK,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAWmBC,KAAA,CAAAC,OAAO,GAAAF,MAAA;IACfG,SAAO,EAAAJ,MAAA,QAAAA,MAAA,MAZlBK,SAAA,CAAAC,cAAA,KAAAC,IAAA,KAYkCC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IACnCG,WAAW,EAAC,gBAAgB;IAC5BpB,KAAK,EAAC,eAAe;IACrBE,GAAG,EAAC,cAAc;IAClBmB,IAAI,EAAC,GAAG;IACPC,OAAK,EAAAZ,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAK,UAAA,IAAAL,QAAA,CAAAK,UAAA,IAAAN,IAAA,CAAU;iEANTL,KAAA,CAAAC,OAAO,E,KAUpBN,mBAAA,WAAc,EACdF,mBAAA,CA8BM,OA9BNmB,UA8BM,GA7BJjB,mBAAA,UAAa,EACbF,mBAAA,CAOS;IANNoB,OAAK,EAAAf,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAQ,mBAAA,IAAAR,QAAA,CAAAQ,mBAAA,IAAAT,IAAA,CAAmB;IAC3BjB,KAAK,EAAC,eAAe;IACrBE,GAAG,EAAC,aAAa;IACjBM,KAAK,EAAC;gCAENH,mBAAA,CAA4B;IAAtBL,KAAK,EAAC;EAAM,GAAC,IAAE,oB,0BAGvBO,mBAAA,UAAa,E,0BACbF,mBAAA,CAES;IAFDL,KAAK,EAAC,eAAe;IAACQ,KAAK,EAAC;MAClCH,mBAAA,CAA4B;IAAtBL,KAAK,EAAC;EAAM,GAAC,IAAE,E,sBAGvBO,mBAAA,WAAc,E,0BACdF,mBAAA,CAES;IAFDL,KAAK,EAAC,eAAe;IAACQ,KAAK,EAAC;MAClCH,mBAAA,CAA6B;IAAvBL,KAAK,EAAC;EAAM,GAAC,KAAG,E,sBAGxBO,mBAAA,mBAAsB,EAEdK,KAAA,CAAAC,OAAO,CAACc,IAAI,M,cADpBxB,mBAAA,CAOS;IAnDjBF,GAAA;IA8CWwB,OAAK,EAAAf,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IACnBjB,KAAK,EAAC,2BAA2B;IACjCQ,KAAK,EAAC;gCAENH,mBAAA,CAA4B;IAAtBL,KAAK,EAAC;EAAM,GAAC,IAAE,oB,MAlD/BO,mBAAA,e,KAuDIA,mBAAA,YAAe,EAEPK,KAAA,CAAAgB,iBAAiB,I,cADzBzB,mBAAA,CAMM,OANN0B,UAMM,GADJC,YAAA,CAA2CC,wBAAA;IAA3BC,QAAM,EAAEd,QAAA,CAAAe;EAAe,sC,2BA7D7C1B,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}