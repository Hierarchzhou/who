{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport UserNameInput from './UserNameInput.vue';\nimport MessageList from './MessageList.vue';\nimport MessageInput from './MessageInput.vue';\nimport ThemeSelector from './ThemeSelector.vue';\nimport axios from 'axios';\nimport { handleAvatarError, getFallbackAvatarUrl } from '../../utils/avatarUtils';\nexport default {\n  name: 'ChatContainer',\n  components: {\n    UserNameInput,\n    MessageList,\n    MessageInput,\n    ThemeSelector\n  },\n  props: {\n    // 当前用户信息\n    currentUser: {\n      type: Object,\n      default: () => ({\n        username: '',\n        avatar: ''\n      })\n    }\n  },\n  data() {\n    return {\n      username: this.currentUser.username || '',\n      // 用户昵称\n      userAvatar: this.currentUser.avatar || '',\n      // 用户头像\n      messages: [],\n      // 消息列表\n      onlineUsers: [],\n      // 在线用户列表\n      apiUrl: 'http://localhost:3001/api/messages',\n      // 消息API地址\n      usersApiUrl: 'http://localhost:3001/api/users',\n      // 用户API地址\n      pollingInterval: null,\n      // 用于轮询消息的计时器\n      onlinePollingInterval: null,\n      // 用于轮询在线用户的计时器\n      currentTheme: localStorage.getItem('chat-theme') || 'discord' // 当前主题\n    };\n  },\n  watch: {\n    // 监听props变化\n    currentUser: {\n      handler(newValue) {\n        this.username = newValue.username || '';\n        this.userAvatar = newValue.avatar || '';\n      },\n      deep: true\n    },\n    // 监听在线用户变化，向父组件发送更新事件\n    onlineUsers: {\n      handler(newValue) {\n        this.$emit('update-online-users', newValue);\n      },\n      deep: true\n    }\n  },\n  created() {\n    // 从localStorage获取用户信息\n    const savedUsername = localStorage.getItem('chat-username');\n    const savedAvatar = localStorage.getItem('chat-avatar');\n    if (savedUsername && !this.username) {\n      this.username = savedUsername;\n    }\n    if (savedAvatar && !this.userAvatar) {\n      this.userAvatar = savedAvatar;\n    } else if (!this.userAvatar) {\n      // 设置默认头像\n      this.userAvatar = '/avatars/default.png';\n      localStorage.setItem('chat-avatar', this.userAvatar);\n    }\n\n    // 如果用户已登录，注册用户\n    if (this.username) {\n      this.registerUser();\n    }\n  },\n  mounted() {\n    // 如果用户已登录，获取消息和在线用户\n    if (this.username) {\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n\n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    }\n\n    // 应用保存的主题\n    document.body.classList.add(`theme-${this.currentTheme}`);\n  },\n  beforeUnmount() {\n    // 清除轮询\n    clearInterval(this.pollingInterval);\n    clearInterval(this.onlinePollingInterval);\n  },\n  methods: {\n    // 设置用户名和头像\n    setUsername(userData) {\n      this.username = userData.username;\n      this.userAvatar = userData.avatar;\n\n      // 保存到localStorage\n      localStorage.setItem('chat-username', this.username);\n      localStorage.setItem('chat-avatar', this.userAvatar);\n\n      // 注册用户\n      this.registerUser();\n\n      // 获取消息和在线用户\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n\n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    },\n    // 注册用户\n    async registerUser() {\n      try {\n        await axios.post(`${this.usersApiUrl}/register`, {\n          username: this.username,\n          avatar: this.userAvatar\n        });\n        console.log('用户注册成功');\n      } catch (error) {\n        console.error('用户注册失败:', error);\n      }\n    },\n    // 获取消息\n    async fetchMessages() {\n      try {\n        const response = await axios.get(this.apiUrl);\n        this.messages = response.data;\n        // 滚动到底部\n        this.$nextTick(() => {\n          if (this.$refs.messageList) {\n            this.$refs.messageList.scrollToBottom();\n          }\n        });\n      } catch (error) {\n        console.error('获取消息失败:', error);\n        // 开发阶段如果API未就绪，使用模拟数据\n        if (this.messages.length === 0) {\n          this.messages = [{\n            id: 1,\n            sender: 'System',\n            content: '欢迎来到聊天室!',\n            timestamp: new Date().toISOString(),\n            avatar: '/avatars/default.png'\n          }];\n        }\n      }\n    },\n    // 获取在线用户\n    async fetchOnlineUsers() {\n      try {\n        const response = await axios.get(`${this.usersApiUrl}/online`);\n        this.onlineUsers = response.data;\n      } catch (error) {\n        console.error('获取在线用户失败:', error);\n        // 开发阶段如果API未就绪，使用模拟数据\n        if (this.onlineUsers.length === 0) {\n          this.onlineUsers = [{\n            username: this.username,\n            avatar: this.userAvatar\n          }];\n        }\n      }\n    },\n    // 发送消息\n    async sendMessage(content) {\n      if (!content.trim()) return;\n      try {\n        const response = await axios.post(this.apiUrl, {\n          sender: this.username,\n          content: content,\n          avatar: this.userAvatar\n        });\n\n        // 将新消息添加到消息列表\n        this.messages.push(response.data);\n\n        // 滚动到底部\n        this.$nextTick(() => {\n          if (this.$refs.messageList) {\n            this.$refs.messageList.scrollToBottom();\n          }\n        });\n      } catch (error) {\n        console.error('发送消息失败:', error);\n\n        // 开发阶段如果API未就绪，使用模拟数据\n        const mockMessage = {\n          id: Date.now(),\n          sender: this.username,\n          content: content,\n          timestamp: new Date().toISOString(),\n          avatar: this.userAvatar\n        };\n        this.messages.push(mockMessage);\n\n        // 滚动到底部\n        this.$nextTick(() => {\n          if (this.$refs.messageList) {\n            this.$refs.messageList.scrollToBottom();\n          }\n        });\n      }\n    },\n    // 处理头像加载错误\n    handleAvatarError(event) {\n      handleAvatarError(event);\n    }\n  }\n};","map":{"version":3,"names":["UserNameInput","MessageList","MessageInput","ThemeSelector","axios","handleAvatarError","getFallbackAvatarUrl","name","components","props","currentUser","type","Object","default","username","avatar","data","userAvatar","messages","onlineUsers","apiUrl","usersApiUrl","pollingInterval","onlinePollingInterval","currentTheme","localStorage","getItem","watch","handler","newValue","deep","$emit","created","savedUsername","savedAvatar","setItem","registerUser","mounted","fetchMessages","fetchOnlineUsers","setInterval","document","body","classList","add","beforeUnmount","clearInterval","methods","setUsername","userData","post","console","log","error","response","get","$nextTick","$refs","messageList","scrollToBottom","length","id","sender","content","timestamp","Date","toISOString","sendMessage","trim","push","mockMessage","now","event"],"sources":["C:\\Users\\Administrator\\Desktop\\discord-chat-app\\fack\\just-do-it\\src\\components\\chat\\ChatContainer.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <!-- 用户名输入界面，当用户未设置昵称时显示 -->\r\n    <UserNameInput \r\n      v-if=\"!username\" \r\n      @set-username=\"setUsername\" \r\n    />\r\n    \r\n    <!-- 聊天界面，当用户已设置昵称时显示 -->\r\n    <div v-else class=\"chat-interface\">\r\n      <header class=\"chat-header\">\r\n        <h2 class=\"chat-title\">Vue聊天室</h2>\r\n        <div class=\"user-info-container\">\r\n          <ThemeSelector />\r\n          <div class=\"user-info\">\r\n            <img \r\n              :src=\"userAvatar || getFallbackAvatarUrl()\" \r\n              alt=\"用户头像\" \r\n              class=\"user-avatar\"\r\n              @error=\"handleAvatarError\"\r\n            >\r\n            <span class=\"current-username\">{{ username }}</span>\r\n          </div>\r\n        </div>\r\n      </header>\r\n      \r\n      <div class=\"chat-main\">\r\n        <MessageList \r\n          :messages=\"messages\" \r\n          :currentUsername=\"username\" \r\n          ref=\"messageList\" \r\n        />\r\n      </div>\r\n      \r\n      <MessageInput @send-message=\"sendMessage\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport UserNameInput from './UserNameInput.vue';\r\nimport MessageList from './MessageList.vue';\r\nimport MessageInput from './MessageInput.vue';\r\nimport ThemeSelector from './ThemeSelector.vue';\r\nimport axios from 'axios';\r\nimport { handleAvatarError, getFallbackAvatarUrl } from '../../utils/avatarUtils';\r\n\r\nexport default {\r\n  name: 'ChatContainer',\r\n  components: {\r\n    UserNameInput,\r\n    MessageList,\r\n    MessageInput,\r\n    ThemeSelector\r\n  },\r\n  props: {\r\n    // 当前用户信息\r\n    currentUser: {\r\n      type: Object,\r\n      default: () => ({\r\n        username: '',\r\n        avatar: ''\r\n      })\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      username: this.currentUser.username || '', // 用户昵称\r\n      userAvatar: this.currentUser.avatar || '', // 用户头像\r\n      messages: [], // 消息列表\r\n      onlineUsers: [], // 在线用户列表\r\n      apiUrl: 'http://localhost:3001/api/messages', // 消息API地址\r\n      usersApiUrl: 'http://localhost:3001/api/users', // 用户API地址\r\n      pollingInterval: null, // 用于轮询消息的计时器\r\n      onlinePollingInterval: null, // 用于轮询在线用户的计时器\r\n      currentTheme: localStorage.getItem('chat-theme') || 'discord', // 当前主题\r\n    }\r\n  },\r\n  watch: {\r\n    // 监听props变化\r\n    currentUser: {\r\n      handler(newValue) {\r\n        this.username = newValue.username || '';\r\n        this.userAvatar = newValue.avatar || '';\r\n      },\r\n      deep: true\r\n    },\r\n    // 监听在线用户变化，向父组件发送更新事件\r\n    onlineUsers: {\r\n      handler(newValue) {\r\n        this.$emit('update-online-users', newValue);\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n  created() {\r\n    // 从localStorage获取用户信息\r\n    const savedUsername = localStorage.getItem('chat-username');\r\n    const savedAvatar = localStorage.getItem('chat-avatar');\r\n    \r\n    if (savedUsername && !this.username) {\r\n      this.username = savedUsername;\r\n    }\r\n    \r\n    if (savedAvatar && !this.userAvatar) {\r\n      this.userAvatar = savedAvatar;\r\n    } else if (!this.userAvatar) {\r\n      // 设置默认头像\r\n      this.userAvatar = '/avatars/default.png';\r\n      localStorage.setItem('chat-avatar', this.userAvatar);\r\n    }\r\n    \r\n    // 如果用户已登录，注册用户\r\n    if (this.username) {\r\n      this.registerUser();\r\n    }\r\n  },\r\n  mounted() {\r\n    // 如果用户已登录，获取消息和在线用户\r\n    if (this.username) {\r\n      this.fetchMessages();\r\n      this.fetchOnlineUsers();\r\n      \r\n      // 设置轮询\r\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\r\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\r\n    }\r\n    \r\n    // 应用保存的主题\r\n    document.body.classList.add(`theme-${this.currentTheme}`);\r\n  },\r\n  beforeUnmount() {\r\n    // 清除轮询\r\n    clearInterval(this.pollingInterval);\r\n    clearInterval(this.onlinePollingInterval);\r\n  },\r\n  methods: {\r\n    // 设置用户名和头像\r\n    setUsername(userData) {\r\n      this.username = userData.username;\r\n      this.userAvatar = userData.avatar;\r\n      \r\n      // 保存到localStorage\r\n      localStorage.setItem('chat-username', this.username);\r\n      localStorage.setItem('chat-avatar', this.userAvatar);\r\n      \r\n      // 注册用户\r\n      this.registerUser();\r\n      \r\n      // 获取消息和在线用户\r\n      this.fetchMessages();\r\n      this.fetchOnlineUsers();\r\n      \r\n      // 设置轮询\r\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\r\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\r\n    },\r\n    \r\n    // 注册用户\r\n    async registerUser() {\r\n      try {\r\n        await axios.post(`${this.usersApiUrl}/register`, {\r\n          username: this.username,\r\n          avatar: this.userAvatar\r\n        });\r\n        console.log('用户注册成功');\r\n      } catch (error) {\r\n        console.error('用户注册失败:', error);\r\n      }\r\n    },\r\n    \r\n    // 获取消息\r\n    async fetchMessages() {\r\n      try {\r\n        const response = await axios.get(this.apiUrl);\r\n        this.messages = response.data;\r\n        // 滚动到底部\r\n        this.$nextTick(() => {\r\n          if (this.$refs.messageList) {\r\n            this.$refs.messageList.scrollToBottom();\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error('获取消息失败:', error);\r\n        // 开发阶段如果API未就绪，使用模拟数据\r\n        if (this.messages.length === 0) {\r\n          this.messages = [\r\n            { \r\n              id: 1, \r\n              sender: 'System', \r\n              content: '欢迎来到聊天室!', \r\n              timestamp: new Date().toISOString(),\r\n              avatar: '/avatars/default.png'\r\n            }\r\n          ];\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 获取在线用户\r\n    async fetchOnlineUsers() {\r\n      try {\r\n        const response = await axios.get(`${this.usersApiUrl}/online`);\r\n        this.onlineUsers = response.data;\r\n      } catch (error) {\r\n        console.error('获取在线用户失败:', error);\r\n        // 开发阶段如果API未就绪，使用模拟数据\r\n        if (this.onlineUsers.length === 0) {\r\n          this.onlineUsers = [\r\n            { username: this.username, avatar: this.userAvatar }\r\n          ];\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 发送消息\r\n    async sendMessage(content) {\r\n      if (!content.trim()) return;\r\n      \r\n      try {\r\n        const response = await axios.post(this.apiUrl, {\r\n          sender: this.username,\r\n          content: content,\r\n          avatar: this.userAvatar\r\n        });\r\n        \r\n        // 将新消息添加到消息列表\r\n        this.messages.push(response.data);\r\n        \r\n        // 滚动到底部\r\n        this.$nextTick(() => {\r\n          if (this.$refs.messageList) {\r\n            this.$refs.messageList.scrollToBottom();\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error('发送消息失败:', error);\r\n        \r\n        // 开发阶段如果API未就绪，使用模拟数据\r\n        const mockMessage = {\r\n          id: Date.now(),\r\n          sender: this.username,\r\n          content: content,\r\n          timestamp: new Date().toISOString(),\r\n          avatar: this.userAvatar\r\n        };\r\n        \r\n        this.messages.push(mockMessage);\r\n        \r\n        // 滚动到底部\r\n        this.$nextTick(() => {\r\n          if (this.$refs.messageList) {\r\n            this.$refs.messageList.scrollToBottom();\r\n          }\r\n        });\r\n      }\r\n    },\r\n    // 处理头像加载错误\r\n    handleAvatarError(event) {\r\n      handleAvatarError(event);\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container {\r\n  flex: 1;\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: var(--chat-background); /* 使用主题变量 */\r\n  color: var(--text-color); /* 使用主题变量 */\r\n  position: relative;\r\n  z-index: 1;\r\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);\r\n  background-image: var(--background-image); /* 使用主题变量中的背景图案 */\r\n  background-repeat: repeat;\r\n  background-size: 100px 100px; /* 设置背景图案大小 */\r\n}\r\n\r\n.chat-interface {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  backdrop-filter: blur(5px); /* 添加模糊效果 */\r\n}\r\n\r\n.chat-header {\r\n  padding: 1rem 1.5rem;\r\n  background-color: var(--primary-color); /* 使用主题变量 */\r\n  color: var(--header-color); /* 使用主题变量 */\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  box-shadow: var(--header-shadow);\r\n  position: relative;\r\n  z-index: 2;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1); /* 添加边框 */\r\n  background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.05), transparent); /* 添加渐变效果 */\r\n}\r\n\r\n.chat-title {\r\n  margin: 0;\r\n  font-size: 1.25rem;\r\n  font-weight: 600;\r\n  letter-spacing: 0.5px;\r\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2); /* 添加文字阴影 */\r\n}\r\n\r\n.user-info-container {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 1rem;\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  padding: 0.5rem 0.75rem;\r\n  border-radius: 2rem;\r\n  backdrop-filter: blur(5px);\r\n  border: 1px solid rgba(255, 255, 255, 0.05); /* 添加细微边框 */\r\n  transition: all 0.2s ease; /* 添加过渡效果 */\r\n}\r\n\r\n.user-info:hover {\r\n  background-color: rgba(255, 255, 255, 0.15); /* 悬停时背景变亮 */\r\n  transform: translateY(-1px); /* 悬停时轻微上移 */\r\n}\r\n\r\n.user-avatar {\r\n  width: 32px; /* 增加头像尺寸 */\r\n  height: 32px; /* 增加头像尺寸 */\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  border: var(--avatar-border, 1px solid rgba(255, 255, 255, 0.3));\r\n  box-shadow: var(--avatar-shadow, 0 2px 4px rgba(0, 0, 0, 0.2));\r\n  transition: transform 0.2s ease; /* 添加过渡效果 */\r\n}\r\n\r\n.user-avatar:hover {\r\n  transform: scale(1.1); /* 悬停时放大 */\r\n}\r\n\r\n.current-username {\r\n  margin-left: 0.5rem;\r\n  font-weight: 500;\r\n  color: var(--text-color);\r\n  mix-blend-mode: overlay;\r\n}\r\n\r\n.chat-main {\r\n  display: flex;\r\n  flex: 1;\r\n  overflow: hidden;\r\n  position: relative;\r\n  background-image: var(--background-image); /* 使用主题变量中的背景图案 */\r\n  background-repeat: repeat;\r\n  background-size: 100px 100px; /* 设置背景图案大小 */\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .chat-container {\r\n    height: auto;\r\n    flex: 1;\r\n  }\r\n}\r\n</style> \r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}