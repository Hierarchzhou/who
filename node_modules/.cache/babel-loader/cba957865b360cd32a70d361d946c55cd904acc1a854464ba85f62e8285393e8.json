{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"avatar-selector\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"avatar-preview-container\"\n};\nconst _hoisted_3 = [\"src\"];\nconst _hoisted_4 = {\n  key: 1,\n  class: \"empty-preview\"\n};\nconst _hoisted_5 = {\n  class: \"default-avatar\"\n};\nconst _hoisted_6 = [\"src\"];\nconst _hoisted_7 = {\n  class: \"style-selector\"\n};\nconst _hoisted_8 = {\n  class: \"style-categories\"\n};\nconst _hoisted_9 = [\"onClick\"];\nconst _hoisted_10 = {\n  class: \"avatar-grid\"\n};\nconst _hoisted_11 = [\"onClick\"];\nconst _hoisted_12 = [\"src\"];\nconst _hoisted_13 = {\n  class: \"avatar-option upload-option\"\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 头像预览区域 \"), _createElementVNode(\"div\", {\n    class: \"avatar-preview\",\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.triggerFileInput && _ctx.triggerFileInput(...args))\n  }, [_ctx.previewUrl ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"img\", {\n    src: _ctx.previewUrl,\n    alt: \"Avatar preview\",\n    class: \"preview-image\"\n  }, null, 8 /* PROPS */, _hoisted_3), _cache[3] || (_cache[3] = _createElementVNode(\"div\", {\n    class: \"avatar-hover-effect\"\n  }, [_createElementVNode(\"span\", {\n    class: \"change-text\"\n  }, \"更换头像\")], -1 /* HOISTED */))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"img\", {\n    src: _ctx.getRandomDefaultAvatarUrl(),\n    alt: \"Default avatar\"\n  }, null, 8 /* PROPS */, _hoisted_6)]), _cache[4] || (_cache[4] = _createElementVNode(\"span\", null, \"点击选择头像\", -1 /* HOISTED */))]))]), _createCommentVNode(\" 头像样式选择器 \"), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.avatarStyles, style => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: style,\n      class: _normalizeClass([\"style-button\", {\n        active: _ctx.selectedStyle === style\n      }]),\n      onClick: $event => _ctx.selectStyle(style)\n    }, _toDisplayString(_ctx.getStyleName(style)), 11 /* TEXT, CLASS, PROPS */, _hoisted_9);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" 头像网格 \"), _createElementVNode(\"div\", _hoisted_10, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.generatedAvatars, (avatar, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass([\"avatar-option\", {\n        selected: _ctx.selectedAvatar === avatar\n      }]),\n      onClick: $event => _ctx.selectAvatar(avatar)\n    }, [_createElementVNode(\"img\", {\n      src: avatar,\n      alt: \"Avatar option\"\n    }, null, 8 /* PROPS */, _hoisted_12), _cache[5] || (_cache[5] = _createElementVNode(\"div\", {\n      class: \"hover-effect\"\n    }, [_createElementVNode(\"span\", {\n      class: \"select-text\"\n    }, \"选择\")], -1 /* HOISTED */))], 10 /* CLASS, PROPS */, _hoisted_11);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" 刷新按钮 \"), _createElementVNode(\"div\", {\n    class: \"avatar-option refresh-option\",\n    onClick: _cache[1] || (_cache[1] = (...args) => _ctx.regenerateAvatars && _ctx.regenerateAvatars(...args))\n  }, _cache[6] || (_cache[6] = [_createElementVNode(\"div\", {\n    class: \"refresh-icon\"\n  }, [_createElementVNode(\"span\", null, \"↻\"), _createElementVNode(\"span\", {\n    class: \"refresh-text\"\n  }, \"换一批\")], -1 /* HOISTED */)])), _createCommentVNode(\" 自定义上传选项 \"), _createElementVNode(\"div\", _hoisted_13, [_cache[7] || (_cache[7] = _createElementVNode(\"label\", {\n    for: \"avatar-upload\",\n    class: \"upload-label\"\n  }, [_createElementVNode(\"div\", {\n    class: \"upload-icon\"\n  }, [_createElementVNode(\"span\", null, \"+\"), _createElementVNode(\"span\", {\n    class: \"upload-text\"\n  }, \"上传图片\")])], -1 /* HOISTED */)), _createElementVNode(\"input\", {\n    type: \"file\",\n    id: \"avatar-upload\",\n    onChange: _cache[2] || (_cache[2] = (...args) => _ctx.handleFileSelect && _ctx.handleFileSelect(...args)),\n    accept: \"image/*\",\n    style: {\n      \"display\": \"none\"\n    }\n  }, null, 32 /* NEED_HYDRATION */)])])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","onClick","_cache","args","_ctx","triggerFileInput","previewUrl","_hoisted_2","src","alt","_hoisted_3","_hoisted_4","_hoisted_5","getRandomDefaultAvatarUrl","_hoisted_6","_hoisted_7","_hoisted_8","_Fragment","_renderList","avatarStyles","style","_normalizeClass","active","selectedStyle","$event","selectStyle","getStyleName","_hoisted_9","_hoisted_10","generatedAvatars","avatar","index","selected","selectedAvatar","selectAvatar","_hoisted_12","_hoisted_11","regenerateAvatars","_hoisted_13","for","type","id","onChange","handleFileSelect","accept"],"sources":["C:\\Users\\Administrator\\Desktop\\discord-chat-app\\fack\\just-do-it\\src\\components\\chat\\AvatarSelector.vue"],"sourcesContent":["<template>\n  <div class=\"avatar-selector\">\n    <!-- 头像预览区域 -->\n    <div class=\"avatar-preview\" @click=\"triggerFileInput\">\n      <div v-if=\"previewUrl\" class=\"avatar-preview-container\">\n        <img :src=\"previewUrl\" alt=\"Avatar preview\" class=\"preview-image\" />\n        <div class=\"avatar-hover-effect\">\n          <span class=\"change-text\">更换头像</span>\n        </div>\n      </div>\n      <div v-else class=\"empty-preview\">\n        <div class=\"default-avatar\">\n          <img :src=\"getRandomDefaultAvatarUrl()\" alt=\"Default avatar\" />\n        </div>\n        <span>点击选择头像</span>\n      </div>\n    </div>\n\n    <!-- 头像样式选择器 -->\n    <div class=\"style-selector\">\n      <div class=\"style-categories\">\n        <button \n          v-for=\"style in avatarStyles\" \n          :key=\"style\"\n          class=\"style-button\"\n          :class=\"{ active: selectedStyle === style }\"\n          @click=\"selectStyle(style)\"\n        >\n          {{ getStyleName(style) }}\n        </button>\n      </div>\n    </div>\n\n    <!-- 头像网格 -->\n    <div class=\"avatar-grid\">\n      <div \n        v-for=\"(avatar, index) in generatedAvatars\" \n        :key=\"index\"\n        class=\"avatar-option\"\n        :class=\"{ selected: selectedAvatar === avatar }\"\n        @click=\"selectAvatar(avatar)\"\n      >\n        <img :src=\"avatar\" alt=\"Avatar option\" />\n        <div class=\"hover-effect\">\n          <span class=\"select-text\">选择</span>\n        </div>\n      </div>\n      \n      <!-- 刷新按钮 -->\n      <div class=\"avatar-option refresh-option\" @click=\"regenerateAvatars\">\n        <div class=\"refresh-icon\">\n          <span>↻</span>\n          <span class=\"refresh-text\">换一批</span>\n        </div>\n      </div>\n      \n      <!-- 自定义上传选项 -->\n      <div class=\"avatar-option upload-option\">\n        <label for=\"avatar-upload\" class=\"upload-label\">\n          <div class=\"upload-icon\">\n            <span>+</span>\n            <span class=\"upload-text\">上传图片</span>\n          </div>\n        </label>\n        <input \n          type=\"file\" \n          id=\"avatar-upload\" \n          @change=\"handleFileSelect\" \n          accept=\"image/*\"\n          style=\"display: none\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getRandomDefaultAvatarUrl, avatarStyles } from '../../utils/avatarUtils';\n\nexport default {\n  name: 'AvatarSelector',\n  data() {\n    return {\n      selectedStyle: avatarStyles[0],\n      selectedAvatar: '',\n      previewUrl: null,\n      generatedAvatars: [],\n      avatarStyles\n    }\n  },\n  created() {\n    this.generateAvatarSet();\n  },\n  methods: {\n    // 生成一组头像\n    generateAvatarSet() {\n      this.generatedAvatars = Array(8).fill(null).map(() => getRandomDefaultAvatarUrl());\n    },\n    \n    // 选择头像样式\n    selectStyle(style) {\n      this.selectedStyle = style;\n      this.generateAvatarSet();\n    },\n    \n    // 获取样式名称的中文显示\n    getStyleName(style) {\n      const styleNames = {\n        'micah': '简约',\n        'avataaars': '卡通',\n        'bottts': '机器人',\n        'personas': '像素',\n        'thumbs': '拇指',\n        'lorelei': '可爱',\n        'notionists': '商务',\n        'adventurer': '冒险',\n        'fun-emoji': '表情',\n        'big-smile': '微笑'\n      };\n      return styleNames[style] || style;\n    },\n    \n    // 选择头像\n    selectAvatar(avatar) {\n      this.selectedAvatar = avatar;\n      this.previewUrl = avatar;\n      this.$emit('avatar-selected', avatar);\n    },\n    \n    // 重新生成头像\n    regenerateAvatars() {\n      this.generateAvatarSet();\n    },\n    \n    // 处理文件选择\n    handleFileSelect(event) {\n      const file = event.target.files[0];\n      <input\n        type=\"file\"\n        ref=\"fileInput\"\n        @change=\"handleFileSelect\"\n        accept=\"image/*\"\n        style=\"display: none\"\n      />\n    </div>\n\n    <!-- 头像编辑器模态框 -->\n    <div v-if=\"showEditor\" class=\"editor-modal\">\n      <div class=\"editor-container\">\n        <Cropper\n          ref=\"cropper\"\n          class=\"cropper\"\n          :src=\"imageUrl\"\n          :stencil-props=\"{\n            aspectRatio: 1\n          }\"\n          @change=\"onChange\"\n        />\n        <div class=\"editor-controls\">\n          <div class=\"editor-buttons\">\n            <button @click=\"saveAvatar\" class=\"save-button\">保存</button>\n            <button @click=\"cancelEdit\" class=\"cancel-button\">取消</button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 预设头像选择区域 -->\n    <div class=\"preset-avatars\">\n      <h3>选择头像风格</h3>\n      <div class=\"avatar-grid\">\n        <div \n          v-for=\"style in avatarStyles\" \n          :key=\"style.id\"\n          class=\"preset-avatar-wrapper\"\n        >\n          <div\n            class=\"preset-avatar\"\n            :class=\"{ selected: selectedPreset === style.id }\"\n            :style=\"getAvatarStyle(style)\"\n            @click=\"selectPresetAvatar(style)\"\n          >\n            <span v-if=\"style.type === 'text'\">{{ getInitials(username) }}</span>\n            <img v-else-if=\"style.type === 'image'\" :src=\"style.imageUrl\" :alt=\"style.name\" />\n          </div>\n          <span class=\"preset-avatar-name\">{{ style.name }}</span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Cropper } from 'vue-advanced-cropper'\nimport 'vue-advanced-cropper/dist/style.css'\n\nexport default {\n  name: 'AvatarSelector',\n  components: {\n    Cropper\n  },\n  props: {\n    username: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      selectedFile: null,\n      previewUrl: null,\n      showEditor: false,\n      imageUrl: '',\n      selectedPreset: null,\n      avatarStyles: [\n        {\n          id: 'modern',\n          name: '现代简约',\n          type: 'text',\n          background: 'linear-gradient(135deg, #4A90E2, #67B8F7)',\n          color: '#FFFFFF'\n        },\n        {\n          id: 'nature',\n          name: '自然',\n          type: 'text',\n          background: 'linear-gradient(135deg, #4ECDC4, #7BE495)',\n          color: '#FFFFFF'\n        },\n        {\n          id: 'sunset',\n          name: '日落',\n          type: 'text',\n          background: 'linear-gradient(135deg, #FF6B6B, #FFD93D)',\n          color: '#FFFFFF'\n        },\n        {\n          id: 'ocean',\n          name: '海洋',\n          type: 'text',\n          background: 'linear-gradient(135deg, #45B7D1, #4ECDC4)',\n          color: '#FFFFFF'\n        },\n        {\n          id: 'forest',\n          name: '森林',\n          type: 'text',\n          background: 'linear-gradient(135deg, #8B7355, #A67F5D)',\n          color: '#FFFFFF'\n        },\n        {\n          id: 'galaxy',\n          name: '星空',\n          type: 'text',\n          background: 'linear-gradient(135deg, #8E44AD, #B056DB)',\n          color: '#FFFFFF'\n        }\n      ]\n    }\n  },\n  computed: {\n    defaultAvatarStyle() {\n      return {\n        background: 'linear-gradient(135deg, #4A90E2, #67B8F7)',\n        color: '#FFFFFF'\n      }\n    }\n  },\n  methods: {\n    // 获取用户名首字母\n    getInitials(name) {\n      if (!name) return '?'\n      return name.charAt(0).toUpperCase()\n    },\n\n    // 获取头像样式\n    getAvatarStyle(style) {\n      return {\n        background: style.background,\n        color: style.color\n      }\n    },\n\n    // 触发文件选择\n    triggerFileInput() {\n      this.$refs.fileInput.click()\n    },\n\n    // 处理文件选择\n    handleFileSelect(event) {\n      const file = event.target.files[0]\n      if (file && file.type.startsWith('image/')) {\n        this.selectedFile = file\n        this.selectedPreset = null\n        this.showEditor = true\n        this.imageUrl = URL.createObjectURL(file)\n      }\n    },\n\n    // 处理裁剪变化\n    onChange({ canvas }) {\n      if (canvas) {\n        this.previewUrl = canvas.toDataURL()\n      }\n    },\n\n    // 保存头像\n    async saveAvatar() {\n      if (this.previewUrl) {\n        this.showEditor = false\n        this.$emit('avatar-selected', this.previewUrl)\n      }\n    },\n\n    // 取消编辑\n    cancelEdit() {\n      this.showEditor = false\n      this.selectedFile = null\n      this.imageUrl = ''\n      if (!this.selectedPreset) {\n        this.previewUrl = null\n      }\n      if (this.$refs.fileInput) {\n        this.$refs.fileInput.value = ''\n      }\n    },\n\n    // 选择预设头像\n    selectPresetAvatar(style) {\n      this.selectedPreset = style.id\n      this.selectedFile = null\n      this.showEditor = false\n      this.previewUrl = null\n\n      // 生成头像的数据 URL\n      const avatarUrl = this.generateAvatarUrl(style)\n      this.$emit('avatar-selected', avatarUrl)\n    },\n\n    // 生成头像 URL\n    generateAvatarUrl(style) {\n      const canvas = document.createElement('canvas')\n      canvas.width = 200\n      canvas.height = 200\n      const ctx = canvas.getContext('2d')\n      \n      // 创建渐变背景\n      const gradient = ctx.createLinearGradient(0, 0, 200, 200)\n      if (style.background.includes('linear-gradient')) {\n        const colors = style.background.match(/#[A-Fa-f0-9]{6}/g)\n        if (colors && colors.length >= 2) {\n          gradient.addColorStop(0, colors[0])\n          gradient.addColorStop(1, colors[1])\n        }\n      }\n      \n      // 绘制圆形背景\n      ctx.beginPath()\n      ctx.arc(100, 100, 100, 0, Math.PI * 2)\n      ctx.fillStyle = gradient\n      ctx.fill()\n      \n      // 绘制文字\n      const text = this.getInitials(this.username)\n      ctx.fillStyle = style.color\n      ctx.font = 'bold 100px Arial'\n      ctx.textAlign = 'center'\n      ctx.textBaseline = 'middle'\n      ctx.fillText(text, 100, 100)\n      \n      return canvas.toDataURL()\n    }\n  }\n}\n</script>\n\n<style scoped>\n.avatar-selector {\n  width: 100%;\n  max-width: 500px;\n  padding: 1.5rem;\n  background-color: var(--input-background);\n  border-radius: var(--card-border-radius);\n  box-shadow: var(--message-shadow);\n}\n\n.avatar-preview {\n  width: 150px;\n  height: 150px;\n  margin: 0 auto 2rem;\n  border-radius: 25px;\n  overflow: hidden;\n  border: 3px dashed var(--primary-color);\n  background: rgba(255, 255, 255, 0.05);\n  backdrop-filter: blur(5px);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  position: relative;\n}\n\n.avatar-preview:hover {\n  border-color: var(--secondary-color);\n  transform: scale(1.02);\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);\n}\n\n.preview-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  transition: all 0.3s ease;\n}\n\n.preview-image:hover {\n  transform: scale(1.05);\n}\n\n.empty-preview {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  padding: 20px;\n  background: linear-gradient(\n    45deg,\n    rgba(var(--primary-color-rgb), 0.1),\n    rgba(var(--secondary-color-rgb), 0.1)\n  );\n  transition: all 0.3s ease;\n}\n\n.empty-preview span {\n  margin-top: 12px;\n  font-size: 1rem;\n  color: var(--text-color);\n  opacity: 0.9;\n  font-weight: 500;\n  transition: all 0.3s ease;\n}\n\n.empty-preview:hover span {\n  opacity: 1;\n  color: var(--primary-color);\n}\n\n.avatar-upload {\n  margin-bottom: 1.5rem;\n}\n\n.file-input {\n  display: none;\n}\n\n.editor-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.8);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n}\n\n.editor-container {\n  background-color: var(--chat-background);\n  padding: 2rem;\n  border-radius: var(--card-border-radius);\n  box-shadow: var(--message-shadow);\n  max-width: 90vw;\n  max-height: 90vh;\n  overflow: auto;\n}\n\n.editor-controls {\n  margin-top: 1.5rem;\n}\n\n.editor-buttons {\n  display: flex;\n  gap: 1rem;\n}\n\n.save-button,\n.cancel-button {\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: var(--card-border-radius);\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.save-button {\n  background-color: var(--primary-color);\n  color: white;\n}\n\n.save-button:hover {\n  background-color: var(--secondary-color);\n}\n\n.cancel-button {\n  background-color: var(--other-message-bg);\n  color: var(--text-color);\n}\n\n.cancel-button:hover {\n  background-color: var(--input-background);\n}\n\n.preset-avatars {\n  margin-top: 2rem;\n  background-color: rgba(0, 0, 0, 0.1);\n  border-radius: var(--card-border-radius);\n  padding: 1.5rem;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.preset-avatars h3 {\n  color: var(--text-color);\n  margin-bottom: 2rem;\n  font-size: 1.2rem;\n  text-align: center;\n  position: relative;\n  font-weight: 500;\n  letter-spacing: 0.5px;\n}\n\n.preset-avatars h3::after {\n  content: '';\n  position: absolute;\n  bottom: -0.75rem;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 50px;\n  height: 3px;\n  background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));\n  border-radius: 2px;\n}\n\n.avatar-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n  gap: 1.5rem;\n  padding: 1rem;\n}\n\n.preset-avatar-wrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n}\n\n.avatar-preview-container {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  overflow: hidden;\n}\n\n.avatar-hover-effect {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(\n    45deg,\n    rgba(var(--primary-color-rgb), 0.2),\n    rgba(var(--secondary-color-rgb), 0.2)\n  );\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.preset-avatar:hover .avatar-hover-effect {\n  opacity: 1;\n}\n\n.preset-avatar {\n  position: relative;\n  width: 80px;\n  height: 80px;\n  border-radius: 20px;\n  cursor: pointer;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  border: 3px solid transparent;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: rgba(255, 255, 255, 0.05);\n  backdrop-filter: blur(5px);\n}\n\n.preset-avatar:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);\n}\n\n.preset-avatar.selected {\n  border-color: var(--primary-color);\n  animation: selected-pulse 2s infinite;\n}\n\n.preset-avatar-name {\n  margin-top: 8px;\n  font-size: 0.9rem;\n  color: var(--text-color);\n  opacity: 0.9;\n  transition: all 0.3s ease;\n}\n\n.preset-avatar:hover + .preset-avatar-name {\n  opacity: 1;\n  color: var(--primary-color);\n}\n\n@keyframes selected-pulse {\n  0% {\n    box-shadow: 0 0 0 0 rgba(var(--primary-color-rgb), 0.4);\n  }\n  70% {\n    box-shadow: 0 0 0 10px rgba(var(--primary-color-rgb), 0);\n  }\n  100% {\n    box-shadow: 0 0 0 0 rgba(var(--primary-color-rgb), 0);\n  }\n}\n\n/* 响应式样式 */\n@media (max-width: 480px) {\n  .avatar-selector {\n    padding: 1rem;\n  }\n\n  .avatar-preview {\n    width: 120px;\n    height: 120px;\n  }\n\n  .avatar-grid {\n    grid-template-columns: repeat(3, 1fr);\n    gap: 1rem;\n  }\n\n  .preset-avatar {\n    width: 60px;\n    height: 60px;\n  }\n}\n\n.cropper {\n  width: 400px;\n  height: 400px;\n  background: var(--chat-background);\n}\n\n.custom-upload {\n  margin-top: 2rem;\n  text-align: center;\n}\n\n.upload-button {\n  padding: 0.75rem 1.5rem;\n  border: none;\n  border-radius: var(--card-border-radius);\n  cursor: pointer;\n  transition: all 0.2s ease;\n  background-color: var(--primary-color);\n  color: white;\n}\n\n.upload-button:hover {\n  background-color: var(--secondary-color);\n}\n\n.upload-icon {\n  margin-right: 0.5rem;\n}\n\n.zoom-slider {\n  width: 100%;\n}\n\n.default-avatar {\n  width: 100px;\n  height: 100px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 48px;\n  font-weight: bold;\n  margin-bottom: 12px;\n  transition: all 0.3s ease;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAiB;;EAD9BC,GAAA;EAI6BD,KAAK,EAAC;;mBAJnC;;EAAAC,GAAA;EAUkBD,KAAK,EAAC;;;EACXA,KAAK,EAAC;AAAgB;mBAXnC;;EAmBSA,KAAK,EAAC;AAAgB;;EACpBA,KAAK,EAAC;AAAkB;mBApBnC;;EAkCSA,KAAK,EAAC;AAAa;oBAlC5B;oBAAA;;EAyDWA,KAAK,EAAC;AAA6B;;uBAxD5CE,mBAAA,CAwEM,OAxENC,UAwEM,GAvEJC,mBAAA,YAAe,EACfC,mBAAA,CAaM;IAbDL,KAAK,EAAC,gBAAgB;IAAEM,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,IAAA,CAAAC,gBAAA,IAAAD,IAAA,CAAAC,gBAAA,IAAAF,IAAA,CAAgB;MACvCC,IAAA,CAAAE,UAAU,I,cAArBT,mBAAA,CAKM,OALNU,UAKM,GAJJP,mBAAA,CAAoE;IAA9DQ,GAAG,EAAEJ,IAAA,CAAAE,UAAU;IAAEG,GAAG,EAAC,gBAAgB;IAACd,KAAK,EAAC;0BAL1De,UAAA,G,0BAMQV,mBAAA,CAEM;IAFDL,KAAK,EAAC;EAAqB,IAC9BK,mBAAA,CAAqC;IAA/BL,KAAK,EAAC;EAAa,GAAC,MAAI,E,yCAGlCE,mBAAA,CAKM,OALNc,UAKM,GAJJX,mBAAA,CAEM,OAFNY,UAEM,GADJZ,mBAAA,CAA+D;IAAzDQ,GAAG,EAAEJ,IAAA,CAAAS,yBAAyB;IAAIJ,GAAG,EAAC;0BAZtDK,UAAA,E,6BAcQd,mBAAA,CAAmB,cAAb,QAAM,qB,MAIhBD,mBAAA,aAAgB,EAChBC,mBAAA,CAYM,OAZNe,UAYM,GAXJf,mBAAA,CAUM,OAVNgB,UAUM,I,kBATJnB,mBAAA,CAQSoB,SAAA,QA7BjBC,WAAA,CAsB0Bd,IAAA,CAAAe,YAAY,EAArBC,KAAK;yBADdvB,mBAAA,CAQS;MANND,GAAG,EAAEwB,KAAK;MACXzB,KAAK,EAxBf0B,eAAA,EAwBgB,cAAc;QAAAC,MAAA,EACFlB,IAAA,CAAAmB,aAAa,KAAKH;MAAK;MACxCnB,OAAK,EAAAuB,MAAA,IAAEpB,IAAA,CAAAqB,WAAW,CAACL,KAAK;wBAEtBhB,IAAA,CAAAsB,YAAY,CAACN,KAAK,iCA5B/BO,UAAA;sCAiCI5B,mBAAA,UAAa,EACbC,mBAAA,CAsCM,OAtCN4B,WAsCM,I,kBArCJ/B,mBAAA,CAWMoB,SAAA,QA9CZC,WAAA,CAoCkCd,IAAA,CAAAyB,gBAAgB,EApClD,CAoCgBC,MAAM,EAAEC,KAAK;yBADvBlC,mBAAA,CAWM;MATHD,GAAG,EAAEmC,KAAK;MACXpC,KAAK,EAtCb0B,eAAA,EAsCc,eAAe;QAAAW,QAAA,EACD5B,IAAA,CAAA6B,cAAc,KAAKH;MAAM;MAC5C7B,OAAK,EAAAuB,MAAA,IAAEpB,IAAA,CAAA8B,YAAY,CAACJ,MAAM;QAE3B9B,mBAAA,CAAyC;MAAnCQ,GAAG,EAAEsB,MAAM;MAAErB,GAAG,EAAC;4BA1C/B0B,WAAA,G,0BA2CQnC,mBAAA,CAEM;MAFDL,KAAK,EAAC;IAAc,IACvBK,mBAAA,CAAmC;MAA7BL,KAAK,EAAC;IAAa,GAAC,IAAE,E,8CA5CtCyC,WAAA;kCAgDMrC,mBAAA,UAAa,EACbC,mBAAA,CAKM;IALDL,KAAK,EAAC,8BAA8B;IAAEM,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,IAAA,CAAAiC,iBAAA,IAAAjC,IAAA,CAAAiC,iBAAA,IAAAlC,IAAA,CAAiB;gCACjEH,mBAAA,CAGM;IAHDL,KAAK,EAAC;EAAc,IACvBK,mBAAA,CAAc,cAAR,GAAC,GACPA,mBAAA,CAAqC;IAA/BL,KAAK,EAAC;EAAc,GAAC,KAAG,E,wBAIlCI,mBAAA,aAAgB,EAChBC,mBAAA,CAcM,OAdNsC,WAcM,G,0BAbJtC,mBAAA,CAKQ;IALDuC,GAAG,EAAC,eAAe;IAAC5C,KAAK,EAAC;MAC/BK,mBAAA,CAGM;IAHDL,KAAK,EAAC;EAAa,IACtBK,mBAAA,CAAc,cAAR,GAAC,GACPA,mBAAA,CAAqC;IAA/BL,KAAK,EAAC;EAAa,GAAC,MAAI,E,wBAGlCK,mBAAA,CAME;IALAwC,IAAI,EAAC,MAAM;IACXC,EAAE,EAAC,eAAe;IACjBC,QAAM,EAAAxC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,IAAA,CAAAuC,gBAAA,IAAAvC,IAAA,CAAAuC,gBAAA,IAAAxC,IAAA,CAAgB;IACzByC,MAAM,EAAC,SAAS;IAChBxB,KAAqB,EAArB;MAAA;IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}