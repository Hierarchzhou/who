{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport UserNameInput from './UserNameInput.vue';\nimport MessageList from './MessageList.vue';\nimport MessageInput from './MessageInput.vue';\nimport ThemeSelector from './ThemeSelector.vue';\nimport UserProfileEditor from './UserProfileEditor.vue';\nimport axios from 'axios';\nimport { handleAvatarError, getFallbackAvatarUrl } from '../../utils/avatarUtils';\nexport default {\n  name: 'ChatContainer',\n  components: {\n    UserNameInput,\n    MessageList,\n    MessageInput,\n    ThemeSelector,\n    UserProfileEditor\n  },\n  props: {\n    // 当前用户信息\n    currentUser: {\n      type: Object,\n      default: () => ({\n        username: '',\n        avatar: ''\n      })\n    }\n  },\n  data() {\n    return {\n      username: this.currentUser.username || '',\n      // 用户昵称\n      userAvatar: this.currentUser.avatar || '',\n      // 用户头像\n      messages: [],\n      // 消息列表\n      onlineUsers: [],\n      // 在线用户列表\n      apiUrl: 'http://localhost:3001/api/messages',\n      // 消息API地址\n      usersApiUrl: 'http://localhost:3001/api/users',\n      // 用户API地址\n      pollingInterval: null,\n      // 用于轮询消息的计时器\n      onlinePollingInterval: null,\n      // 用于轮询在线用户的计时器\n      currentTheme: localStorage.getItem('chat-theme') || 'discord',\n      // 当前主题\n      showProfileEditor: false,\n      // 是否显示个人资料编辑器\n      currentUserInfo: {} // 当前用户信息\n    };\n  },\n  watch: {\n    // 监听props变化\n    currentUser: {\n      handler(newValue) {\n        this.username = newValue.username || '';\n        this.userAvatar = newValue.avatar || '';\n      },\n      deep: true\n    },\n    // 监听在线用户变化，向父组件发送更新事件\n    onlineUsers: {\n      handler(newValue) {\n        this.$emit('update-online-users', newValue);\n      },\n      deep: true\n    }\n  },\n  created() {\n    // 从localStorage获取用户信息\n    const savedUsername = localStorage.getItem('chat-username');\n    const savedAvatar = localStorage.getItem('chat-avatar');\n    if (savedUsername && !this.username) {\n      this.username = savedUsername;\n    }\n    if (savedAvatar && !this.userAvatar) {\n      this.userAvatar = savedAvatar;\n    } else if (!this.userAvatar) {\n      // 设置默认头像\n      this.userAvatar = '/avatars/default.png';\n      localStorage.setItem('chat-avatar', this.userAvatar);\n    }\n\n    // 如果用户已登录，注册用户\n    if (this.username) {\n      this.registerUser();\n    }\n  },\n  mounted() {\n    // 如果用户已登录，获取消息和在线用户\n    if (this.username) {\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n\n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    }\n\n    // 应用保存的主题\n    document.body.classList.add(`theme-${this.currentTheme}`);\n  },\n  beforeUnmount() {\n    // 清除轮询\n    clearInterval(this.pollingInterval);\n    clearInterval(this.onlinePollingInterval);\n  },\n  methods: {\n    // 设置用户名和头像\n    setUsername(userData) {\n      this.username = userData.username;\n      this.userAvatar = userData.avatar;\n\n      // 保存到localStorage\n      localStorage.setItem('chat-username', this.username);\n      localStorage.setItem('chat-avatar', this.userAvatar);\n\n      // 注册用户\n      this.registerUser();\n\n      // 获取消息和在线用户\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n\n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    },\n    // 注册用户\n    async registerUser() {\n      try {\n        await axios.post(`${this.usersApiUrl}/register`, {\n          username: this.username,\n          avatar: this.userAvatar\n        });\n        console.log('用户注册成功');\n      } catch (error) {\n        console.error('用户注册失败:', error);\n      }\n    },\n    // 获取消息\n    async fetchMessages() {\n      try {\n        const response = await axios.get(this.apiUrl);\n        this.messages = response.data;\n        // 滚动到底部\n        this.$nextTick(() => {\n          if (this.$refs.messageList) {\n            this.$refs.messageList.scrollToBottom();\n          }\n        });\n      } catch (error) {\n        console.error('获取消息失败:', error);\n        // 开发阶段如果API未就绪，使用模拟数据\n        if (this.messages.length === 0) {\n          this.messages = [{\n            id: 1,\n            sender: 'System',\n            content: '欢迎来到聊天室!',\n            timestamp: new Date().toISOString(),\n            avatar: '/avatars/default.png'\n          }];\n        }\n      }\n    },\n    // 获取在线用户\n    async fetchOnlineUsers() {\n      try {\n        const response = await axios.get(`${this.usersApiUrl}/online`);\n        this.onlineUsers = response.data;\n      } catch (error) {\n        console.error('获取在线用户失败:', error);\n        // 开发阶段如果API未就绪，使用模拟数据\n        if (this.onlineUsers.length === 0) {\n          this.onlineUsers = [{\n            username: this.username,\n            avatar: this.userAvatar\n          }];\n        }\n      }\n    },\n    // 发送消息\n    async sendMessage(content) {\n      if (!content.trim()) return;\n      try {\n        const response = await axios.post(this.apiUrl, {\n          sender: this.username,\n          content: content,\n          avatar: this.userAvatar\n        });\n\n        // 将新消息添加到消息列表\n        this.messages.push(response.data);\n\n        // 滚动到底部\n        this.$nextTick(() => {\n          if (this.$refs.messageList) {\n            this.$refs.messageList.scrollToBottom();\n          }\n        });\n      } catch (error) {\n        console.error('发送消息失败:', error);\n\n        // 开发阶段如果API未就绪，使用模拟数据\n        const mockMessage = {\n          id: Date.now(),\n          sender: this.username,\n          content: content,\n          timestamp: new Date().toISOString(),\n          avatar: this.userAvatar\n        };\n        this.messages.push(mockMessage);\n\n        // 滚动到底部\n        this.$nextTick(() => {\n          if (this.$refs.messageList) {\n            this.$refs.messageList.scrollToBottom();\n          }\n        });\n      }\n    },\n    // 处理头像加载错误\n    handleAvatarError(event) {\n      handleAvatarError(event);\n    },\n    // 获取备用头像URL\n    getFallbackAvatarUrl() {\n      return getFallbackAvatarUrl();\n    },\n    // 打开个人资料编辑器\n    openProfileEditor() {\n      this.showProfileEditor = true;\n      this.currentUserInfo = {\n        username: this.username,\n        avatar: this.userAvatar\n      };\n    },\n    // 关闭个人资料编辑器\n    closeProfileEditor() {\n      this.showProfileEditor = false;\n    },\n    // 更新用户信息\n    updateProfile(updatedInfo) {\n      this.username = updatedInfo.username;\n      this.userAvatar = updatedInfo.avatar;\n\n      // 保存到localStorage\n      localStorage.setItem('chat-username', this.username);\n      localStorage.setItem('chat-avatar', this.userAvatar);\n\n      // 注册用户\n      this.registerUser();\n\n      // 获取消息和在线用户\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n\n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    }\n  }\n};","map":{"version":3,"names":["UserNameInput","MessageList","MessageInput","ThemeSelector","UserProfileEditor","axios","handleAvatarError","getFallbackAvatarUrl","name","components","props","currentUser","type","Object","default","username","avatar","data","userAvatar","messages","onlineUsers","apiUrl","usersApiUrl","pollingInterval","onlinePollingInterval","currentTheme","localStorage","getItem","showProfileEditor","currentUserInfo","watch","handler","newValue","deep","$emit","created","savedUsername","savedAvatar","setItem","registerUser","mounted","fetchMessages","fetchOnlineUsers","setInterval","document","body","classList","add","beforeUnmount","clearInterval","methods","setUsername","userData","post","console","log","error","response","get","$nextTick","$refs","messageList","scrollToBottom","length","id","sender","content","timestamp","Date","toISOString","sendMessage","trim","push","mockMessage","now","event","openProfileEditor","closeProfileEditor","updateProfile","updatedInfo"],"sources":["C:\\Users\\Administrator\\Desktop\\discord-chat-app\\fack\\just-do-it\\src\\components\\chat\\ChatContainer.vue"],"sourcesContent":["<template>\n  <div class=\"chat-container\">\n    <!-- 用户名输入界面，当用户未设置昵称时显示 -->\n    <UserNameInput \n      v-if=\"!username\" \n      @set-username=\"setUsername\" \n    />\n    \n    <!-- 聊天界面，当用户已设置昵称时显示 -->\n    <div v-else class=\"chat-interface\">\n      <header class=\"chat-header\">\n        <h2 class=\"chat-title\">Vue聊天室</h2>\n        <div class=\"user-info-container\">\n          <ThemeSelector />\n          <div class=\"user-info\">\n            <img \n              :src=\"userAvatar || getFallbackAvatarUrl()\" \n              alt=\"用户头像\" \n              class=\"user-avatar\"\n              @error=\"handleAvatarError\"\n              @click=\"openProfileEditor\" \n            >\n            <span class=\"current-username\">{{ username }}</span>\n          </div>\n        </div>\n      </header>\n      \n      <div class=\"chat-main\">\n        <MessageList \n          :messages=\"messages\" \n          :currentUsername=\"username\" \n          ref=\"messageList\" \n        />\n      </div>\n      \n      <MessageInput @send-message=\"sendMessage\" />\n    </div>\n    \n    <!-- 个人资料编辑器 -->\n    <UserProfileEditor \n      :isOpen=\"showProfileEditor\"\n      :currentUserInfo=\"currentUserInfo\"\n      @close=\"closeProfileEditor\"\n      @update-profile=\"updateProfile\"\n    />\n  </div>\n</template>\n\n<script>\nimport UserNameInput from './UserNameInput.vue';\nimport MessageList from './MessageList.vue';\nimport MessageInput from './MessageInput.vue';\nimport ThemeSelector from './ThemeSelector.vue';\nimport UserProfileEditor from './UserProfileEditor.vue';\nimport axios from 'axios';\nimport { handleAvatarError, getFallbackAvatarUrl } from '../../utils/avatarUtils';\n\nexport default {\n  name: 'ChatContainer',\n  components: {\n    UserNameInput,\n    MessageList,\n    MessageInput,\n    ThemeSelector,\n    UserProfileEditor\n  },\n  props: {\n    // 当前用户信息\n    currentUser: {\n      type: Object,\n      default: () => ({\n        username: '',\n        avatar: ''\n      })\n    }\n  },\n  data() {\n    return {\n      username: this.currentUser.username || '', // 用户昵称\n      userAvatar: this.currentUser.avatar || '', // 用户头像\n      messages: [], // 消息列表\n      onlineUsers: [], // 在线用户列表\n      apiUrl: 'http://localhost:3001/api/messages', // 消息API地址\n      usersApiUrl: 'http://localhost:3001/api/users', // 用户API地址\n      pollingInterval: null, // 用于轮询消息的计时器\n      onlinePollingInterval: null, // 用于轮询在线用户的计时器\n      currentTheme: localStorage.getItem('chat-theme') || 'discord', // 当前主题\n      showProfileEditor: false, // 是否显示个人资料编辑器\n      currentUserInfo: {} // 当前用户信息\n    }\n  },\n  watch: {\n    // 监听props变化\n    currentUser: {\n      handler(newValue) {\n        this.username = newValue.username || '';\n        this.userAvatar = newValue.avatar || '';\n      },\n      deep: true\n    },\n    // 监听在线用户变化，向父组件发送更新事件\n    onlineUsers: {\n      handler(newValue) {\n        this.$emit('update-online-users', newValue);\n      },\n      deep: true\n    }\n  },\n  created() {\n    // 从localStorage获取用户信息\n    const savedUsername = localStorage.getItem('chat-username');\n    const savedAvatar = localStorage.getItem('chat-avatar');\n    \n    if (savedUsername && !this.username) {\n      this.username = savedUsername;\n    }\n    \n    if (savedAvatar && !this.userAvatar) {\n      this.userAvatar = savedAvatar;\n    } else if (!this.userAvatar) {\n      // 设置默认头像\n      this.userAvatar = '/avatars/default.png';\n      localStorage.setItem('chat-avatar', this.userAvatar);\n    }\n    \n    // 如果用户已登录，注册用户\n    if (this.username) {\n      this.registerUser();\n    }\n  },\n  mounted() {\n    // 如果用户已登录，获取消息和在线用户\n    if (this.username) {\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n      \n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    }\n    \n    // 应用保存的主题\n    document.body.classList.add(`theme-${this.currentTheme}`);\n  },\n  beforeUnmount() {\n    // 清除轮询\n    clearInterval(this.pollingInterval);\n    clearInterval(this.onlinePollingInterval);\n  },\n  methods: {\n    // 设置用户名和头像\n    setUsername(userData) {\n      this.username = userData.username;\n      this.userAvatar = userData.avatar;\n      \n      // 保存到localStorage\n      localStorage.setItem('chat-username', this.username);\n      localStorage.setItem('chat-avatar', this.userAvatar);\n      \n      // 注册用户\n      this.registerUser();\n      \n      // 获取消息和在线用户\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n      \n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    },\n    \n    // 注册用户\n    async registerUser() {\n      try {\n        await axios.post(`${this.usersApiUrl}/register`, {\n          username: this.username,\n          avatar: this.userAvatar\n        });\n        console.log('用户注册成功');\n      } catch (error) {\n        console.error('用户注册失败:', error);\n      }\n    },\n    \n    // 获取消息\n    async fetchMessages() {\n      try {\n        const response = await axios.get(this.apiUrl);\n        this.messages = response.data;\n        // 滚动到底部\n        this.$nextTick(() => {\n          if (this.$refs.messageList) {\n            this.$refs.messageList.scrollToBottom();\n          }\n        });\n      } catch (error) {\n        console.error('获取消息失败:', error);\n        // 开发阶段如果API未就绪，使用模拟数据\n        if (this.messages.length === 0) {\n          this.messages = [\n            { \n              id: 1, \n              sender: 'System', \n              content: '欢迎来到聊天室!', \n              timestamp: new Date().toISOString(),\n              avatar: '/avatars/default.png'\n            }\n          ];\n        }\n      }\n    },\n    \n    // 获取在线用户\n    async fetchOnlineUsers() {\n      try {\n        const response = await axios.get(`${this.usersApiUrl}/online`);\n        this.onlineUsers = response.data;\n      } catch (error) {\n        console.error('获取在线用户失败:', error);\n        // 开发阶段如果API未就绪，使用模拟数据\n        if (this.onlineUsers.length === 0) {\n          this.onlineUsers = [\n            { username: this.username, avatar: this.userAvatar }\n          ];\n        }\n      }\n    },\n    \n    // 发送消息\n    async sendMessage(content) {\n      if (!content.trim()) return;\n      \n      try {\n        const response = await axios.post(this.apiUrl, {\n          sender: this.username,\n          content: content,\n          avatar: this.userAvatar\n        });\n        \n        // 将新消息添加到消息列表\n        this.messages.push(response.data);\n        \n        // 滚动到底部\n        this.$nextTick(() => {\n          if (this.$refs.messageList) {\n            this.$refs.messageList.scrollToBottom();\n          }\n        });\n      } catch (error) {\n        console.error('发送消息失败:', error);\n        \n        // 开发阶段如果API未就绪，使用模拟数据\n        const mockMessage = {\n          id: Date.now(),\n          sender: this.username,\n          content: content,\n          timestamp: new Date().toISOString(),\n          avatar: this.userAvatar\n        };\n        \n        this.messages.push(mockMessage);\n        \n        // 滚动到底部\n        this.$nextTick(() => {\n          if (this.$refs.messageList) {\n            this.$refs.messageList.scrollToBottom();\n          }\n        });\n      }\n    },\n    // 处理头像加载错误\n    handleAvatarError(event) {\n      handleAvatarError(event);\n    },\n    // 获取备用头像URL\n    getFallbackAvatarUrl() {\n      return getFallbackAvatarUrl();\n    },\n    // 打开个人资料编辑器\n    openProfileEditor() {\n      this.showProfileEditor = true;\n      this.currentUserInfo = {\n        username: this.username,\n        avatar: this.userAvatar\n      };\n    },\n    // 关闭个人资料编辑器\n    closeProfileEditor() {\n      this.showProfileEditor = false;\n    },\n    // 更新用户信息\n    updateProfile(updatedInfo) {\n      this.username = updatedInfo.username;\n      this.userAvatar = updatedInfo.avatar;\n      \n      // 保存到localStorage\n      localStorage.setItem('chat-username', this.username);\n      localStorage.setItem('chat-avatar', this.userAvatar);\n      \n      // 注册用户\n      this.registerUser();\n      \n      // 获取消息和在线用户\n      this.fetchMessages();\n      this.fetchOnlineUsers();\n      \n      // 设置轮询\n      this.pollingInterval = setInterval(this.fetchMessages, 3000);\n      this.onlinePollingInterval = setInterval(this.fetchOnlineUsers, 5000);\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat-container {\n  flex: 1;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background-color: var(--chat-background);\n  color: var(--text-color);\n  position: relative;\n  z-index: 1;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);\n}\n\n.chat-interface {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  backdrop-filter: blur(5px);\n}\n\n.chat-header {\n  padding: 1rem 1.5rem;\n  background-color: var(--primary-color);\n  color: var(--header-color);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  box-shadow: var(--header-shadow);\n  position: relative;\n  z-index: 2;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.05), transparent);\n}\n\n.chat-title {\n  margin: 0;\n  font-size: 1.25rem;\n  font-weight: 600;\n  letter-spacing: 0.5px;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\n}\n\n.user-info-container {\n  display: flex;\n  align-items: center;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  margin-left: 1rem;\n  background-color: rgba(255, 255, 255, 0.1);\n  padding: 0.5rem 0.75rem;\n  border-radius: 2rem;\n  backdrop-filter: blur(5px);\n  border: 1px solid rgba(255, 255, 255, 0.05);\n  transition: all 0.2s ease;\n}\n\n.user-info:hover {\n  background-color: rgba(255, 255, 255, 0.15);\n  transform: translateY(-1px);\n}\n\n.user-avatar {\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  object-fit: cover;\n  border: var(--avatar-border);\n  box-shadow: var(--avatar-shadow);\n  transition: transform 0.2s ease;\n  cursor: pointer;\n}\n\n.user-avatar:hover {\n  transform: scale(1.1);\n}\n\n.current-username {\n  margin-left: 0.5rem;\n  font-weight: 500;\n  color: var(--text-color);\n  mix-blend-mode: overlay;\n}\n\n.chat-main {\n  display: flex;\n  flex: 1;\n  overflow: hidden;\n  position: relative;\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .chat-container {\n    height: auto;\n    flex: 1;\n  }\n}\n</style> \n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}